{
  "CODE_OF_CONDUCT.html": {
    "href": "CODE_OF_CONDUCT.html",
    "title": "Contributor Covenant Code of Conduct | Authentica",
    "keywords": "Contributor Covenant Code of Conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Enforcement Responsibilities Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at . All complaints will be reviewed and investigated promptly and fairly. All community leaders are obligated to respect the privacy and security of the reporter of any incident. Enforcement Guidelines Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct: 1. Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. 2. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. 3. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. 4. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder. For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."
  },
  "README.html": {
    "href": "README.html",
    "title": "Authentica | Authentica",
    "keywords": "Authentica Secure your app with Authentica, featuring OAuth 2.0 authorization code grant, client credentials grant, device code grant, refresh token grant. Technical Documentation Table of Contents Introduction Planned Improvements User Functionality Technical Functionality Endpoints Getting Started License Introduction Authentica plays a crucial role in your application's security infrastructure, providing essential features for user authentication, authorization, and identity management. This README provides an overview of the service, available endpoints, and instructions on getting started. Planned Improvements Multiple Tenants Passkeys Support (FIDO2, Fingerprint, FaceID) External OAuth2.0 Logins (Microsoft, Google) User Functionality Feature Description Application Authorization Secure access to applications using OAuth 2.0. Create Application Register new applications within the system. Delete Application Remove applications from the system. Read All Applications Retrieve a list of all applications associated with your user account. Read Application by Name Fetch details of a specific application by its name. Update Application Details Modify the properties and settings of an existing application. Confirm Email Verify and confirm your email address. Delete Account Permanently remove your user account from the system. Logout Sign out from the application. Refresh Bearer Token Obtain a new bearer token to maintain authenticated sessions. Register Create a new user account. Update Password Change your account password. Reset Password Initiate a password reset process. Update Email Address Modify the email address associated with your account. Two-Step Verification Enable or manage two-step authentication for enhanced security. Two-Factor Recovery Codes Generate and manage recovery codes for two-factor authentication. Account Lockout Temporary lockout of the account after 3 failed login attempts for 10 minutes. Technical Functionality Feature Description RabbitMQ and Azure Service Bus Support Integration with RabbitMQ and Azure Service Bus for messaging. API Health Checks Regular health checks to monitor the API's status. Secure JWT Bearer Authentication Implementation of secure JWT bearer tokens for authentication. Optional Azure Application Insights Support Optional monitoring and diagnostics using Azure Application Insights. Logging, Tracing, and Metrics Advanced logging, tracing, and metrics with .NET Aspire. Resilient SQL Server Connections Reliable connections to Microsoft SQL Server using Entity Framework Core. Hashed User Passwords Protection of user passwords through irreversable hashing, using Argon2. Hashed Application Secrets Protection of application secrets through irreversable hashing, using Argon2. HTTP/3 Support Utilizes HTTP/3 protocol with fallback to HTTP/2 and HTTP/1 1. Soft deletable entries Utilizes soft deletions to ensure no data is permenantly lost. Auditable Entries To enable auditable entries, I have used CreatedBy, CreatedOn, ModifiedOn, and ModifiedBy columns. These columns help track who created and modified each record and when the changes occurred, ensuring comprehensive audit trails for data changes. Data purge after 7 years, if soft deleted Data purges happen once an entry is over 7 years old. These are implemented as Background Services and run on a seperate thread, using a Periodic Timer. Temporal tables When an entry in a table changes, we can tell when that changed, but also have a record of what changed, through these system versioned history tables Worker Services Utilizes loosley coupled worker services so this is independently scalable from the main service Security Features Implementations of security features such as concurrency stamps, security stamps, last logged in IP address, and last logged in date/time ensure security by providing mechanisms to detect and prevent unauthorized access, track user activity, and maintain data integrity. Activity Logging Utilized Activities to log every user action, ensuring the system state is rebuildable and replayable. Collected information includes the action taken, the request payload, and the timestamp. By implementing session middleware that generates a GUID as a Sequence ID, it is possible to track all actions a user takes within their session. Integration Testing Utilized NUnit and Moq for integration testing to ensure system behavior is as expected by testing the interaction between various components in a production-like environment. This approach helps in identifying issues that may not be apparent in unit tests and ensures that the system works correctly as a whole. Unit Testing Utilized NUnit and Moq for unit testing to ensure individual components function correctly by isolating each part of the code and testing it independently. This approach helps in identifying bugs early in the development process, verifying logic, and ensuring code reliability and maintainability. Endpoints /oauth2/authorize: GET Endpoint for user authorization. /oauth2/token: POST Endpoint for obtaining OAuth tokens. /oauth2/device: GET Endpoint for creating a token to be used on your Smart TV, Smart Fridge and other Smart devices that lack a keyboard and mouse. /users/logout: POST Endpoint for user logout. /users/login: POST Endpoint for user login. /users: GET Endpoint for reading a user by email. /users/register: POST Endpoint for user registration. /users/delete: POST Endpoint for deleting a user by email. /users/confirm-email: POST Endpoint for confirming user email. /users/reset-password: POST Endpoint for resetting user passwords. /users/2fa/login: POST Endpoint for logging in with two-factor authentication. /users/2fa/manage: POST Endpoint for enabling/disabling two-factor authentication settings /users/2fa/manage/authenticator: POST Endpoint for enabling/disabling two factor via an authenticator app. /users/2fa/recovery/codes: GET Endpoint for generating two-factor recovery codes. /users/2fa/recovery: POST Endpoint for redeeming two-factor recovery codes. /users/details/email: PUT Endpoint for updating a user's email. /users/details/number: PUT Endpoint for updating a user's phone number. /users/details/address: PUT Endpoint for updating a user's address. /users/tokens: POST Endpoint for managing user tokens. /applications: GET Endpoint for reading an application by name. /applications/all: GET Endpoint for reading all applications. /applications: POST Endpoint for creating a new application. /applications: PUT Endpoint for updating an application by name. /applications: DELETE Endpoint for deleting an application by name. /applications/secrets: PUT Endpoint for managing application secrets. Getting Started To get started with Authentica, follow these steps: Clone the repository: git clone https://github.com/chris-briddock/Authentica.git Open the solution. Ensure you have added migrations for the project with Entity Framework Core. Replace all required values in appsettings.development.json. SQL Server, Redis and RabbitMQ will be configured already. Using the docker compose file, will start a local SQL Server container, RabbitMQ, Redis and a .NET Aspire Standalone Dashboard. Start hacking, enjoy! License This project is licensed under the MIT License."
  },
  "api/Api.Constants.RoleDefaults.html": {
    "href": "api/Api.Constants.RoleDefaults.html",
    "title": "Class RoleDefaults | Authentica",
    "keywords": "Class RoleDefaults Namespace Api.Constants Assembly Authentica.Service.Identity.dll Constant values for roles available in the system by default. public static class RoleDefaults Inheritance object RoleDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks These roles will be embedded in the user's JWT token, as a role claim. Fields Admin Represents the admin role. public const string Admin = \"Admin\" Field Value string Remarks The maximum amount of access. User Represents the user role. public const string User = \"User\" Field Value string Remarks The minimum amount of access."
  },
  "api/Api.Constants.Routes.Admin.Roles.html": {
    "href": "api/Api.Constants.Routes.Admin.Roles.html",
    "title": "Class Routes.Admin.Roles | Authentica",
    "keywords": "Class Routes.Admin.Roles Namespace Api.Constants Assembly Authentica.Service.Identity.dll Contains route constants specific to group-related operations. public static class Routes.Admin.Roles Inheritance object Routes.Admin.Roles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Add Route for adding a user to a role. public const string Add = \"admin/roles/add\" Field Value string Create Route for creating a new role. public const string Create = \"admin/roles/create\" Field Value string Delete Route for deleting a role. public const string Delete = \"admin/roles/delete\" Field Value string Read Route for reading role information. public const string Read = \"admin/roles\" Field Value string Update Route for updating a role. public const string Update = \"admin/roles/update\" Field Value string"
  },
  "api/Api.Constants.Routes.Admin.html": {
    "href": "api/Api.Constants.Routes.Admin.html",
    "title": "Class Routes.Admin | Authentica",
    "keywords": "Class Routes.Admin Namespace Api.Constants Assembly Authentica.Service.Identity.dll Routes related to administrative operations. public static class Routes.Admin Inheritance object Routes.Admin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Create Allows the admin to create a new admin user. public const string Create = \"admin/register\" Field Value string DisableMultiFactor Allows the admin to reset a password of any user. public const string DisableMultiFactor = \"admin/mfa/disable\" Field Value string ReadAllActivities Reads all the activities in the system. public const string ReadAllActivities = \"admin/activities\" Field Value string ReadAllApplications Reads all the applications. public const string ReadAllApplications = \"admin/applications\" Field Value string ReadAllUsers Reads all the users in the database. public const string ReadAllUsers = \"admin/users\" Field Value string ResetPassword Allows the admin to reset a password of any user. public const string ResetPassword = \"admin/reset-password\" Field Value string"
  },
  "api/Api.Constants.Routes.Applications.html": {
    "href": "api/Api.Constants.Routes.Applications.html",
    "title": "Class Routes.Applications | Authentica",
    "keywords": "Class Routes.Applications Namespace Api.Constants Assembly Authentica.Service.Identity.dll Routes related to application operations. public static class Routes.Applications Inheritance object Routes.Applications Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ApplicationSecrets Route for managing application secrets. public const string ApplicationSecrets = \"applications/secrets\" Field Value string Create Route for creating a new application. public const string Create = \"applications\" Field Value string DeleteByName Route for deleting an application by name. public const string DeleteByName = \"applications\" Field Value string ReadAll Route for reading all applications. public const string ReadAll = \"applications/all\" Field Value string ReadByName Route for reading an application by name. public const string ReadByName = \"applications\" Field Value string UpdateByName Route for updating an application by name. public const string UpdateByName = \"applications\" Field Value string"
  },
  "api/Api.Constants.Routes.BaseRoute.html": {
    "href": "api/Api.Constants.Routes.BaseRoute.html",
    "title": "Class Routes.BaseRoute | Authentica",
    "keywords": "Class Routes.BaseRoute Namespace Api.Constants Assembly Authentica.Service.Identity.dll Base route for all API endpoints. public static class Routes.BaseRoute Inheritance object Routes.BaseRoute Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Name Base URL format for API endpoints, including versioning. public const string Name = \"api/v{version:apiVersion}/\" Field Value string"
  },
  "api/Api.Constants.Routes.OAuth.html": {
    "href": "api/Api.Constants.Routes.OAuth.html",
    "title": "Class Routes.OAuth | Authentica",
    "keywords": "Class Routes.OAuth Namespace Api.Constants Assembly Authentica.Service.Identity.dll Routes related to OAuth operations. public static class Routes.OAuth Inheritance object Routes.OAuth Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Authorize Route for authorizing OAuth requests. public const string Authorize = \"oauth2/authorize\" Field Value string Device Routes for device code. public const string Device = \"oauth2/device\" Field Value string Token Route for obtaining OAuth tokens. public const string Token = \"oauth2/token\" Field Value string"
  },
  "api/Api.Constants.Routes.Sessions.html": {
    "href": "api/Api.Constants.Routes.Sessions.html",
    "title": "Class Routes.Sessions | Authentica",
    "keywords": "Class Routes.Sessions Namespace Api.Constants Assembly Authentica.Service.Identity.dll Contains route constants for session endpoints. public static class Routes.Sessions Inheritance object Routes.Sessions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Name Route for operations on a session. public const string Name = \"sessions\" Field Value string"
  },
  "api/Api.Constants.Routes.Users.html": {
    "href": "api/Api.Constants.Routes.Users.html",
    "title": "Class Routes.Users | Authentica",
    "keywords": "Class Routes.Users Namespace Api.Constants Assembly Authentica.Service.Identity.dll Routes related to user operations. public static class Routes.Users Inheritance object Routes.Users Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ConfirmEmail Route for confirming user email. public const string ConfirmEmail = \"users/confirm-email\" Field Value string Create Route for creating a new user. public const string Create = \"users/register\" Field Value string DeleteByEmail Route for deleting a user by email. public const string DeleteByEmail = \"users/delete\" Field Value string Login Route for logging in using OAuth. public const string Login = \"users/login\" Field Value string Logout Route for logging out using OAuth. public const string Logout = \"users/logout\" Field Value string MultiFactorLogin Route for logging in with mfa authentication. public const string MultiFactorLogin = \"users/mfa/login\" Field Value string MultiFactorManage Route for managing mfa authentication. public const string MultiFactorManage = \"users/mfa/manage\" Field Value string MultiFactorManageAuthenticator Route for managing mfa codes using an application like Google or Microsoft Authenticator. public const string MultiFactorManageAuthenticator = \"users/mfa/manage/authenticator\" Field Value string MultiFactorRecoveryCodes Route for generating mfa recovery codes. public const string MultiFactorRecoveryCodes = \"users/mfa/recovery/codes\" Field Value string MultiFactorRedeemRecoveryCodes Route for redeeming mfa recovery codes. public const string MultiFactorRedeemRecoveryCodes = \"users/mfa/recovery\" Field Value string ReadByEmail Route for reading a user by email, only the currently logged in user. public const string ReadByEmail = \"users\" Field Value string Register Route for registering/creating a new user. public const string Register = \"users/register\" Field Value string ResetPassword Route for resetting a user's password. public const string ResetPassword = \"users/reset-password\" Field Value string Tokens Route for tokens. public const string Tokens = \"users/tokens\" Field Value string UpdateAddress Route for updating a user's address. public const string UpdateAddress = \"users/details/address\" Field Value string UpdateEmail Route for updating a user's email. public const string UpdateEmail = \"users/details/email\" Field Value string UpdatePhoneNumber Route for updating a user's phone number. public const string UpdatePhoneNumber = \"users/details/number\" Field Value string"
  },
  "api/Api.Constants.Routes.html": {
    "href": "api/Api.Constants.Routes.html",
    "title": "Class Routes | Authentica",
    "keywords": "Class Routes Namespace Api.Constants Assembly Authentica.Service.Identity.dll Contains all route definitions used in the application. public static class Routes Inheritance object Routes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Api.Constants.html": {
    "href": "api/Api.Constants.html",
    "title": "Namespace Api.Constants | Authentica",
    "keywords": "Namespace Api.Constants Classes RoleDefaults Constant values for roles available in the system by default. Routes Contains all route definitions used in the application. Routes.Admin Routes related to administrative operations. Routes.Admin.Roles Contains route constants specific to group-related operations. Routes.Applications Routes related to application operations. Routes.BaseRoute Base route for all API endpoints. Routes.OAuth Routes related to OAuth operations. Routes.Sessions Contains route constants for session endpoints. Routes.Users Routes related to user operations."
  },
  "api/Api.Endpoints.Admin.DisableMultiFactorEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.DisableMultiFactorEndpoint.html",
    "title": "Class DisableMultiFactorEndpoint | Authentica",
    "keywords": "Class DisableMultiFactorEndpoint Namespace Api.Endpoints.Admin Assembly Authentica.Service.Identity.dll Endpoint for reading all applications and returning their responses. [Route(\"api/v{version:apiVersion}/\")] public sealed class DisableMultiFactorEndpoint : EndpointBaseAsync.WithRequest<DisableMultiFactorRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<DisableMultiFactorRequest>.WithActionResult DisableMultiFactorEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DisableMultiFactorEndpoint(IServiceProvider) Initializes a new instance of the DisableMultiFactorEndpoint class. public DisableMultiFactorEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods HandleAsync(DisableMultiFactorRequest, CancellationToken) Handles disabling mfa for a given user. [HttpPost(\"admin/mfa/disable\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(500)] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] public override Task<ActionResult> HandleAsync(DisableMultiFactorRequest request, CancellationToken cancellationToken = default) Parameters request DisableMultiFactorRequest The object which encapsulates the request. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Admin.ReadAllActivitiesEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.ReadAllActivitiesEndpoint.html",
    "title": "Class ReadAllActivitiesEndpoint | Authentica",
    "keywords": "Class ReadAllActivitiesEndpoint Namespace Api.Endpoints.Admin Assembly Authentica.Service.Identity.dll Endpoint for reading all applications and returning their responses. [Route(\"api/v{version:apiVersion}/\")] public sealed class ReadAllActivitiesEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult<IList<ActivityResponse>> Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult<IList<ActivityResponse>> ReadAllActivitiesEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllActivitiesEndpoint(IServiceProvider) Initializes a new instance of the DisableMultiFactorEndpoint class. public ReadAllActivitiesEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods HandleAsync(CancellationToken) Handles reading all events in the system. [HttpGet(\"admin/activities\")] [ProducesResponseType(200)] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] public override Task<ActionResult<IList<ActivityResponse>>> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult<IList<ActivityResponse>>> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Admin.ReadAllApplicationsEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.ReadAllApplicationsEndpoint.html",
    "title": "Class ReadAllApplicationsEndpoint | Authentica",
    "keywords": "Class ReadAllApplicationsEndpoint Namespace Api.Endpoints.Admin Assembly Authentica.Service.Identity.dll Endpoint for reading all applications and returning their responses. [Route(\"api/v{version:apiVersion}/\")] public class ReadAllApplicationsEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult<IList<ReadApplicationResponse>> Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult<IList<ReadApplicationResponse>> ReadAllApplicationsEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllApplicationsEndpoint(IServiceProvider) Initializes a new instance of the ReadAllApplicationsEndpoint class. public ReadAllApplicationsEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods HandleAsync(CancellationToken) Handles the request to read all applications. [HttpGet(\"admin/applications\")] [ProducesResponseType(200)] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] public override Task<ActionResult<IList<ReadApplicationResponse>>> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult<IList<ReadApplicationResponse>>> A list of application responses."
  },
  "api/Api.Endpoints.Admin.ReadAllUsersEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.ReadAllUsersEndpoint.html",
    "title": "Class ReadAllUsersEndpoint | Authentica",
    "keywords": "Class ReadAllUsersEndpoint Namespace Api.Endpoints.Admin Assembly Authentica.Service.Identity.dll Endpoint for reading all users. [Route(\"api/v{version:apiVersion}/\")] public sealed class ReadAllUsersEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult<IList<GetUserResponse>> Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult<IList<GetUserResponse>> ReadAllUsersEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadAllUsersEndpoint(IServiceProvider) Initializes a new instance of ReadAllUsersEndpoint public ReadAllUsersEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(CancellationToken) Reads all users in the database. [HttpGet(\"admin/users\")] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [ProducesResponseType(200)] public override Task<ActionResult<IList<GetUserResponse>>> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult<IList<GetUserResponse>>> The result of the users being returned"
  },
  "api/Api.Endpoints.Admin.RegisterAdminEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.RegisterAdminEndpoint.html",
    "title": "Class RegisterAdminEndpoint | Authentica",
    "keywords": "Class RegisterAdminEndpoint Namespace Api.Endpoints.Admin Assembly Authentica.Service.Identity.dll Endpoint for registering a new admin user. [Route(\"api/v{version:apiVersion}/\")] public class RegisterAdminEndpoint : EndpointBaseAsync.WithRequest<RegisterRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<RegisterRequest>.WithActionResult RegisterAdminEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterAdminEndpoint(IServiceProvider) Initializes a new instance of the RegisterAdminEndpoint class. public RegisterAdminEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for resolving dependencies. Methods HandleAsync(RegisterRequest, CancellationToken) Handles the HTTP POST request for registering a new admin user. [HttpPost(\"admin/register\")] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [ProducesResponseType(201)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(RegisterRequest request, CancellationToken cancellationToken = default) Parameters request RegisterRequest The registration request containing user details. cancellationToken CancellationToken A cancellation token to cancel the operation. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Admin.ResetPasswordEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.ResetPasswordEndpoint.html",
    "title": "Class ResetPasswordEndpoint | Authentica",
    "keywords": "Class ResetPasswordEndpoint Namespace Api.Endpoints.Admin Assembly Authentica.Service.Identity.dll Endpoint for resetting a user's password. [Route(\"api/v{version:apiVersion}/\")] public class ResetPasswordEndpoint : EndpointBaseAsync.WithRequest<AdminPasswordResetRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<AdminPasswordResetRequest>.WithActionResult ResetPasswordEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetPasswordEndpoint(IServiceProvider) Initializes a new instance of the ResetPasswordEndpoint class. public ResetPasswordEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for resolving dependencies. Methods HandleAsync(AdminPasswordResetRequest, CancellationToken) Allows an admin to reset a users password. [HttpPost(\"admin/reset-password\")] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [ProducesResponseType(204)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(AdminPasswordResetRequest request, CancellationToken cancellationToken = default) Parameters request AdminPasswordResetRequest The reset request containing user details. cancellationToken CancellationToken A cancellation token to cancel the operation. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Admin.Roles.AddToRoleEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.Roles.AddToRoleEndpoint.html",
    "title": "Class AddToRoleEndpoint | Authentica",
    "keywords": "Class AddToRoleEndpoint Namespace Api.Endpoints.Admin.Roles Assembly Authentica.Service.Identity.dll Endpoint for adding a user to a role. [Route(\"api/v{version:apiVersion}/\")] public sealed class AddToRoleEndpoint : EndpointBaseAsync.WithRequest<AddToRoleRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<AddToRoleRequest>.WithActionResult AddToRoleEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AddToRoleEndpoint(IServiceProvider) Initializes a new instance of the AddToRoleEndpoint class. public AddToRoleEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for dependency injection. Exceptions ArgumentNullException Thrown if services is null. Methods HandleAsync(AddToRoleRequest, CancellationToken) Handles the HTTP PUT request for adding a user to a role. [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [HttpPut(\"admin/roles/add\")] public override Task<ActionResult> HandleAsync(AddToRoleRequest request, CancellationToken cancellationToken = default) Parameters request AddToRoleRequest The request containing the user's email and the role to be added. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult> ActionResult indicating the result of the operation. Returns OkResult if the user is successfully added to the role. Returns BadRequestResult if the operation fails."
  },
  "api/Api.Endpoints.Admin.Roles.CreateRoleEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.Roles.CreateRoleEndpoint.html",
    "title": "Class CreateRoleEndpoint | Authentica",
    "keywords": "Class CreateRoleEndpoint Namespace Api.Endpoints.Admin.Roles Assembly Authentica.Service.Identity.dll Endpoint for creating a new role. [Route(\"api/v{version:apiVersion}/\")] public class CreateRoleEndpoint : EndpointBaseAsync.WithRequest<CreateRoleRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<CreateRoleRequest>.WithActionResult CreateRoleEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateRoleEndpoint(IServiceProvider) Initializes a new instance of the CreateRoleEndpoint class. public CreateRoleEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for dependency injection. Exceptions ArgumentNullException Thrown if services is null. Methods HandleAsync(CreateRoleRequest, CancellationToken) Handles the creation of a new group. [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [ProducesResponseType(201)] [ProducesResponseType(500)] [HttpPost(\"admin/roles/create\")] public override Task<ActionResult> HandleAsync(CreateRoleRequest request, CancellationToken cancellationToken = default) Parameters request CreateRoleRequest The request containing role creation details. cancellationToken CancellationToken A token to cancel the operation if needed. Returns Task<ActionResult> An action result indicating the outcome of the operation."
  },
  "api/Api.Endpoints.Admin.Roles.DeleteRoleEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.Roles.DeleteRoleEndpoint.html",
    "title": "Class DeleteRoleEndpoint | Authentica",
    "keywords": "Class DeleteRoleEndpoint Namespace Api.Endpoints.Admin.Roles Assembly Authentica.Service.Identity.dll Represents an endpoint for deleting a group (soft delete). [Route(\"api/v{version:apiVersion}/\")] public sealed class DeleteRoleEndpoint : EndpointBaseAsync.WithRequest<DeleteRoleRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<DeleteRoleRequest>.WithActionResult DeleteRoleEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteRoleEndpoint(IServiceProvider) Initializes a new instance of the DeleteRoleEndpoint class. public DeleteRoleEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for dependency injection. Methods HandleAsync(DeleteRoleRequest, CancellationToken) Handles the request to delete (soft delete) an existing group. [HttpDelete(\"admin/roles/delete\")] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [ProducesResponseType(204)] [ProducesResponseType(400)] public override Task<ActionResult> HandleAsync(DeleteRoleRequest request, CancellationToken cancellationToken = default) Parameters request DeleteRoleRequest The request containing the name of the group to delete. cancellationToken CancellationToken A token to cancel the operation if needed. Returns Task<ActionResult> An action result indicating the outcome of the delete operation."
  },
  "api/Api.Endpoints.Admin.Roles.ReadRolesEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.Roles.ReadRolesEndpoint.html",
    "title": "Class ReadRolesEndpoint | Authentica",
    "keywords": "Class ReadRolesEndpoint Namespace Api.Endpoints.Admin.Roles Assembly Authentica.Service.Identity.dll Represents an endpoint for retrieving all groups (roles). [Route(\"api/v{version:apiVersion}/\")] public sealed class ReadRolesEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult ReadRolesEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadRolesEndpoint(IServiceProvider) Initializes a new instance of the ReadRolesEndpoint class. public ReadRolesEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for dependency injection. Methods HandleAsync(CancellationToken) Handles the request to retrieve all groups. [HttpGet(\"admin/roles\")] [ProducesResponseType(200)] [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the operation if needed. Returns Task<ActionResult> An action result containing the list of all roles (groups). Remarks This method retrieves all roles from the role manager and returns them as an OK result."
  },
  "api/Api.Endpoints.Admin.Roles.UpdateRoleEndpoint.html": {
    "href": "api/Api.Endpoints.Admin.Roles.UpdateRoleEndpoint.html",
    "title": "Class UpdateRoleEndpoint | Authentica",
    "keywords": "Class UpdateRoleEndpoint Namespace Api.Endpoints.Admin.Roles Assembly Authentica.Service.Identity.dll Represents an endpoint for updating an existing group. [Route(\"api/v{version:apiVersion}/\")] public sealed class UpdateRoleEndpoint : EndpointBaseAsync.WithRequest<UpdateRoleRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdateRoleRequest>.WithActionResult UpdateRoleEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateRoleEndpoint(IServiceProvider) Initializes a new instance of the UpdateRoleEndpoint class. public UpdateRoleEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for dependency injection. Methods HandleAsync(UpdateRoleRequest, CancellationToken) Handles the request to update an existing group. [Authorize(AuthenticationSchemes = \"Bearer\", Roles = \"Admin\")] [HttpPut(\"admin/roles/update\")] [ProducesResponseType(204)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdateRoleRequest request, CancellationToken cancellationToken = default) Parameters request UpdateRoleRequest The request containing the updated group information. cancellationToken CancellationToken A token to cancel the operation if needed. Returns Task<ActionResult> An action result indicating the outcome of the update operation. Remarks This method updates the name of an existing role (group) based on the provided request. If the update is successful, it returns a 204 No Content response. If the update fails, it returns a 500 Internal Server Error response."
  },
  "api/Api.Endpoints.Admin.Roles.html": {
    "href": "api/Api.Endpoints.Admin.Roles.html",
    "title": "Namespace Api.Endpoints.Admin.Roles | Authentica",
    "keywords": "Namespace Api.Endpoints.Admin.Roles Classes AddToRoleEndpoint Endpoint for adding a user to a role. CreateRoleEndpoint Endpoint for creating a new role. DeleteRoleEndpoint Represents an endpoint for deleting a group (soft delete). ReadRolesEndpoint Represents an endpoint for retrieving all groups (roles). UpdateRoleEndpoint Represents an endpoint for updating an existing group."
  },
  "api/Api.Endpoints.Admin.html": {
    "href": "api/Api.Endpoints.Admin.html",
    "title": "Namespace Api.Endpoints.Admin | Authentica",
    "keywords": "Namespace Api.Endpoints.Admin Classes DisableMultiFactorEndpoint Endpoint for reading all applications and returning their responses. ReadAllActivitiesEndpoint Endpoint for reading all applications and returning their responses. ReadAllApplicationsEndpoint Endpoint for reading all applications and returning their responses. ReadAllUsersEndpoint Endpoint for reading all users. RegisterAdminEndpoint Endpoint for registering a new admin user. ResetPasswordEndpoint Endpoint for resetting a user's password."
  },
  "api/Api.Endpoints.Applications.CreateApplicationEndpoint.html": {
    "href": "api/Api.Endpoints.Applications.CreateApplicationEndpoint.html",
    "title": "Class CreateApplicationEndpoint | Authentica",
    "keywords": "Class CreateApplicationEndpoint Namespace Api.Endpoints.Applications Assembly Authentica.Service.Identity.dll Endpoint for creating applications. [Route(\"api/v{version:apiVersion}/\")] public sealed class CreateApplicationEndpoint : EndpointBaseAsync.WithRequest<CreateApplicationRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<CreateApplicationRequest>.WithActionResult CreateApplicationEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CreateApplicationEndpoint(IServiceProvider) Initializes a new instance of CreateApplicationEndpoint public CreateApplicationEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(CreateApplicationRequest, CancellationToken) Creates a new application tied to a user. [HttpPost(\"applications\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(201)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CreateApplicationRequest request, CancellationToken cancellationToken = default) Parameters request CreateApplicationRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the application being created."
  },
  "api/Api.Endpoints.Applications.CreateApplicationSecretEndpoint.html": {
    "href": "api/Api.Endpoints.Applications.CreateApplicationSecretEndpoint.html",
    "title": "Class CreateApplicationSecretEndpoint | Authentica",
    "keywords": "Class CreateApplicationSecretEndpoint Namespace Api.Endpoints.Applications Assembly Authentica.Service.Identity.dll Endpoint for creating application secrets. [Route(\"api/v{version:apiVersion}/\")] public class CreateApplicationSecretEndpoint : EndpointBaseAsync.WithRequest<CreateApplicationSecretRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<CreateApplicationSecretRequest>.WithActionResult CreateApplicationSecretEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateApplicationSecretEndpoint(IServiceProvider) Initializes a new instance of CreateApplicationSecretEndpoint public CreateApplicationSecretEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(CreateApplicationSecretRequest, CancellationToken) Creates a new application secret. [HttpPut(\"applications/secrets\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CreateApplicationSecretRequest request, CancellationToken cancellationToken = default) Parameters request CreateApplicationSecretRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the application secret being created."
  },
  "api/Api.Endpoints.Applications.DeleteByNameApplicationEndpoint.html": {
    "href": "api/Api.Endpoints.Applications.DeleteByNameApplicationEndpoint.html",
    "title": "Class DeleteByNameApplicationEndpoint | Authentica",
    "keywords": "Class DeleteByNameApplicationEndpoint Namespace Api.Endpoints.Applications Assembly Authentica.Service.Identity.dll Represents an endpoint to delete an applicaion by name. [Route(\"api/v{version:apiVersion}/\")] public class DeleteByNameApplicationEndpoint : EndpointBaseAsync.WithRequest<DeleteApplicationByNameRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<DeleteApplicationByNameRequest>.WithActionResult DeleteByNameApplicationEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteByNameApplicationEndpoint(IServiceProvider) Initializes a new instance of DeleteByNameApplicationEndpoint public DeleteByNameApplicationEndpoint(IServiceProvider services) Parameters services IServiceProvider Methods HandleAsync(DeleteApplicationByNameRequest, CancellationToken) Allows a user to soft delete an application. [HttpDelete(\"applications\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(DeleteApplicationByNameRequest request, CancellationToken cancellationToken = default) Parameters request DeleteApplicationByNameRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of an application being soft deleted."
  },
  "api/Api.Endpoints.Applications.ReadApplicationsEndpoint.html": {
    "href": "api/Api.Endpoints.Applications.ReadApplicationsEndpoint.html",
    "title": "Class ReadApplicationsEndpoint | Authentica",
    "keywords": "Class ReadApplicationsEndpoint Namespace Api.Endpoints.Applications Assembly Authentica.Service.Identity.dll Exposes an endpoint where users can read all their applications. [Route(\"api/v{version:apiVersion}/\")] public sealed class ReadApplicationsEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult ReadApplicationsEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadApplicationsEndpoint(IServiceProvider) Initializes a new instance of ReadByNameApplicationEndpoint public ReadApplicationsEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(CancellationToken) Allows a user to read all applications they have created. [HttpGet(\"applications/all\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the requested application."
  },
  "api/Api.Endpoints.Applications.ReadByNameApplicationEndpoint.html": {
    "href": "api/Api.Endpoints.Applications.ReadByNameApplicationEndpoint.html",
    "title": "Class ReadByNameApplicationEndpoint | Authentica",
    "keywords": "Class ReadByNameApplicationEndpoint Namespace Api.Endpoints.Applications Assembly Authentica.Service.Identity.dll Exposes an endpoint where users can read their application by name. [Route(\"api/v{version:apiVersion}/\")] public sealed class ReadByNameApplicationEndpoint : EndpointBaseAsync.WithRequest<ReadApplicationByNameRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ReadApplicationByNameRequest>.WithActionResult ReadByNameApplicationEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadByNameApplicationEndpoint(IServiceProvider) Initializes a new instance of ReadByNameApplicationEndpoint public ReadByNameApplicationEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(ReadApplicationByNameRequest, CancellationToken) Allows a user to read an application by name. [HttpGet(\"applications\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(ReadApplicationByNameRequest request, CancellationToken cancellationToken = default) Parameters request ReadApplicationByNameRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the requested application."
  },
  "api/Api.Endpoints.Applications.UpdateByNameApplicationEndpoint.html": {
    "href": "api/Api.Endpoints.Applications.UpdateByNameApplicationEndpoint.html",
    "title": "Class UpdateByNameApplicationEndpoint | Authentica",
    "keywords": "Class UpdateByNameApplicationEndpoint Namespace Api.Endpoints.Applications Assembly Authentica.Service.Identity.dll Endpoint for updating the application name. [Route(\"api/v{version:apiVersion}/\")] public sealed class UpdateByNameApplicationEndpoint : EndpointBaseAsync.WithRequest<UpdateApplicationByNameRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdateApplicationByNameRequest>.WithActionResult UpdateByNameApplicationEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateByNameApplicationEndpoint(IServiceProvider) Initializes a new instance of UpdateByNameApplicationEndpoint public UpdateByNameApplicationEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(UpdateApplicationByNameRequest, CancellationToken) Allows a user to update an application. [HttpPut(\"applications\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [ProducesResponseType(400)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(UpdateApplicationByNameRequest request, CancellationToken cancellationToken = default) Parameters request UpdateApplicationByNameRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult>"
  },
  "api/Api.Endpoints.Applications.html": {
    "href": "api/Api.Endpoints.Applications.html",
    "title": "Namespace Api.Endpoints.Applications | Authentica",
    "keywords": "Namespace Api.Endpoints.Applications Classes CreateApplicationEndpoint Endpoint for creating applications. CreateApplicationSecretEndpoint Endpoint for creating application secrets. DeleteByNameApplicationEndpoint Represents an endpoint to delete an applicaion by name. ReadApplicationsEndpoint Exposes an endpoint where users can read all their applications. ReadByNameApplicationEndpoint Exposes an endpoint where users can read their application by name. UpdateByNameApplicationEndpoint Endpoint for updating the application name."
  },
  "api/Api.Endpoints.DeleteSessionEndpoint.html": {
    "href": "api/Api.Endpoints.DeleteSessionEndpoint.html",
    "title": "Class DeleteSessionEndpoint | Authentica",
    "keywords": "Class DeleteSessionEndpoint Namespace Api.Endpoints Assembly Authentica.Service.Identity.dll Represents an endpoint for deleting a session. [Route(\"api/v{version:apiVersion}/\")] public sealed class DeleteSessionEndpoint : EndpointBaseAsync.WithRequest<DeleteSessionRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<DeleteSessionRequest>.WithActionResult DeleteSessionEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteSessionEndpoint(IServiceProvider) Initializes a new instance of the DeleteSessionEndpoint class. public DeleteSessionEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods HandleAsync(DeleteSessionRequest, CancellationToken) Handles the delete session request asynchronously. [Authorize(AuthenticationSchemes = \"Bearer\")] [HttpDelete(\"sessions\")] [ProducesResponseType(204)] public override Task<ActionResult> HandleAsync(DeleteSessionRequest request, CancellationToken cancellationToken = default) Parameters request DeleteSessionRequest The delete session request containing the session ID. cancellationToken CancellationToken A token to cancel the asynchronous operation (optional). Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.OAuth.AuthorizeEndpoint.html": {
    "href": "api/Api.Endpoints.OAuth.AuthorizeEndpoint.html",
    "title": "Class AuthorizeEndpoint | Authentica",
    "keywords": "Class AuthorizeEndpoint Namespace Api.Endpoints.OAuth Assembly Authentica.Service.Identity.dll Endpoint for handling OAuth authorization requests. [Route(\"api/v{version:apiVersion}/\")] public sealed class AuthorizeEndpoint : EndpointBaseAsync.WithRequest<AuthorizeRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<AuthorizeRequest>.WithActionResult AuthorizeEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizeEndpoint(IServiceProvider) Initializes a new instance of the AuthorizeEndpoint class. public AuthorizeEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider. Methods HandleAsync(AuthorizeRequest, CancellationToken) Handles the OAuth authorization request. [HttpGet(\"oauth2/authorize\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(301)] [ProducesResponseType(401)] public override Task<ActionResult> HandleAsync(AuthorizeRequest request, CancellationToken cancellationToken = default) Parameters request AuthorizeRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the authorization process."
  },
  "api/Api.Endpoints.OAuth.CreateDeviceCodeEndpoint.html": {
    "href": "api/Api.Endpoints.OAuth.CreateDeviceCodeEndpoint.html",
    "title": "Class CreateDeviceCodeEndpoint | Authentica",
    "keywords": "Class CreateDeviceCodeEndpoint Namespace Api.Endpoints.OAuth Assembly Authentica.Service.Identity.dll Endpoint for generating a device code as part of the Device Authorization Flow. [Route(\"api/v{version:apiVersion}/\")] public sealed class CreateDeviceCodeEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult CreateDeviceCodeEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Remarks This endpoint is called when a user on their mobile device initiates the Device Authorization Flow. It generates a unique code tied to the user's account, which can be used in the authorization process. Constructors CreateDeviceCodeEndpoint(IServiceProvider) Initializes a new instance of the CreateDeviceCodeEndpoint class. public CreateDeviceCodeEndpoint(IServiceProvider services) Parameters services IServiceProvider The IServiceProvider for dependency injection. Methods HandleAsync(CancellationToken) Handles the HTTP GET request to generate a device code. [HttpGet(\"oauth2/device\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken A token to cancel the asynchronous operation. Returns Task<ActionResult> An ActionResult containing the generated device code if successful, or an appropriate error response if the operation fails."
  },
  "api/Api.Endpoints.OAuth.TokenEndpoint.html": {
    "href": "api/Api.Endpoints.OAuth.TokenEndpoint.html",
    "title": "Class TokenEndpoint | Authentica",
    "keywords": "Class TokenEndpoint Namespace Api.Endpoints.OAuth Assembly Authentica.Service.Identity.dll Endpoint for issuing tokens. [Route(\"api/v{version:apiVersion}/\")] public sealed class TokenEndpoint : EndpointBaseAsync.WithRequest<TokenRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<TokenRequest>.WithActionResult TokenEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TokenEndpoint(IServiceProvider) Initializes a new instance of TokenEndpoint public TokenEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(TokenRequest, CancellationToken) Handles token generation for different grant types. [HttpPost(\"oauth2/token\")] [ProducesResponseType(200)] [ProducesResponseType(401)] [ProducesResponseType(500)] public override Task<ActionResult> HandleAsync(TokenRequest request, CancellationToken cancellationToken = default) Parameters request TokenRequest The object which encapsulates the request body. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult>"
  },
  "api/Api.Endpoints.OAuth.html": {
    "href": "api/Api.Endpoints.OAuth.html",
    "title": "Namespace Api.Endpoints.OAuth | Authentica",
    "keywords": "Namespace Api.Endpoints.OAuth Classes AuthorizeEndpoint Endpoint for handling OAuth authorization requests. CreateDeviceCodeEndpoint Endpoint for generating a device code as part of the Device Authorization Flow. TokenEndpoint Endpoint for issuing tokens."
  },
  "api/Api.Endpoints.ReadSessionsEndpoint.html": {
    "href": "api/Api.Endpoints.ReadSessionsEndpoint.html",
    "title": "Class ReadSessionsEndpoint | Authentica",
    "keywords": "Class ReadSessionsEndpoint Namespace Api.Endpoints Assembly Authentica.Service.Identity.dll Endpoint for reading all sessions associated to a user. [Route(\"api/v{version:apiVersion}/\")] public sealed class ReadSessionsEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult ReadSessionsEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReadSessionsEndpoint(IServiceProvider) Initializes a new instance of the ReadSessionsEndpoint class. public ReadSessionsEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods HandleAsync(CancellationToken) Handles reading all sessions associated to a user. [Authorize(AuthenticationSchemes = \"Bearer\")] [HttpGet(\"sessions\")] [ProducesResponseType(200)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the sessions being returned."
  },
  "api/Api.Endpoints.Users.ConfirmEmailEndpoint.html": {
    "href": "api/Api.Endpoints.Users.ConfirmEmailEndpoint.html",
    "title": "Class ConfirmEmailEndpoint | Authentica",
    "keywords": "Class ConfirmEmailEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll An endpoint which allows confirming the users email address. [Route(\"api/v{version:apiVersion}/\")] public sealed class ConfirmEmailEndpoint : EndpointBaseAsync.WithRequest<ConfirmEmailRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<ConfirmEmailRequest>.WithActionResult ConfirmEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ConfirmEmailEndpoint(IServiceProvider) Initializses a new instance of ConfirmEmailEndpoint public ConfirmEmailEndpoint(IServiceProvider services) Parameters services IServiceProvider The IServiceProvider Methods HandleAsync(ConfirmEmailRequest, CancellationToken) Allows a user to confirm their email address. [HttpPost(\"users/confirm-email\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(400)] public override Task<ActionResult> HandleAsync(ConfirmEmailRequest request, CancellationToken cancellationToken = default) Parameters request ConfirmEmailRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/Api.Endpoints.Users.DeleteAccountEndpoint.html": {
    "href": "api/Api.Endpoints.Users.DeleteAccountEndpoint.html",
    "title": "Class DeleteAccountEndpoint | Authentica",
    "keywords": "Class DeleteAccountEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll An endpoint which allows a user to soft delete their account. [Route(\"api/v{version:apiVersion}/\")] public sealed class DeleteAccountEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult DeleteAccountEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteAccountEndpoint(IServiceProvider) Initializes a new instance of DeleteAccountEndpoint public DeleteAccountEndpoint(IServiceProvider services) Parameters services IServiceProvider Methods HandleAsync(CancellationToken) Exposes an endpoint that allows the user to soft delete their account. [HttpDelete(\"users/delete\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(204)] [ProducesResponseType(401)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<ActionResult>"
  },
  "api/Api.Endpoints.Users.LoginEndpoint.html": {
    "href": "api/Api.Endpoints.Users.LoginEndpoint.html",
    "title": "Class LoginEndpoint | Authentica",
    "keywords": "Class LoginEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for user authentication. [Route(\"api/v{version:apiVersion}/\")] public sealed class LoginEndpoint : EndpointBaseAsync.WithRequest<LoginRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<LoginRequest>.WithActionResult LoginEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LoginEndpoint(IServiceProvider) Initializes a new instance of the LoginEndpoint class. public LoginEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used to access application services. Methods HandleAsync(LoginRequest, CancellationToken) Handles the HTTP POST request for user authentication. [HttpPost(\"users/login\")] [ProducesResponseType(200)] [ProducesResponseType(401)] [AllowAnonymous] public override Task<ActionResult> HandleAsync(LoginRequest request, CancellationToken cancellationToken = default) Parameters request LoginRequest The authentication request containing the email and password. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult> ActionResult indicating the result of the authentication attempt. Returns Status200OK if the user is authenticated and does not require mfa. Returns Status401Unauthorized if the authentication fails or requires mfa."
  },
  "api/Api.Endpoints.Users.LogoutEndpoint.html": {
    "href": "api/Api.Endpoints.Users.LogoutEndpoint.html",
    "title": "Class LogoutEndpoint | Authentica",
    "keywords": "Class LogoutEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Exposes an endpoint that allows a user to logout. [Route(\"api/v{version:apiVersion}/\")] public sealed class LogoutEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult LogoutEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LogoutEndpoint(IServiceProvider) Initializes a new instance of LogoutEndpoint. public LogoutEndpoint(IServiceProvider services) Parameters services IServiceProvider The application's service provider. Methods HandleAsync(CancellationToken) Handles the HTTP POST request to logout the user. [ProducesResponseType(204)] [Authorize(AuthenticationSchemes = \"Bearer\")] [HttpPost(\"users/logout\")] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> The result of the logout operation."
  },
  "api/Api.Endpoints.Users.MultiFactorLoginEndpoint.html": {
    "href": "api/Api.Endpoints.Users.MultiFactorLoginEndpoint.html",
    "title": "Class MultiFactorLoginEndpoint | Authentica",
    "keywords": "Class MultiFactorLoginEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for handling mfa login requests. [Route(\"api/v{version:apiVersion}/\")] public sealed class MultiFactorLoginEndpoint : EndpointBaseAsync.WithRequest<MultiFactorLoginRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<MultiFactorLoginRequest>.WithActionResult MultiFactorLoginEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorLoginEndpoint(IServiceProvider) Initializes a new instance of the MultiFactorLoginEndpoint class. public MultiFactorLoginEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider for dependency injection. Exceptions ArgumentNullException Thrown when services is null. Methods HandleAsync(MultiFactorLoginRequest, CancellationToken) Handles the mfa login request. [HttpPost(\"users/mfa/login\")] [AllowAnonymous] public override Task<ActionResult> HandleAsync(MultiFactorLoginRequest request, CancellationToken cancellationToken = default) Parameters request MultiFactorLoginRequest The mfa login request. cancellationToken CancellationToken A cancellation token that can be used to cancel the operation. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Users.MultiFactorManageAuthenticatorEndpoint.html": {
    "href": "api/Api.Endpoints.Users.MultiFactorManageAuthenticatorEndpoint.html",
    "title": "Class MultiFactorManageAuthenticatorEndpoint | Authentica",
    "keywords": "Class MultiFactorManageAuthenticatorEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for managing the authenticator used for mfa. Allows enabling or disabling mfa for a user and generates the necessary authenticator key and QR code URI. [Route(\"api/v{version:apiVersion}/\")] public class MultiFactorManageAuthenticatorEndpoint : EndpointBaseAsync.WithRequest<MultiFactorManageAuthenticatorRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<MultiFactorManageAuthenticatorRequest>.WithActionResult MultiFactorManageAuthenticatorEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorManageAuthenticatorEndpoint(IServiceProvider) Initializes a new instance of the MultiFactorManageAuthenticatorEndpoint class. public MultiFactorManageAuthenticatorEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider. Exceptions ArgumentNullException Thrown when the provided services is null. Methods HandleAsync(MultiFactorManageAuthenticatorRequest, CancellationToken) Handles the request to manage the user's authenticator for mfa authentication. Enables or disables mfa for the user, and if enabled, generates the authenticator key and QR code URI. [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] [HttpPost(\"users/mfa/manage/authenticator\")] public override Task<ActionResult> HandleAsync(MultiFactorManageAuthenticatorRequest request, CancellationToken cancellationToken = default) Parameters request MultiFactorManageAuthenticatorRequest The request containing the information on whether to enable or disable the authenticator. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> An ActionResult containing the formatted authenticator key and QR code URI if 2FA is enabled, or an error message if not."
  },
  "api/Api.Endpoints.Users.MultiFactorManageEndpoint.html": {
    "href": "api/Api.Endpoints.Users.MultiFactorManageEndpoint.html",
    "title": "Class MultiFactorManageEndpoint | Authentica",
    "keywords": "Class MultiFactorManageEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for managing mfa for a user. [Route(\"api/v{version:apiVersion}/\")] public sealed class MultiFactorManageEndpoint : EndpointBaseAsync.WithRequest<MultiFactorManageRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<MultiFactorManageRequest>.WithActionResult MultiFactorManageEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorManageEndpoint(IServiceProvider) Initializes a new instance of the MultiFactorManageEndpoint class. public MultiFactorManageEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider. Methods HandleAsync(MultiFactorManageRequest, CancellationToken) Handles the mfa authentication management request. [Authorize(AuthenticationSchemes = \"Bearer\")] [HttpPost(\"users/mfa/manage\")] [ProducesResponseType(204)] [ProducesResponseType(400)] public override Task<ActionResult> HandleAsync(MultiFactorManageRequest request, CancellationToken cancellationToken = default) Parameters request MultiFactorManageRequest The request containing the mfa authentication settings. cancellationToken CancellationToken The cancellation token. Returns Task<ActionResult> A task representing the asynchronous operation, containing the action result."
  },
  "api/Api.Endpoints.Users.MultiFactorRecoveryCodeRedeemEndpoint.html": {
    "href": "api/Api.Endpoints.Users.MultiFactorRecoveryCodeRedeemEndpoint.html",
    "title": "Class MultiFactorRecoveryCodeRedeemEndpoint | Authentica",
    "keywords": "Class MultiFactorRecoveryCodeRedeemEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Exposes an endpoint which allows a user to redeem mfa recovery codes. [Route(\"api/v{version:apiVersion}/\")] public class MultiFactorRecoveryCodeRedeemEndpoint : EndpointBaseAsync.WithRequest<MultiFactorRecoveryCodeRedeemRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<MultiFactorRecoveryCodeRedeemRequest>.WithActionResult MultiFactorRecoveryCodeRedeemEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorRecoveryCodeRedeemEndpoint(IServiceProvider) Initializes a new instance of the MultiFactorRecoveryCodeRedeemEndpoint class. public MultiFactorRecoveryCodeRedeemEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider. Methods HandleAsync(MultiFactorRecoveryCodeRedeemRequest, CancellationToken) Handles the HTTP POST request to redeem a mfa recovery code. [HttpPost(\"users/mfa/recovery\")] [AllowAnonymous] [ProducesResponseType(200)] [ProducesResponseType(400)] public override Task<ActionResult> HandleAsync(MultiFactorRecoveryCodeRedeemRequest request, CancellationToken cancellationToken = default) Parameters request MultiFactorRecoveryCodeRedeemRequest The request containing the user's email address and the recovery code. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult> ActionResult indicating the result of the recovery code redemption. Returns Status200OK if the recovery code was successfully redeemed. Returns Status400BadRequest if the email is not found or the recovery code redemption fails."
  },
  "api/Api.Endpoints.Users.MultiFactorRecoveryCodesEndpoint.html": {
    "href": "api/Api.Endpoints.Users.MultiFactorRecoveryCodesEndpoint.html",
    "title": "Class MultiFactorRecoveryCodesEndpoint | Authentica",
    "keywords": "Class MultiFactorRecoveryCodesEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Exposes an endpoint which generates mfa recovery codes. [Route(\"api/v{version:apiVersion}/\")] public class MultiFactorRecoveryCodesEndpoint : EndpointBaseAsync.WithoutRequest.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithoutRequest.WithActionResult MultiFactorRecoveryCodesEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorRecoveryCodesEndpoint(IServiceProvider) Initializes a new instance of the MultiFactorRecoveryCodesEndpoint class. public MultiFactorRecoveryCodesEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider. Methods HandleAsync(CancellationToken) Handles the HTTP GET request to generate new mfa recovery codes. [HttpGet(\"users/mfa/recovery/codes\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] public override Task<ActionResult> HandleAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken The cancellation token to observe. Returns Task<ActionResult> An ActionResult containing the newly generated recovery codes or an error status."
  },
  "api/Api.Endpoints.Users.PasswordResetEndpoint.html": {
    "href": "api/Api.Endpoints.Users.PasswordResetEndpoint.html",
    "title": "Class PasswordResetEndpoint | Authentica",
    "keywords": "Class PasswordResetEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Exposes an endpoint to allow a user to reset their password. [Route(\"api/v{version:apiVersion}/\")] public sealed class PasswordResetEndpoint : EndpointBaseAsync.WithRequest<PasswordResetRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<PasswordResetRequest>.WithActionResult PasswordResetEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors PasswordResetEndpoint(IServiceProvider) Initializes a new instance of PasswordResetEndpoint public PasswordResetEndpoint(IServiceProvider services) Parameters services IServiceProvider Methods HandleAsync(PasswordResetRequest, CancellationToken) Allows a user to reset their password. [HttpPost(\"users/reset-password\")] [ProducesResponseType(204)] [ProducesResponseType(500)] [AllowAnonymous] public override Task<ActionResult> HandleAsync(PasswordResetRequest request, CancellationToken cancellationToken = default) Parameters request PasswordResetRequest The object which encapsulates the request. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ActionResult> A new ActionResult"
  },
  "api/Api.Endpoints.Users.RegisterEndpoint.html": {
    "href": "api/Api.Endpoints.Users.RegisterEndpoint.html",
    "title": "Class RegisterEndpoint | Authentica",
    "keywords": "Class RegisterEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Exposes an endpoint that allows a user to register. [Route(\"api/v{version:apiVersion}/\")] public sealed class RegisterEndpoint : EndpointBaseAsync.WithRequest<RegisterRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<RegisterRequest>.WithActionResult RegisterEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterEndpoint(IServiceProvider) Initializes a new instance of RegisterEndpoint public RegisterEndpoint(IServiceProvider services) Parameters services IServiceProvider Methods HandleAsync(RegisterRequest, CancellationToken) Handles the HTTP POST request for creating a new user. [HttpPost(\"users/register\")] [ProducesResponseType(201)] [ProducesResponseType(409)] [AllowAnonymous] public override Task<ActionResult> HandleAsync(RegisterRequest request, CancellationToken cancellationToken = default) Parameters request RegisterRequest The authentication request containing the email and password. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult> ActionResult indicating the result of the authentication attempt. Returns Status201Created if the user is created.. Returns Status409Conflict if the user exists. Returns Status500InternalServerError in case of an internal server error."
  },
  "api/Api.Endpoints.Users.SendTokenEndpoint.html": {
    "href": "api/Api.Endpoints.Users.SendTokenEndpoint.html",
    "title": "Class SendTokenEndpoint | Authentica",
    "keywords": "Class SendTokenEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for sending a token based on the type of request made, such as mfa, email confirmation, password reset, or updating email/phone number. This endpoint handles the request, generates the appropriate token, and publishes it via email if the user exists. [Route(\"api/v{version:apiVersion}/\")] public class SendTokenEndpoint : EndpointBaseAsync.WithRequest<SendTokenRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<SendTokenRequest>.WithActionResult SendTokenEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SendTokenEndpoint(IServiceProvider) Initializes a new instance of the SendTokenEndpoint class. public SendTokenEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider used for dependency injection. Methods HandleAsync(SendTokenRequest, CancellationToken) Handles the HTTP POST request to send a token based on the specified token type. The token type determines whether to generate a mfa code, email confirmation code, password reset token, or a code for updating email or phone number. If the user exists, the token will be sent via email. [HttpPost(\"users/tokens\")] [AllowAnonymous] public override Task<ActionResult> HandleAsync(SendTokenRequest request, CancellationToken cancellationToken = default) Parameters request SendTokenRequest The request containing the email address and token type. cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<ActionResult> An ActionResult indicating the result of the operation. Returns Status200OK with a success message if the email is sent. Returns Status400BadRequest if the user does not exist."
  },
  "api/Api.Endpoints.Users.UpdateAddressEndpoint.html": {
    "href": "api/Api.Endpoints.Users.UpdateAddressEndpoint.html",
    "title": "Class UpdateAddressEndpoint | Authentica",
    "keywords": "Class UpdateAddressEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for updating a user's address. [Route(\"api/v{version:apiVersion}/\")] public sealed class UpdateAddressEndpoint : EndpointBaseAsync.WithRequest<UpdateAddressRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdateAddressRequest>.WithActionResult UpdateAddressEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateAddressEndpoint(IServiceProvider) Initializes a new instance of the UpdateAddressEndpoint class. public UpdateAddressEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider instance. Exceptions ArgumentNullException Thrown when the services parameter is null. Methods HandleAsync(UpdateAddressRequest, CancellationToken) Handles the HTTP PUT request to update a user's address. [HttpPut(\"users/details/address\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] public override Task<ActionResult> HandleAsync(UpdateAddressRequest request, CancellationToken cancellationToken = default) Parameters request UpdateAddressRequest The request containing the new address details. cancellationToken CancellationToken A token to cancel the operation if needed. The default value is None. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Users.UpdateEmailEndpoint.html": {
    "href": "api/Api.Endpoints.Users.UpdateEmailEndpoint.html",
    "title": "Class UpdateEmailEndpoint | Authentica",
    "keywords": "Class UpdateEmailEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for updating a user's email. [Route(\"api/v{version:apiVersion}/\")] public sealed class UpdateEmailEndpoint : EndpointBaseAsync.WithRequest<UpdateEmailRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdateEmailRequest>.WithActionResult UpdateEmailEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateEmailEndpoint(IServiceProvider) Initializes a new instance of the UpdateEmailEndpoint class. public UpdateEmailEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider instance. Exceptions ArgumentNullException Thrown when the services parameter is null. Methods HandleAsync(UpdateEmailRequest, CancellationToken) Handles the HTTP PUT request to update a user's email. [HttpPut(\"users/details/email\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] public override Task<ActionResult> HandleAsync(UpdateEmailRequest request, CancellationToken cancellationToken = default) Parameters request UpdateEmailRequest The request containing the new address details. cancellationToken CancellationToken A token to cancel the operation if needed. The default value is None. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Users.UpdatePhoneNumberEndpoint.html": {
    "href": "api/Api.Endpoints.Users.UpdatePhoneNumberEndpoint.html",
    "title": "Class UpdatePhoneNumberEndpoint | Authentica",
    "keywords": "Class UpdatePhoneNumberEndpoint Namespace Api.Endpoints.Users Assembly Authentica.Service.Identity.dll Endpoint for updating a user's phone number. [Route(\"api/v{version:apiVersion}/\")] public sealed class UpdatePhoneNumberEndpoint : EndpointBaseAsync.WithRequest<UpdatePhoneNumberRequest>.WithActionResult Inheritance object ControllerBase EndpointBase EndpointBaseAsync.WithRequest<UpdatePhoneNumberRequest>.WithActionResult UpdatePhoneNumberEndpoint Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UpdatePhoneNumberEndpoint(IServiceProvider) Initializes a new instance of the UpdateAddressEndpoint class. public UpdatePhoneNumberEndpoint(IServiceProvider services) Parameters services IServiceProvider The service provider instance. Exceptions ArgumentNullException Thrown when the services parameter is null. Methods HandleAsync(UpdatePhoneNumberRequest, CancellationToken) Handles the HTTP PUT request to update a user's phone number. [HttpPut(\"users/details/number\")] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] public override Task<ActionResult> HandleAsync(UpdatePhoneNumberRequest request, CancellationToken cancellationToken = default) Parameters request UpdatePhoneNumberRequest The request containing the new address details. cancellationToken CancellationToken A token to cancel the operation if needed. The default value is None. Returns Task<ActionResult> An ActionResult indicating the result of the operation."
  },
  "api/Api.Endpoints.Users.html": {
    "href": "api/Api.Endpoints.Users.html",
    "title": "Namespace Api.Endpoints.Users | Authentica",
    "keywords": "Namespace Api.Endpoints.Users Classes ConfirmEmailEndpoint An endpoint which allows confirming the users email address. DeleteAccountEndpoint An endpoint which allows a user to soft delete their account. LoginEndpoint Endpoint for user authentication. LogoutEndpoint Exposes an endpoint that allows a user to logout. MultiFactorLoginEndpoint Endpoint for handling mfa login requests. MultiFactorManageAuthenticatorEndpoint Endpoint for managing the authenticator used for mfa. Allows enabling or disabling mfa for a user and generates the necessary authenticator key and QR code URI. MultiFactorManageEndpoint Endpoint for managing mfa for a user. MultiFactorRecoveryCodeRedeemEndpoint Exposes an endpoint which allows a user to redeem mfa recovery codes. MultiFactorRecoveryCodesEndpoint Exposes an endpoint which generates mfa recovery codes. PasswordResetEndpoint Exposes an endpoint to allow a user to reset their password. RegisterEndpoint Exposes an endpoint that allows a user to register. SendTokenEndpoint Endpoint for sending a token based on the type of request made, such as mfa, email confirmation, password reset, or updating email/phone number. This endpoint handles the request, generates the appropriate token, and publishes it via email if the user exists. UpdateAddressEndpoint Endpoint for updating a user's address. UpdateEmailEndpoint Endpoint for updating a user's email. UpdatePhoneNumberEndpoint Endpoint for updating a user's phone number."
  },
  "api/Api.Endpoints.html": {
    "href": "api/Api.Endpoints.html",
    "title": "Namespace Api.Endpoints | Authentica",
    "keywords": "Namespace Api.Endpoints Classes DeleteSessionEndpoint Represents an endpoint for deleting a session. ReadSessionsEndpoint Endpoint for reading all sessions associated to a user."
  },
  "api/Api.Middlware.ErrorHandlingMiddleware.html": {
    "href": "api/Api.Middlware.ErrorHandlingMiddleware.html",
    "title": "Class ErrorHandlingMiddleware | Authentica",
    "keywords": "Class ErrorHandlingMiddleware Namespace Api.Middlware Assembly Authentica.Service.Identity.dll Middleware to intercept 4xx and 5xx response codes and return a CustomProblemDetails. public sealed class ErrorHandlingMiddleware Inheritance object ErrorHandlingMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ErrorHandlingMiddleware(RequestDelegate, ILogger<ErrorHandlingMiddleware>) Initializes a new instance of the ErrorHandlingMiddleware class. public ErrorHandlingMiddleware(RequestDelegate next, ILogger<ErrorHandlingMiddleware> logger) Parameters next RequestDelegate The next middleware in the request pipeline. logger ILogger<ErrorHandlingMiddleware> The logger for logging error details. Methods InvokeAsync(HttpContext) Invokes the middleware to handle errors. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HttpContext for the current request. Returns Task A Task that represents the asynchronous operation."
  },
  "api/Api.Middlware.ExceptionMiddleware.html": {
    "href": "api/Api.Middlware.ExceptionMiddleware.html",
    "title": "Class ExceptionMiddleware | Authentica",
    "keywords": "Class ExceptionMiddleware Namespace Api.Middlware Assembly Authentica.Service.Identity.dll Middleware for handling exceptions globally in the application. public sealed class ExceptionMiddleware Inheritance object ExceptionMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ExceptionMiddleware(RequestDelegate, ILogger<ExceptionMiddleware>) Initializes a new instance of the ExceptionMiddleware class. public ExceptionMiddleware(RequestDelegate next, ILogger<ExceptionMiddleware> logger) Parameters next RequestDelegate The next middleware in the request pipeline. logger ILogger<ExceptionMiddleware> The logger for logging exception details. Exceptions ArgumentNullException Thrown when next or logger is null. Methods InvokeAsync(HttpContext) Invokes the middleware to handle exceptions. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HttpContext for the current request. Returns Task A Task that represents the asynchronous operation."
  },
  "api/Api.Middlware.SessionMiddleware.html": {
    "href": "api/Api.Middlware.SessionMiddleware.html",
    "title": "Class SessionMiddleware | Authentica",
    "keywords": "Class SessionMiddleware Namespace Api.Middlware Assembly Authentica.Service.Identity.dll Middleware to ensure each HTTP session has a unique session ID. public sealed class SessionMiddleware Inheritance object SessionMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SessionMiddleware(RequestDelegate) Initializes a new instance of the SessionMiddleware class. public SessionMiddleware(RequestDelegate next) Parameters next RequestDelegate The next middleware in the request pipeline. Methods InvokeAsync(HttpContext) Processes an HTTP request to ensure it has a unique session ID. public Task InvokeAsync(HttpContext context) Parameters context HttpContext The HTTP context for the current request. Returns Task A task that represents the completion of request processing."
  },
  "api/Api.Middlware.html": {
    "href": "api/Api.Middlware.html",
    "title": "Namespace Api.Middlware | Authentica",
    "keywords": "Namespace Api.Middlware Classes ErrorHandlingMiddleware Middleware to intercept 4xx and 5xx response codes and return a CustomProblemDetails. ExceptionMiddleware Middleware for handling exceptions globally in the application. SessionMiddleware Middleware to ensure each HTTP session has a unique session ID."
  },
  "api/Api.Requests.AddToRoleRequest.html": {
    "href": "api/Api.Requests.AddToRoleRequest.html",
    "title": "Class AddToRoleRequest | Authentica",
    "keywords": "Class AddToRoleRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to add a user to a role. public sealed record AddToRoleRequest : IEquatable<AddToRoleRequest> Inheritance object AddToRoleRequest Implements IEquatable<AddToRoleRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user to be added to the role. public string Email { get; set; } Property Value string Role Gets or sets the name of the role to which the user will be added. public string Role { get; set; } Property Value string"
  },
  "api/Api.Requests.AdminPasswordResetRequest.html": {
    "href": "api/Api.Requests.AdminPasswordResetRequest.html",
    "title": "Class AdminPasswordResetRequest | Authentica",
    "keywords": "Class AdminPasswordResetRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to reset an admin password. public class AdminPasswordResetRequest Inheritance object AdminPasswordResetRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address associated with the admin account. public string Email { get; set; } Property Value string Password Gets or sets the new password. public string Password { get; set; } Property Value string"
  },
  "api/Api.Requests.AuthorizeRequest.html": {
    "href": "api/Api.Requests.AuthorizeRequest.html",
    "title": "Class AuthorizeRequest | Authentica",
    "keywords": "Class AuthorizeRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents an OAuth 2.0 authorization request. public sealed record AuthorizeRequest : IEquatable<AuthorizeRequest> Inheritance object AuthorizeRequest Implements IEquatable<AuthorizeRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CallbackUri Gets or sets the URI to which the response will be sent. This value must match one of the callback URI values registered during client registration. [FromQuery(Name = \"callback_uri\")] public string CallbackUri { get; init; } Property Value string ClientId Gets or sets the client identifier issued to the client during the registration process. [FromQuery(Name = \"client_id\")] [ProtectedPersonalData] public string ClientId { get; init; } Property Value string CodeChallenge Gets or sets the code challenge used in the PKCE (Proof Key for Code Exchange) extension to OAuth 2.0. This is relevant for the authorization code flow. [FromQuery(Name = \"code_challenge\")] public string? CodeChallenge { get; init; } Property Value string CodeChallengeMethod Gets or sets the method used to derive the code challenge, typically \"plain\" or \"S512\". This is relevant for the authorization code flow. [FromQuery(Name = \"code_challenge_method\")] public string? CodeChallengeMethod { get; init; } Property Value string"
  },
  "api/Api.Requests.ConfirmEmailRequest.html": {
    "href": "api/Api.Requests.ConfirmEmailRequest.html",
    "title": "Class ConfirmEmailRequest | Authentica",
    "keywords": "Class ConfirmEmailRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents an email confirmation. public sealed record ConfirmEmailRequest : IEquatable<ConfirmEmailRequest> Inheritance object ConfirmEmailRequest Implements IEquatable<ConfirmEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email The users email address [FromQuery(Name = \"email\")] public required string Email { get; init; } Property Value string Token The code to confirm the email address [FromQuery(Name = \"token\")] public required string Token { get; init; } Property Value string"
  },
  "api/Api.Requests.CreateApplicationRequest.html": {
    "href": "api/Api.Requests.CreateApplicationRequest.html",
    "title": "Class CreateApplicationRequest | Authentica",
    "keywords": "Class CreateApplicationRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to create a new application. public sealed record CreateApplicationRequest : IEquatable<CreateApplicationRequest> Inheritance object CreateApplicationRequest Implements IEquatable<CreateApplicationRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CallbackUri Gets or sets the callback uri for the application. public string CallbackUri { get; init; } Property Value string Name Gets or sets the name of the application. public string Name { get; init; } Property Value string"
  },
  "api/Api.Requests.CreateApplicationSecretRequest.html": {
    "href": "api/Api.Requests.CreateApplicationSecretRequest.html",
    "title": "Class CreateApplicationSecretRequest | Authentica",
    "keywords": "Class CreateApplicationSecretRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to create a secret for a client application. public sealed record CreateApplicationSecretRequest : IEquatable<CreateApplicationSecretRequest> Inheritance object CreateApplicationSecretRequest Implements IEquatable<CreateApplicationSecretRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of the client application for which the secret is to be created. public string Name { get; set; } Property Value string"
  },
  "api/Api.Requests.CreateRoleRequest.html": {
    "href": "api/Api.Requests.CreateRoleRequest.html",
    "title": "Class CreateRoleRequest | Authentica",
    "keywords": "Class CreateRoleRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to create a new group. public sealed record CreateRoleRequest : IEquatable<CreateRoleRequest> Inheritance object CreateRoleRequest Implements IEquatable<CreateRoleRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of the group to be created. public string Name { get; set; } Property Value string"
  },
  "api/Api.Requests.DeleteApplicationByNameRequest.html": {
    "href": "api/Api.Requests.DeleteApplicationByNameRequest.html",
    "title": "Class DeleteApplicationByNameRequest | Authentica",
    "keywords": "Class DeleteApplicationByNameRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to delete an application by its name. public sealed record DeleteApplicationByNameRequest : IEquatable<DeleteApplicationByNameRequest> Inheritance object DeleteApplicationByNameRequest Implements IEquatable<DeleteApplicationByNameRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or initializes the name of the application to be deleted. public string Name { get; init; } Property Value string"
  },
  "api/Api.Requests.DeleteRoleRequest.html": {
    "href": "api/Api.Requests.DeleteRoleRequest.html",
    "title": "Class DeleteRoleRequest | Authentica",
    "keywords": "Class DeleteRoleRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to delete a group. public sealed record DeleteRoleRequest : IEquatable<DeleteRoleRequest> Inheritance object DeleteRoleRequest Implements IEquatable<DeleteRoleRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of the group to be deleted. [FromQuery(Name = \"name\")] public string Name { get; set; } Property Value string"
  },
  "api/Api.Requests.DeleteSessionRequest.html": {
    "href": "api/Api.Requests.DeleteSessionRequest.html",
    "title": "Class DeleteSessionRequest | Authentica",
    "keywords": "Class DeleteSessionRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to delete a session. public sealed record DeleteSessionRequest : IEquatable<DeleteSessionRequest> Inheritance object DeleteSessionRequest Implements IEquatable<DeleteSessionRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties SessionId Gets or sets the unique identifier of the session to be deleted. public string SessionId { get; set; } Property Value string"
  },
  "api/Api.Requests.DisableMultiFactorRequest.html": {
    "href": "api/Api.Requests.DisableMultiFactorRequest.html",
    "title": "Class DisableMultiFactorRequest | Authentica",
    "keywords": "Class DisableMultiFactorRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to disable mfa for a user. public class DisableMultiFactorRequest Inheritance object DisableMultiFactorRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user which mfa will be disabled. public string Email { get; set; } Property Value string"
  },
  "api/Api.Requests.LoginRequest.html": {
    "href": "api/Api.Requests.LoginRequest.html",
    "title": "Class LoginRequest | Authentica",
    "keywords": "Class LoginRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to log in to the application. public sealed record LoginRequest : IEquatable<LoginRequest> Inheritance object LoginRequest Implements IEquatable<LoginRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or initializes the email address of the user. public string Email { get; init; } Property Value string Password Gets or initializes the password of the user. public string Password { get; init; } Property Value string RememberMe Gets or initializes a value indicating whether the user should be remembered on this device. public bool RememberMe { get; init; } Property Value bool"
  },
  "api/Api.Requests.MultiFactorLoginRequest.html": {
    "href": "api/Api.Requests.MultiFactorLoginRequest.html",
    "title": "Class MultiFactorLoginRequest | Authentica",
    "keywords": "Class MultiFactorLoginRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a mfa sign in request. public sealed record MultiFactorLoginRequest : IEquatable<MultiFactorLoginRequest> Inheritance object MultiFactorLoginRequest Implements IEquatable<MultiFactorLoginRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Token The mfa token public string Token { get; init; } Property Value string UseAuthenticator Gets or sets whether the user would like to use an authenticator app. public bool UseAuthenticator { get; init; } Property Value bool"
  },
  "api/Api.Requests.MultiFactorManageAuthenticatorRequest.html": {
    "href": "api/Api.Requests.MultiFactorManageAuthenticatorRequest.html",
    "title": "Class MultiFactorManageAuthenticatorRequest | Authentica",
    "keywords": "Class MultiFactorManageAuthenticatorRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents the request to manage the user's authenticator for mfa. public sealed record MultiFactorManageAuthenticatorRequest : IEquatable<MultiFactorManageAuthenticatorRequest> Inheritance object MultiFactorManageAuthenticatorRequest Implements IEquatable<MultiFactorManageAuthenticatorRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsEnabled Gets or sets a value indicating whether mfa should be enabled or disabled. The value is retrieved from the query string parameter \"is_enabled\". [FromQuery(Name = \"is_enabled\")] public bool IsEnabled { get; init; } Property Value bool"
  },
  "api/Api.Requests.MultiFactorManageRequest.html": {
    "href": "api/Api.Requests.MultiFactorManageRequest.html",
    "title": "Class MultiFactorManageRequest | Authentica",
    "keywords": "Class MultiFactorManageRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represent a users request to enable or disable mfa. public sealed record MultiFactorManageRequest : IEquatable<MultiFactorManageRequest> Inheritance object MultiFactorManageRequest Implements IEquatable<MultiFactorManageRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties IsEnabled Gets or sets the isEnabled flag. [FromQuery(Name = \"is_enabled\")] public bool IsEnabled { get; set; } Property Value bool"
  },
  "api/Api.Requests.MultiFactorRecoveryCodeRedeemRequest.html": {
    "href": "api/Api.Requests.MultiFactorRecoveryCodeRedeemRequest.html",
    "title": "Class MultiFactorRecoveryCodeRedeemRequest | Authentica",
    "keywords": "Class MultiFactorRecoveryCodeRedeemRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a mfa recovery code redeem request. public sealed record MultiFactorRecoveryCodeRedeemRequest : IEquatable<MultiFactorRecoveryCodeRedeemRequest> Inheritance object MultiFactorRecoveryCodeRedeemRequest Implements IEquatable<MultiFactorRecoveryCodeRedeemRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code Gets or sets the recovery code. public required string Code { get; set; } Property Value string Email Gets or sets the user email address which the recovery code is used for. public required string Email { get; set; } Property Value string"
  },
  "api/Api.Requests.PasswordResetRequest.html": {
    "href": "api/Api.Requests.PasswordResetRequest.html",
    "title": "Class PasswordResetRequest | Authentica",
    "keywords": "Class PasswordResetRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to reset a user's password. public sealed record PasswordResetRequest : IEquatable<PasswordResetRequest> Inheritance object PasswordResetRequest Implements IEquatable<PasswordResetRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user requesting the password reset. public string Email { get; init; } Property Value string Password Gets or sets the new password for the user. public required string Password { get; init; } Property Value string Token Gets or sets the reset token provided to the user for password reset verification. public string Token { get; init; } Property Value string"
  },
  "api/Api.Requests.ReadApplicationByNameRequest.html": {
    "href": "api/Api.Requests.ReadApplicationByNameRequest.html",
    "title": "Class ReadApplicationByNameRequest | Authentica",
    "keywords": "Class ReadApplicationByNameRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to create a new application. public sealed record ReadApplicationByNameRequest : IEquatable<ReadApplicationByNameRequest> Inheritance object ReadApplicationByNameRequest Implements IEquatable<ReadApplicationByNameRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Name Gets or sets the name of the application. public string Name { get; init; } Property Value string"
  },
  "api/Api.Requests.RegisterRequest.html": {
    "href": "api/Api.Requests.RegisterRequest.html",
    "title": "Class RegisterRequest | Authentica",
    "keywords": "Class RegisterRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a user registering for the application. public sealed record RegisterRequest : IEquatable<RegisterRequest> Inheritance object RegisterRequest Implements IEquatable<RegisterRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Address The user's address details. [PersonalData] public Address Address { get; set; } Property Value Address Email The user's email address. [PersonalData] public required string Email { get; set; } Property Value string Password The user's password. public required string Password { get; set; } Property Value string PhoneNumber The user's phone number. [PersonalData] public string? PhoneNumber { get; set; } Property Value string"
  },
  "api/Api.Requests.SendTokenRequest.html": {
    "href": "api/Api.Requests.SendTokenRequest.html",
    "title": "Class SendTokenRequest | Authentica",
    "keywords": "Class SendTokenRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a confirmation token request. public sealed record SendTokenRequest : IEquatable<SendTokenRequest> Inheritance object SendTokenRequest Implements IEquatable<SendTokenRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email The user's email address. [FromQuery(Name = \"email_address\")] public string Email { get; set; } Property Value string TokenType The type of token to be generated. Allowed values for this are: EmailTokenConstants [FromQuery(Name = \"token_type\")] public string TokenType { get; set; } Property Value string"
  },
  "api/Api.Requests.TokenRequest.html": {
    "href": "api/Api.Requests.TokenRequest.html",
    "title": "Class TokenRequest | Authentica",
    "keywords": "Class TokenRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents an OAuth 2.0 token request. public sealed record TokenRequest : IEquatable<TokenRequest> Inheritance object TokenRequest Implements IEquatable<TokenRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ClientId Gets or sets the client identifier issued to the client during the registration process. [FromForm(Name = \"client_id\")] public string ClientId { get; init; } Property Value string ClientSecret Gets or sets the client secret issued to the client during the registration process. [FromForm(Name = \"client_secret\")] [ProtectedPersonalData] public string ClientSecret { get; init; } Property Value string Code Gets or sets the authorization code received from the authorization server. [FromForm(Name = \"code\")] public string? Code { get; init; } Property Value string CodeVerifier Gets or sets the code verifier used in the PKCE (Proof Key for Code Exchange) extension to OAuth 2.0. This is relevant for the authorization code flow. [FromForm(Name = \"code_verifier\")] public string? CodeVerifier { get; init; } Property Value string DeviceCode Gets or sets the device code, used in the device code grant type. [FromForm(Name = \"device_code\")] public string? DeviceCode { get; init; } Property Value string GrantType Gets or sets the grant type, which determines the authorization processing flow to be used. Typical values are \"code\", \"client_credentials\", \"refresh_token\", \"device_code\" [FromForm(Name = \"grant_type\")] public string GrantType { get; init; } Property Value string RefreshToken Gets or sets the refresh token, used in the refresh token grant type. [FromForm(Name = \"refresh_token\")] public string? RefreshToken { get; init; } Property Value string Scopes Gets or sets the scope of the access request. This is a space-delimited list of strings. [FromForm(Name = \"scopes\")] public string? Scopes { get; init; } Property Value string State Gets or sets the state parameter to prevent CSRF attacks. [FromForm(Name = \"state\")] public string? State { get; init; } Property Value string"
  },
  "api/Api.Requests.UpdateAddressRequest.html": {
    "href": "api/Api.Requests.UpdateAddressRequest.html",
    "title": "Class UpdateAddressRequest | Authentica",
    "keywords": "Class UpdateAddressRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to update an address. public sealed record UpdateAddressRequest : IEquatable<UpdateAddressRequest> Inheritance object UpdateAddressRequest Implements IEquatable<UpdateAddressRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Address Gets or sets the address to be updated. public Address Address { get; set; } Property Value Address"
  },
  "api/Api.Requests.UpdateApplicationByNameRequest.html": {
    "href": "api/Api.Requests.UpdateApplicationByNameRequest.html",
    "title": "Class UpdateApplicationByNameRequest | Authentica",
    "keywords": "Class UpdateApplicationByNameRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to create a new application. public sealed record UpdateApplicationByNameRequest : IEquatable<UpdateApplicationByNameRequest> Inheritance object UpdateApplicationByNameRequest Implements IEquatable<UpdateApplicationByNameRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CurrentName Gets or sets the current name of the application. public string CurrentName { get; init; } Property Value string NewCallbackUri Gets or sets the new callback uri for the application. public string? NewCallbackUri { get; init; } Property Value string NewName Gets or sets the new name of the application. public string? NewName { get; init; } Property Value string"
  },
  "api/Api.Requests.UpdateEmailRequest.html": {
    "href": "api/Api.Requests.UpdateEmailRequest.html",
    "title": "Class UpdateEmailRequest | Authentica",
    "keywords": "Class UpdateEmailRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to update a email public sealed record UpdateEmailRequest : IEquatable<UpdateEmailRequest> Inheritance object UpdateEmailRequest Implements IEquatable<UpdateEmailRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the user's email. public string Email { get; set; } Property Value string Token Gets or sets the token. public string Token { get; set; } Property Value string"
  },
  "api/Api.Requests.UpdatePhoneNumberRequest.html": {
    "href": "api/Api.Requests.UpdatePhoneNumberRequest.html",
    "title": "Class UpdatePhoneNumberRequest | Authentica",
    "keywords": "Class UpdatePhoneNumberRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to update a phone number. public sealed record UpdatePhoneNumberRequest : IEquatable<UpdatePhoneNumberRequest> Inheritance object UpdatePhoneNumberRequest Implements IEquatable<UpdatePhoneNumberRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties PhoneNumber Gets or sets the new phone number. public string PhoneNumber { get; set; } Property Value string Token Gets or sets the token. public string Token { get; set; } Property Value string"
  },
  "api/Api.Requests.UpdateRoleRequest.html": {
    "href": "api/Api.Requests.UpdateRoleRequest.html",
    "title": "Class UpdateRoleRequest | Authentica",
    "keywords": "Class UpdateRoleRequest Namespace Api.Requests Assembly Authentica.Service.Identity.dll Represents a request to update information about a specific role. public sealed record UpdateRoleRequest : IEquatable<UpdateRoleRequest> Inheritance object UpdateRoleRequest Implements IEquatable<UpdateRoleRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties CurrentName Gets or sets the name of the role to be updated. public string CurrentName { get; set; } Property Value string NewName Gets or sets the new name of the role. public string NewName { get; set; } Property Value string"
  },
  "api/Api.Requests.html": {
    "href": "api/Api.Requests.html",
    "title": "Namespace Api.Requests | Authentica",
    "keywords": "Namespace Api.Requests Classes AddToRoleRequest Represents a request to add a user to a role. AdminPasswordResetRequest Represents a request to reset an admin password. AuthorizeRequest Represents an OAuth 2.0 authorization request. ConfirmEmailRequest Represents an email confirmation. CreateApplicationRequest Represents a request to create a new application. CreateApplicationSecretRequest Represents a request to create a secret for a client application. CreateRoleRequest Represents a request to create a new group. DeleteApplicationByNameRequest Represents a request to delete an application by its name. DeleteRoleRequest Represents a request to delete a group. DeleteSessionRequest Represents a request to delete a session. DisableMultiFactorRequest Represents a request to disable mfa for a user. LoginRequest Represents a request to log in to the application. MultiFactorLoginRequest Represents a mfa sign in request. MultiFactorManageAuthenticatorRequest Represents the request to manage the user's authenticator for mfa. MultiFactorManageRequest Represent a users request to enable or disable mfa. MultiFactorRecoveryCodeRedeemRequest Represents a mfa recovery code redeem request. PasswordResetRequest Represents a request to reset a user's password. ReadApplicationByNameRequest Represents a request to create a new application. RegisterRequest Represents a user registering for the application. SendTokenRequest Represents a confirmation token request. TokenRequest Represents an OAuth 2.0 token request. UpdateAddressRequest Represents a request to update an address. UpdateApplicationByNameRequest Represents a request to create a new application. UpdateEmailRequest Represents a request to update a email UpdatePhoneNumberRequest Represents a request to update a phone number. UpdateRoleRequest Represents a request to update information about a specific role."
  },
  "api/Api.Responses.ActivityResponse.html": {
    "href": "api/Api.Responses.ActivityResponse.html",
    "title": "Class ActivityResponse | Authentica",
    "keywords": "Class ActivityResponse Namespace Api.Responses Assembly Authentica.Service.Identity.dll Represents a response to an event with details about the event. public sealed class ActivityResponse Inheritance object ActivityResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ActivityType Gets or sets the type of the activity. public string ActivityType { get; set; } Property Value string CreatedOn Gets or sets the date and time when the event occurred. public DateTime CreatedOn { get; set; } Property Value DateTime Data Gets or sets the data associated with the event. public string Data { get; set; } Property Value string SequenceId Gets or sets the unique identifier for the event sequence. public string SequenceId { get; set; } Property Value string"
  },
  "api/Api.Responses.GetUserResponse.html": {
    "href": "api/Api.Responses.GetUserResponse.html",
    "title": "Class GetUserResponse | Authentica",
    "keywords": "Class GetUserResponse Namespace Api.Responses Assembly Authentica.Service.Identity.dll Represents the response for retrieving all users. public class GetUserResponse Inheritance object GetUserResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessFailedCount Gets or sets the number of failed access attempts. public int AccessFailedCount { get; set; } Property Value int Address Gets or sets the address of the user. public Address Address { get; set; } Property Value Address CreatedBy Gets or sets the identifier of the user who created this user. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the date and time when the user was created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Gets or sets the identifier of the user who deleted this user. public string DeletedBy { get; set; } Property Value string DeletedOnUtc Gets or sets the date and time when the user was deleted. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? Email Gets or sets the email address. public string Email { get; set; } Property Value string EmailConfirmed Gets or sets a value indicating whether the email address is confirmed. public bool EmailConfirmed { get; set; } Property Value bool Id Gets or sets the user identifier. public string Id { get; set; } Property Value string IsDeleted Gets or sets a value indicating whether the user is deleted. public bool IsDeleted { get; set; } Property Value bool LastLoginDateTime Gets or sets the date and time of the last login. public DateTime? LastLoginDateTime { get; set; } Property Value DateTime? LastLoginIPAddress Gets or sets the last login IP address. public string LastLoginIPAddress { get; set; } Property Value string LockoutEnabled Gets or sets a value indicating whether lockout is enabled. public bool LockoutEnabled { get; set; } Property Value bool LockoutEnd Gets or sets the date and time when the lockout ends. public DateTimeOffset? LockoutEnd { get; set; } Property Value DateTimeOffset? ModifiedBy Gets or sets the identifier of the user who last modified this user. public string ModifiedBy { get; set; } Property Value string ModifiedOnUtc Gets or sets the date and time when the user was last modified. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime? PhoneNumber Gets or sets the phone number. public string PhoneNumber { get; set; } Property Value string PhoneNumberConfirmed Gets or sets a value indicating whether the phone number is confirmed. public bool PhoneNumberConfirmed { get; set; } Property Value bool TwoFactorEnabled Gets or sets a value indicating whether mfa authentication is enabled. public bool TwoFactorEnabled { get; set; } Property Value bool UserName Gets or sets the user name. public string UserName { get; set; } Property Value string"
  },
  "api/Api.Responses.MultiFactorManageAuthenticatorResponse.html": {
    "href": "api/Api.Responses.MultiFactorManageAuthenticatorResponse.html",
    "title": "Class MultiFactorManageAuthenticatorResponse | Authentica",
    "keywords": "Class MultiFactorManageAuthenticatorResponse Namespace Api.Responses Assembly Authentica.Service.Identity.dll Represents the response returned after managing the user's authenticator for mfa. Contains the authenticator key and the QR code URI if mfa is enabled. public sealed record MultiFactorManageAuthenticatorResponse : IEquatable<MultiFactorManageAuthenticatorResponse> Inheritance object MultiFactorManageAuthenticatorResponse Implements IEquatable<MultiFactorManageAuthenticatorResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties AuthenticatorKey Gets or sets the formatted authenticator key. This key is used to set up the authenticator app for the user. public string? AuthenticatorKey { get; set; } Property Value string QrCodeUri Gets or sets the QR code URI. This URI can be used to generate a QR code that the user can scan with their authenticator app. public string? QrCodeUri { get; set; } Property Value string"
  },
  "api/Api.Responses.ReadApplicationResponse.html": {
    "href": "api/Api.Responses.ReadApplicationResponse.html",
    "title": "Class ReadApplicationResponse | Authentica",
    "keywords": "Class ReadApplicationResponse Namespace Api.Responses Assembly Authentica.Service.Identity.dll Represents the response for getting an application. public class ReadApplicationResponse Inheritance object ReadApplicationResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CallbackUri Gets or sets the callback URI. public string CallbackUri { get; set; } Property Value string ClientId Gets or sets the client ID. public string ClientId { get; set; } Property Value string CreatedBy Gets or sets the identifier of the user who created this client application. public string CreatedBy { get; set; } Property Value string CreatedOnUtc Gets or sets the date and time in UTC when the client application was created. public DateTime CreatedOnUtc { get; set; } Property Value DateTime DeletedBy Gets or sets the identifier of the user who deleted this client application. public string? DeletedBy { get; set; } Property Value string DeletedOnUtc Gets or sets the date and time in UTC when the client application was deleted. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Gets or sets a value indicating whether the client application is deleted. public bool IsDeleted { get; set; } Property Value bool ModifiedBy Gets or sets the identifier of the user who last modified this client application. public string? ModifiedBy { get; set; } Property Value string ModifiedOnUtc Gets or sets the date and time in UTC when the client application was last modified. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime? Name Gets or sets the name of the client application. public string Name { get; set; } Property Value string"
  },
  "api/Api.Responses.TokenResponse.html": {
    "href": "api/Api.Responses.TokenResponse.html",
    "title": "Class TokenResponse | Authentica",
    "keywords": "Class TokenResponse Namespace Api.Responses Assembly Authentica.Service.Identity.dll Represents the response when a user is authorized. public sealed class TokenResponse Inheritance object TokenResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken Gets or sets the access token. public string AccessToken { get; set; } Property Value string Expires Gets or sets the expiration of the token. public string Expires { get; set; } Property Value string RefreshToken Gets or sets the refresh token. public string RefreshToken { get; set; } Property Value string TokenType Gets or sets the token type. public string TokenType { get; set; } Property Value string"
  },
  "api/Api.Responses.html": {
    "href": "api/Api.Responses.html",
    "title": "Namespace Api.Responses | Authentica",
    "keywords": "Namespace Api.Responses Classes ActivityResponse Represents a response to an event with details about the event. GetUserResponse Represents the response for retrieving all users. MultiFactorManageAuthenticatorResponse Represents the response returned after managing the user's authenticator for mfa. Contains the authenticator key and the QR code URI if mfa is enabled. ReadApplicationResponse Represents the response for getting an application. TokenResponse Represents the response when a user is authorized."
  },
  "api/Application.Activities.ActivityBase-1.html": {
    "href": "api/Application.Activities.ActivityBase-1.html",
    "title": "Class ActivityBase<T> | Authentica",
    "keywords": "Class ActivityBase<T> Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents a base class for activities, where T is a request or response object. public abstract class ActivityBase<T> where T : notnull Type Parameters T The type of the request/response object. Inheritance object ActivityBase<T> Derived AddToRoleActivity AuthorizeActivity ConfirmEmailActivity CreateDeviceCodeActivity CreateRoleActivity CreatedApplicationActivity CreatedApplicationSecretActivity DeleteApplicationActivity DeleteRoleActivity DisableMultiFactorActivity LoginActivity MultiFactorLoginActivity MultiFactorManageActivity MultiFactorRecoveryCodesRedeemActivity PasswordResetActivity ReadAllApplicationsActivity ReadApplicationsActivity RegisterActivity RegisterAdminActivity ResetPasswordAdminActivity SendTokenActivity UpdateAddressActivity UpdateApplicationByNameActivity UpdateEmailActivity UpdatePhoneNumberActivity UpdateRoleActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the request associated with the activity. public virtual T Payload { get; set; } Property Value T"
  },
  "api/Application.Activities.ActivityBase-2.html": {
    "href": "api/Application.Activities.ActivityBase-2.html",
    "title": "Class ActivityBase<TRequest, TResponse> | Authentica",
    "keywords": "Class ActivityBase<TRequest, TResponse> Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents a base class for activities with a request of type TRequest and a response of type TResponse. public abstract class ActivityBase<TRequest, TResponse> where TRequest : notnull where TResponse : notnull Type Parameters TRequest The type of the request object. TResponse The type of the response object. Inheritance object ActivityBase<TRequest, TResponse> Derived ReadApplicationByNameActivity TokenActivity MultiFactorManageAuthenticatorActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Request Gets or sets the request associated with the activity. public virtual TRequest Request { get; set; } Property Value TRequest Response Gets or sets the response associated with the activity. public virtual TResponse Response { get; set; } Property Value TResponse"
  },
  "api/Application.Activities.AddToRoleActivity.html": {
    "href": "api/Application.Activities.AddToRoleActivity.html",
    "title": "Class AddToRoleActivity | Authentica",
    "keywords": "Class AddToRoleActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a role is added to a user. public sealed class AddToRoleActivity : ActivityBase<AddToRoleRequest> Inheritance object ActivityBase<AddToRoleRequest> AddToRoleActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for adding a role to a user. public override AddToRoleRequest Payload { get; set; } Property Value AddToRoleRequest"
  },
  "api/Application.Activities.AuthorizeActivity.html": {
    "href": "api/Application.Activities.AuthorizeActivity.html",
    "title": "Class AuthorizeActivity | Authentica",
    "keywords": "Class AuthorizeActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when an authorization request is made. public sealed class AuthorizeActivity : ActivityBase<AuthorizeRequest> Inheritance object ActivityBase<AuthorizeRequest> AuthorizeActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for authorization. public override AuthorizeRequest Payload { get; set; } Property Value AuthorizeRequest"
  },
  "api/Application.Activities.ConfirmEmailActivity.html": {
    "href": "api/Application.Activities.ConfirmEmailActivity.html",
    "title": "Class ConfirmEmailActivity | Authentica",
    "keywords": "Class ConfirmEmailActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when an email confirmation request is made. public sealed class ConfirmEmailActivity : ActivityBase<ConfirmEmailRequest> Inheritance object ActivityBase<ConfirmEmailRequest> ConfirmEmailActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for confirming an email. public override ConfirmEmailRequest Payload { get; set; } Property Value ConfirmEmailRequest"
  },
  "api/Application.Activities.CreateDeviceCodeActivity.html": {
    "href": "api/Application.Activities.CreateDeviceCodeActivity.html",
    "title": "Class CreateDeviceCodeActivity | Authentica",
    "keywords": "Class CreateDeviceCodeActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity for creating a device code. public sealed class CreateDeviceCodeActivity : ActivityBase<string> Inheritance object ActivityBase<string> CreateDeviceCodeActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload for the create device code activity. public override string Payload { get; set; } Property Value string"
  },
  "api/Application.Activities.CreateRoleActivity.html": {
    "href": "api/Application.Activities.CreateRoleActivity.html",
    "title": "Class CreateRoleActivity | Authentica",
    "keywords": "Class CreateRoleActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a new role is created. public sealed class CreateRoleActivity : ActivityBase<CreateRoleRequest> Inheritance object ActivityBase<CreateRoleRequest> CreateRoleActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for creating a role. public override CreateRoleRequest Payload { get; set; } Property Value CreateRoleRequest"
  },
  "api/Application.Activities.CreatedApplicationActivity.html": {
    "href": "api/Application.Activities.CreatedApplicationActivity.html",
    "title": "Class CreatedApplicationActivity | Authentica",
    "keywords": "Class CreatedApplicationActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a new application is created. public sealed class CreatedApplicationActivity : ActivityBase<CreateApplicationRequest> Inheritance object ActivityBase<CreateApplicationRequest> CreatedApplicationActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for creating an application. public override CreateApplicationRequest Payload { get; set; } Property Value CreateApplicationRequest"
  },
  "api/Application.Activities.CreatedApplicationSecretActivity.html": {
    "href": "api/Application.Activities.CreatedApplicationSecretActivity.html",
    "title": "Class CreatedApplicationSecretActivity | Authentica",
    "keywords": "Class CreatedApplicationSecretActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event that occurs when a new application secret is created. public sealed class CreatedApplicationSecretActivity : ActivityBase<CreateApplicationSecretRequest> Inheritance object ActivityBase<CreateApplicationSecretRequest> CreatedApplicationSecretActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for creating an application secret. public override CreateApplicationSecretRequest Payload { get; set; } Property Value CreateApplicationSecretRequest"
  },
  "api/Application.Activities.DeleteAccountActivity.html": {
    "href": "api/Application.Activities.DeleteAccountActivity.html",
    "title": "Class DeleteAccountActivity | Authentica",
    "keywords": "Class DeleteAccountActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user account is deleted. public sealed class DeleteAccountActivity Inheritance object DeleteAccountActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address associated with the account that is being deleted. public string Email { get; set; } Property Value string"
  },
  "api/Application.Activities.DeleteApplicationActivity.html": {
    "href": "api/Application.Activities.DeleteApplicationActivity.html",
    "title": "Class DeleteApplicationActivity | Authentica",
    "keywords": "Class DeleteApplicationActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when an application is deleted. public sealed class DeleteApplicationActivity : ActivityBase<DeleteApplicationByNameRequest> Inheritance object ActivityBase<DeleteApplicationByNameRequest> DeleteApplicationActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for deleting an application by name. public override DeleteApplicationByNameRequest Payload { get; set; } Property Value DeleteApplicationByNameRequest"
  },
  "api/Application.Activities.DeleteRoleActivity.html": {
    "href": "api/Application.Activities.DeleteRoleActivity.html",
    "title": "Class DeleteRoleActivity | Authentica",
    "keywords": "Class DeleteRoleActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a group is deleted. public sealed class DeleteRoleActivity : ActivityBase<DeleteRoleRequest> Inheritance object ActivityBase<DeleteRoleRequest> DeleteRoleActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for deleting a group. public override DeleteRoleRequest Payload { get; set; } Property Value DeleteRoleRequest"
  },
  "api/Application.Activities.DisableMultiFactorActivity.html": {
    "href": "api/Application.Activities.DisableMultiFactorActivity.html",
    "title": "Class DisableMultiFactorActivity | Authentica",
    "keywords": "Class DisableMultiFactorActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when mfa is disabled. public sealed class DisableMultiFactorActivity : ActivityBase<DisableMultiFactorRequest> Inheritance object ActivityBase<DisableMultiFactorRequest> DisableMultiFactorActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request. public override DisableMultiFactorRequest Payload { get; set; } Property Value DisableMultiFactorRequest"
  },
  "api/Application.Activities.LoginActivity.html": {
    "href": "api/Application.Activities.LoginActivity.html",
    "title": "Class LoginActivity | Authentica",
    "keywords": "Class LoginActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a login request is made. public class LoginActivity : ActivityBase<LoginRequest> Inheritance object ActivityBase<LoginRequest> LoginActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for the login activity. public override LoginRequest Payload { get; set; } Property Value LoginRequest"
  },
  "api/Application.Activities.LogoutActivity.html": {
    "href": "api/Application.Activities.LogoutActivity.html",
    "title": "Class LogoutActivity | Authentica",
    "keywords": "Class LogoutActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user logs out. public class LogoutActivity Inheritance object LogoutActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user who is logging out. public string Email { get; set; } Property Value string"
  },
  "api/Application.Activities.MultiFactorLoginActivity.html": {
    "href": "api/Application.Activities.MultiFactorLoginActivity.html",
    "title": "Class MultiFactorLoginActivity | Authentica",
    "keywords": "Class MultiFactorLoginActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a mfa login request is made. public sealed class MultiFactorLoginActivity : ActivityBase<MultiFactorLoginRequest> Inheritance object ActivityBase<MultiFactorLoginRequest> MultiFactorLoginActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for the mfa login activity. public override MultiFactorLoginRequest Payload { get; set; } Property Value MultiFactorLoginRequest"
  },
  "api/Application.Activities.MultiFactorManageActivity.html": {
    "href": "api/Application.Activities.MultiFactorManageActivity.html",
    "title": "Class MultiFactorManageActivity | Authentica",
    "keywords": "Class MultiFactorManageActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when the mfa authentication settings are managed. public class MultiFactorManageActivity : ActivityBase<MultiFactorManageRequest> Inheritance object ActivityBase<MultiFactorManageRequest> MultiFactorManageActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user whose mfa authentication settings are being managed. public string Email { get; set; } Property Value string Payload Gets or sets the payload containing the request data for managing mfa settings. public override MultiFactorManageRequest Payload { get; set; } Property Value MultiFactorManageRequest"
  },
  "api/Application.Activities.MultiFactorRecoveryCodesActivity.html": {
    "href": "api/Application.Activities.MultiFactorRecoveryCodesActivity.html",
    "title": "Class MultiFactorRecoveryCodesActivity | Authentica",
    "keywords": "Class MultiFactorRecoveryCodesActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when mfa recovery codes are requested. public class MultiFactorRecoveryCodesActivity Inheritance object MultiFactorRecoveryCodesActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address of the user requesting the mfa recovery codes. public string Email { get; set; } Property Value string"
  },
  "api/Application.Activities.MultiFactorRecoveryCodesRedeemActivity.html": {
    "href": "api/Application.Activities.MultiFactorRecoveryCodesRedeemActivity.html",
    "title": "Class MultiFactorRecoveryCodesRedeemActivity | Authentica",
    "keywords": "Class MultiFactorRecoveryCodesRedeemActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a mfa authentication recovery code is redeemed. public class MultiFactorRecoveryCodesRedeemActivity : ActivityBase<MultiFactorRecoveryCodeRedeemRequest> Inheritance object ActivityBase<MultiFactorRecoveryCodeRedeemRequest> MultiFactorRecoveryCodesRedeemActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for redeeming a mfa recovery code. public override MultiFactorRecoveryCodeRedeemRequest Payload { get; set; } Property Value MultiFactorRecoveryCodeRedeemRequest"
  },
  "api/Application.Activities.PasswordResetActivity.html": {
    "href": "api/Application.Activities.PasswordResetActivity.html",
    "title": "Class PasswordResetActivity | Authentica",
    "keywords": "Class PasswordResetActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a password reset request is made. public sealed class PasswordResetActivity : ActivityBase<PasswordResetRequest> Inheritance object ActivityBase<PasswordResetRequest> PasswordResetActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for the password reset activity. public override PasswordResetRequest Payload { get; set; } Property Value PasswordResetRequest"
  },
  "api/Application.Activities.ReadAllActivitiesActivity.html": {
    "href": "api/Application.Activities.ReadAllActivitiesActivity.html",
    "title": "Class ReadAllActivitiesActivity | Authentica",
    "keywords": "Class ReadAllActivitiesActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event to read all events associated with a specific email. public class ReadAllActivitiesActivity Inheritance object ReadAllActivitiesActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address associated with the events to be read. public string Email { get; set; } Property Value string"
  },
  "api/Application.Activities.ReadAllApplicationsActivity.html": {
    "href": "api/Application.Activities.ReadAllApplicationsActivity.html",
    "title": "Class ReadAllApplicationsActivity | Authentica",
    "keywords": "Class ReadAllApplicationsActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event that is triggered to read all applications. public class ReadAllApplicationsActivity : ActivityBase<IList<ReadApplicationResponse>> Inheritance object ActivityBase<IList<ReadApplicationResponse>> ReadAllApplicationsActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the list of read application responses. public override IList<ReadApplicationResponse> Payload { get; set; } Property Value IList<ReadApplicationResponse> A list of ReadApplicationResponse objects representing the applications read."
  },
  "api/Application.Activities.ReadAllUsersActivity.html": {
    "href": "api/Application.Activities.ReadAllUsersActivity.html",
    "title": "Class ReadAllUsersActivity | Authentica",
    "keywords": "Class ReadAllUsersActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event for reading all users with specific details. public class ReadAllUsersActivity Inheritance object ReadAllUsersActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email address associated with the user. public string Email { get; set; } Property Value string Remarks This property holds the email address of the user which is used to filter or identify users in the event."
  },
  "api/Application.Activities.ReadApplicationByNameActivity.html": {
    "href": "api/Application.Activities.ReadApplicationByNameActivity.html",
    "title": "Class ReadApplicationByNameActivity | Authentica",
    "keywords": "Class ReadApplicationByNameActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when applications are read. public sealed class ReadApplicationByNameActivity : ActivityBase<ReadApplicationByNameRequest, ReadApplicationResponse> Inheritance object ActivityBase<ReadApplicationByNameRequest, ReadApplicationResponse> ReadApplicationByNameActivity Inherited Members ActivityBase<ReadApplicationByNameRequest, ReadApplicationResponse>.Request ActivityBase<ReadApplicationByNameRequest, ReadApplicationResponse>.Response object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Request Gets or sets the payload containing the request data for reading applications. public override ReadApplicationByNameRequest Request { get; set; } Property Value ReadApplicationByNameRequest Response Gets or sets the payload containing the response data for reading applications. public override ReadApplicationResponse Response { get; set; } Property Value ReadApplicationResponse"
  },
  "api/Application.Activities.ReadApplicationsActivity.html": {
    "href": "api/Application.Activities.ReadApplicationsActivity.html",
    "title": "Class ReadApplicationsActivity | Authentica",
    "keywords": "Class ReadApplicationsActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when applications are read. public sealed class ReadApplicationsActivity : ActivityBase<List<ReadApplicationResponse>> Inheritance object ActivityBase<List<ReadApplicationResponse>> ReadApplicationsActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the response data for reading applications. public override List<ReadApplicationResponse> Payload { get; set; } Property Value List<ReadApplicationResponse>"
  },
  "api/Application.Activities.ReadRolesActivity.html": {
    "href": "api/Application.Activities.ReadRolesActivity.html",
    "title": "Class ReadRolesActivity | Authentica",
    "keywords": "Class ReadRolesActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a group is read or retrieved. public sealed class ReadRolesActivity Inheritance object ReadRolesActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Email Gets or sets the email associated with the group read activity. public string Email { get; set; } Property Value string"
  },
  "api/Application.Activities.RegisterActivity.html": {
    "href": "api/Application.Activities.RegisterActivity.html",
    "title": "Class RegisterActivity | Authentica",
    "keywords": "Class RegisterActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user registration request is made. public sealed class RegisterActivity : ActivityBase<RegisterRequest> Inheritance object ActivityBase<RegisterRequest> RegisterActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for the user registration activity. public override RegisterRequest Payload { get; set; } Property Value RegisterRequest"
  },
  "api/Application.Activities.RegisterAdminActivity.html": {
    "href": "api/Application.Activities.RegisterAdminActivity.html",
    "title": "Class RegisterAdminActivity | Authentica",
    "keywords": "Class RegisterAdminActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event that occurs during the registration of an admin. public class RegisterAdminActivity : ActivityBase<RegisterRequest> Inheritance object ActivityBase<RegisterRequest> RegisterAdminActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload for the register admin event. The payload contains the registration request details. public override RegisterRequest Payload { get; set; } Property Value RegisterRequest"
  },
  "api/Application.Activities.ResetPasswordAdminActivity.html": {
    "href": "api/Application.Activities.ResetPasswordAdminActivity.html",
    "title": "Class ResetPasswordAdminActivity | Authentica",
    "keywords": "Class ResetPasswordAdminActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event for resetting a user's password on behalf on them. public sealed class ResetPasswordAdminActivity : ActivityBase<AdminPasswordResetRequest> Inheritance object ActivityBase<AdminPasswordResetRequest> ResetPasswordAdminActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the admin password reset request details. public override AdminPasswordResetRequest Payload { get; set; } Property Value AdminPasswordResetRequest"
  },
  "api/Application.Activities.SendTokenActivity.html": {
    "href": "api/Application.Activities.SendTokenActivity.html",
    "title": "Class SendTokenActivity | Authentica",
    "keywords": "Class SendTokenActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user requests a token. public sealed class SendTokenActivity : ActivityBase<SendTokenRequest> Inheritance object ActivityBase<SendTokenRequest> SendTokenActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload of the activity, which contains the details of the token request. public override SendTokenRequest Payload { get; set; } Property Value SendTokenRequest"
  },
  "api/Application.Activities.TokenActivity.html": {
    "href": "api/Application.Activities.TokenActivity.html",
    "title": "Class TokenActivity | Authentica",
    "keywords": "Class TokenActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an event that occurs when a token request is made. public sealed class TokenActivity : ActivityBase<TokenRequest, TokenResponse> Inheritance object ActivityBase<TokenRequest, TokenResponse> TokenActivity Inherited Members ActivityBase<TokenRequest, TokenResponse>.Request ActivityBase<TokenRequest, TokenResponse>.Response object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Request Gets or sets the request data for the token event. public override TokenRequest Request { get; set; } Property Value TokenRequest Response Gets or sets the response data for the token event. public override TokenResponse Response { get; set; } Property Value TokenResponse"
  },
  "api/Application.Activities.UpdateAddressActivity.html": {
    "href": "api/Application.Activities.UpdateAddressActivity.html",
    "title": "Class UpdateAddressActivity | Authentica",
    "keywords": "Class UpdateAddressActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user's address is updated. public class UpdateAddressActivity : ActivityBase<UpdateAddressRequest> Inheritance object ActivityBase<UpdateAddressRequest> UpdateAddressActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for updating a user's address. public override UpdateAddressRequest Payload { get; set; } Property Value UpdateAddressRequest"
  },
  "api/Application.Activities.UpdateApplicationByNameActivity.html": {
    "href": "api/Application.Activities.UpdateApplicationByNameActivity.html",
    "title": "Class UpdateApplicationByNameActivity | Authentica",
    "keywords": "Class UpdateApplicationByNameActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when an application is updated by name. public sealed class UpdateApplicationByNameActivity : ActivityBase<UpdateApplicationByNameRequest> Inheritance object ActivityBase<UpdateApplicationByNameRequest> UpdateApplicationByNameActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for updating an application by name. public override UpdateApplicationByNameRequest Payload { get; set; } Property Value UpdateApplicationByNameRequest"
  },
  "api/Application.Activities.UpdateEmailActivity.html": {
    "href": "api/Application.Activities.UpdateEmailActivity.html",
    "title": "Class UpdateEmailActivity | Authentica",
    "keywords": "Class UpdateEmailActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user's email address is updated. public class UpdateEmailActivity : ActivityBase<UpdateEmailRequest> Inheritance object ActivityBase<UpdateEmailRequest> UpdateEmailActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for updating the user's email address. public override UpdateEmailRequest Payload { get; set; } Property Value UpdateEmailRequest"
  },
  "api/Application.Activities.UpdatePhoneNumberActivity.html": {
    "href": "api/Application.Activities.UpdatePhoneNumberActivity.html",
    "title": "Class UpdatePhoneNumberActivity | Authentica",
    "keywords": "Class UpdatePhoneNumberActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity that occurs when a user's phone number is updated. public class UpdatePhoneNumberActivity : ActivityBase<UpdatePhoneNumberRequest> Inheritance object ActivityBase<UpdatePhoneNumberRequest> UpdatePhoneNumberActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload containing the request data for updating the user's phone number. public override UpdatePhoneNumberRequest Payload { get; set; } Property Value UpdatePhoneNumberRequest"
  },
  "api/Application.Activities.UpdateRoleActivity.html": {
    "href": "api/Application.Activities.UpdateRoleActivity.html",
    "title": "Class UpdateRoleActivity | Authentica",
    "keywords": "Class UpdateRoleActivity Namespace Application.Activities Assembly Authentica.Service.Identity.dll Represents an activity for updating a group. public class UpdateRoleActivity : ActivityBase<UpdateRoleRequest> Inheritance object ActivityBase<UpdateRoleRequest> UpdateRoleActivity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Payload Gets or sets the payload for the update group request. public override UpdateRoleRequest Payload { get; set; } Property Value UpdateRoleRequest"
  },
  "api/Application.Activities.Users.MultiFactorManageAuthenticatorActivity.html": {
    "href": "api/Application.Activities.Users.MultiFactorManageAuthenticatorActivity.html",
    "title": "Class MultiFactorManageAuthenticatorActivity | Authentica",
    "keywords": "Class MultiFactorManageAuthenticatorActivity Namespace Application.Activities.Users Assembly Authentica.Service.Identity.dll Represents an activity for managing mfa authenticator settings. public class MultiFactorManageAuthenticatorActivity : ActivityBase<MultiFactorManageAuthenticatorRequest, MultiFactorManageAuthenticatorResponse> Inheritance object ActivityBase<MultiFactorManageAuthenticatorRequest, MultiFactorManageAuthenticatorResponse> MultiFactorManageAuthenticatorActivity Inherited Members ActivityBase<MultiFactorManageAuthenticatorRequest, MultiFactorManageAuthenticatorResponse>.Request ActivityBase<MultiFactorManageAuthenticatorRequest, MultiFactorManageAuthenticatorResponse>.Response object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Request Gets or sets the request containing information for managing the authenticator. public override MultiFactorManageAuthenticatorRequest Request { get; set; } Property Value MultiFactorManageAuthenticatorRequest Response Gets or sets the response containing the result of the authenticator management operation. public override MultiFactorManageAuthenticatorResponse Response { get; set; } Property Value MultiFactorManageAuthenticatorResponse"
  },
  "api/Application.Activities.Users.html": {
    "href": "api/Application.Activities.Users.html",
    "title": "Namespace Application.Activities.Users | Authentica",
    "keywords": "Namespace Application.Activities.Users Classes MultiFactorManageAuthenticatorActivity Represents an activity for managing mfa authenticator settings."
  },
  "api/Application.Activities.html": {
    "href": "api/Application.Activities.html",
    "title": "Namespace Application.Activities | Authentica",
    "keywords": "Namespace Application.Activities Classes ActivityBase<T> Represents a base class for activities, where T is a request or response object. ActivityBase<TRequest, TResponse> Represents a base class for activities with a request of type TRequest and a response of type TResponse. AddToRoleActivity Represents an activity that occurs when a role is added to a user. AuthorizeActivity Represents an activity that occurs when an authorization request is made. ConfirmEmailActivity Represents an activity that occurs when an email confirmation request is made. CreateDeviceCodeActivity Represents an activity for creating a device code. CreateRoleActivity Represents an activity that occurs when a new role is created. CreatedApplicationActivity Represents an activity that occurs when a new application is created. CreatedApplicationSecretActivity Represents an event that occurs when a new application secret is created. DeleteAccountActivity Represents an activity that occurs when a user account is deleted. DeleteApplicationActivity Represents an activity that occurs when an application is deleted. DeleteRoleActivity Represents an activity that occurs when a group is deleted. DisableMultiFactorActivity Represents an activity that occurs when mfa is disabled. LoginActivity Represents an activity that occurs when a login request is made. LogoutActivity Represents an activity that occurs when a user logs out. MultiFactorLoginActivity Represents an activity that occurs when a mfa login request is made. MultiFactorManageActivity Represents an activity that occurs when the mfa authentication settings are managed. MultiFactorRecoveryCodesActivity Represents an activity that occurs when mfa recovery codes are requested. MultiFactorRecoveryCodesRedeemActivity Represents an activity that occurs when a mfa authentication recovery code is redeemed. PasswordResetActivity Represents an activity that occurs when a password reset request is made. ReadAllActivitiesActivity Represents an event to read all events associated with a specific email. ReadAllApplicationsActivity Represents an event that is triggered to read all applications. ReadAllUsersActivity Represents an event for reading all users with specific details. ReadApplicationByNameActivity Represents an activity that occurs when applications are read. ReadApplicationsActivity Represents an activity that occurs when applications are read. ReadRolesActivity Represents an activity that occurs when a group is read or retrieved. RegisterActivity Represents an activity that occurs when a user registration request is made. RegisterAdminActivity Represents an event that occurs during the registration of an admin. ResetPasswordAdminActivity Represents an event for resetting a user's password on behalf on them. SendTokenActivity Represents an activity that occurs when a user requests a token. TokenActivity Represents an event that occurs when a token request is made. UpdateAddressActivity Represents an activity that occurs when a user's address is updated. UpdateApplicationByNameActivity Represents an activity that occurs when an application is updated by name. UpdateEmailActivity Represents an activity that occurs when a user's email address is updated. UpdatePhoneNumberActivity Represents an activity that occurs when a user's phone number is updated. UpdateRoleActivity Represents an activity for updating a group."
  },
  "api/Application.Attributes.SensitiveDataAttribute.html": {
    "href": "api/Application.Attributes.SensitiveDataAttribute.html",
    "title": "Class SensitiveDataAttribute | Authentica",
    "keywords": "Class SensitiveDataAttribute Namespace Application.Attributes Assembly Authentica.Service.Identity.dll Marks a property as sensitive data. [AttributeUsage(AttributeTargets.Property)] public class SensitiveDataAttribute : Attribute Inheritance object Attribute SensitiveDataAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Application.Attributes.html": {
    "href": "api/Application.Attributes.html",
    "title": "Namespace Application.Attributes | Authentica",
    "keywords": "Namespace Application.Attributes Classes SensitiveDataAttribute Marks a property as sensitive data."
  },
  "api/Application.BackgroundServices.AccountPurge.html": {
    "href": "api/Application.BackgroundServices.AccountPurge.html",
    "title": "Class AccountPurge | Authentica",
    "keywords": "Class AccountPurge Namespace Application.BackgroundServices Assembly Authentica.Service.Identity.dll This background service deletes old user account marked as deleted after seven years. public class AccountPurge : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService AccountPurge Implements IHostedService IDisposable Derived AccountPurgeExposeProtected Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountPurge(IServiceScopeFactory, ILogger<AccountPurge>, ITimer) Initializes a new instance of AccountPurge public AccountPurge(IServiceScopeFactory serviceScopeFactory, ILogger<AccountPurge> logger, ITimer timer) Parameters serviceScopeFactory IServiceScopeFactory A factory for creating instances of IServiceScope logger ILogger<AccountPurge> The application logger. timer ITimer The periodic timer Fields _timer The periodic timer. public readonly ITimer _timer Field Value ITimer Properties Logger The application logger. public ILogger<AccountPurge> Logger { get; } Property Value ILogger<AccountPurge> ServiceScopeFactory A factory for creating instances of IServiceScope public IServiceScopeFactory ServiceScopeFactory { get; } Property Value IServiceScopeFactory Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/Application.BackgroundServices.ApplicationPurge.html": {
    "href": "api/Application.BackgroundServices.ApplicationPurge.html",
    "title": "Class ApplicationPurge | Authentica",
    "keywords": "Class ApplicationPurge Namespace Application.BackgroundServices Assembly Authentica.Service.Identity.dll This background service deletes old user account marked as deleted after seven years. public class ApplicationPurge : BackgroundService, IHostedService, IDisposable Inheritance object BackgroundService ApplicationPurge Implements IHostedService IDisposable Derived ApplicationPurgeExposeProtected Inherited Members BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationPurge(IServiceScopeFactory, ILogger<ApplicationPurge>, ITimer) Initializes a new instance of ApplicationPurge public ApplicationPurge(IServiceScopeFactory serviceScopeFactory, ILogger<ApplicationPurge> logger, ITimer timer) Parameters serviceScopeFactory IServiceScopeFactory A factory for creating instances of IServiceScope logger ILogger<ApplicationPurge> The application logger. timer ITimer Fields _timer A periodic timer. public readonly ITimer _timer Field Value ITimer Properties Logger The application logger. public ILogger<ApplicationPurge> Logger { get; } Property Value ILogger<ApplicationPurge> ServiceScopeFactory A factory for creating instances of IServiceScope public IServiceScopeFactory ServiceScopeFactory { get; } Property Value IServiceScopeFactory Methods ExecuteAsync(CancellationToken) This method is called when the IHostedService starts. The implementation should return a task that represents the lifetime of the long running operation(s) being performed. protected override Task ExecuteAsync(CancellationToken stoppingToken) Parameters stoppingToken CancellationToken Triggered when StopAsync(CancellationToken) is called. Returns Task A Task that represents the long running operations. Remarks See Worker Services in .NET for implementation guidelines."
  },
  "api/Application.BackgroundServices.html": {
    "href": "api/Application.BackgroundServices.html",
    "title": "Namespace Application.BackgroundServices | Authentica",
    "keywords": "Namespace Application.BackgroundServices Classes AccountPurge This background service deletes old user account marked as deleted after seven years. ApplicationPurge This background service deletes old user account marked as deleted after seven years."
  },
  "api/Application.Constants.HasherDefaults.html": {
    "href": "api/Application.Constants.HasherDefaults.html",
    "title": "Class HasherDefaults | Authentica",
    "keywords": "Class HasherDefaults Namespace Application.Constants Assembly Authentica.Service.Identity.dll Provides default values for hashing operations. public static class HasherDefaults Inheritance object HasherDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DegreeOfParallelism Number of threads to use in parallel processing. public const int DegreeOfParallelism = 8 Field Value int HashSize Size of the hash in bytes (512 bits). public const int HashSize = 64 Field Value int Iterations Number of iterations to perform in the hashing process. public const int Iterations = 16 Field Value int MemorySize Memory size in kilobytes to use during hashing. public const int MemorySize = 65536 Field Value int SaltSize Size of the salt in bytes (512 bits). public const int SaltSize = 64 Field Value int"
  },
  "api/Application.Constants.html": {
    "href": "api/Application.Constants.html",
    "title": "Namespace Application.Constants | Authentica",
    "keywords": "Namespace Application.Constants Classes HasherDefaults Provides default values for hashing operations."
  },
  "api/Application.Contracts.IActivityReadStore.html": {
    "href": "api/Application.Contracts.IActivityReadStore.html",
    "title": "Interface IActivityReadStore | Authentica",
    "keywords": "Interface IActivityReadStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for reading activity data. public interface IActivityReadStore Methods GetActivities() Retrieves a list of all activities. ImmutableList<Activity> GetActivities() Returns ImmutableList<Activity> An immutable list of activities. GetActivitiesByDateTimeStamp(DateTime) Retrieves a list of activities that occurred at or after the specified timestamp. ImmutableList<Activity> GetActivitiesByDateTimeStamp(DateTime timeStamp) Parameters timeStamp DateTime The timestamp to filter activities. Returns ImmutableList<Activity> An immutable list of activities that match the timestamp criteria."
  },
  "api/Application.Contracts.IActivityWriteStore.html": {
    "href": "api/Application.Contracts.IActivityWriteStore.html",
    "title": "Interface IActivityWriteStore | Authentica",
    "keywords": "Interface IActivityWriteStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for storing activities. public interface IActivityWriteStore Methods SaveActivityAsync<T>(T) Saves an activity asynchronously. Task SaveActivityAsync<T>(T activity) where T : class Parameters activity T The activity to save. Returns Task A task that represents the asynchronous operation. Type Parameters T The type of the activity."
  },
  "api/Application.Contracts.IApplicationReadStore.html": {
    "href": "api/Application.Contracts.IApplicationReadStore.html",
    "title": "Interface IApplicationReadStore | Authentica",
    "keywords": "Interface IApplicationReadStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for read operations on application-related data. public interface IApplicationReadStore Methods CheckApplicationExistsAsync(string, CancellationToken) Checks if an application with the specified name exists. Task<bool> CheckApplicationExistsAsync(string applicationName, CancellationToken cancellationToken = default) Parameters applicationName string The name of the application to check. cancellationToken CancellationToken The cancellation token to observe. Returns Task<bool> A task that represents the asynchronous operation, containing a boolean indicating if the application exists. GetAllClientApplicationsByUserIdAsync(string, CancellationToken) Retrieves all client applications associated with a given user ID. Task<IEnumerable<ClientApplication>> GetAllClientApplicationsByUserIdAsync(string userId, CancellationToken cancellationToken = default) Parameters userId string The user ID to check for association. cancellationToken CancellationToken A cancellation token to observe while waiting for the task to complete. Returns Task<IEnumerable<ClientApplication>> A list of client applications associated with the specified user ID. GetClientApplicationByClientIdAndCallbackUri(ApplicationDto<AuthorizeRequest>, CancellationToken) Retrieves a client application by its client ID specified in the provided DTO. Task<ClientApplication?> GetClientApplicationByClientIdAndCallbackUri(ApplicationDto<AuthorizeRequest> dto, CancellationToken cancellationToken) Parameters dto ApplicationDto<AuthorizeRequest> The data transfer object containing the authorization request and claims principal. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ClientApplication> A task that represents the asynchronous operation, containing the client application if found; otherwise, null. GetClientApplicationByNameAndUserIdAsync(string, string, CancellationToken) Retrieves a client application by its name and associated user ID. Task<ClientApplication?> GetClientApplicationByNameAndUserIdAsync(string name, string userId, CancellationToken cancellationToken = default) Parameters name string The name of the client application to retrieve. userId string The user ID to check for association. cancellationToken CancellationToken A cancellation token to observe while waiting for the task to complete. Returns Task<ClientApplication> The client application if found, otherwise null."
  },
  "api/Application.Contracts.IApplicationWriteStore.html": {
    "href": "api/Application.Contracts.IApplicationWriteStore.html",
    "title": "Interface IApplicationWriteStore | Authentica",
    "keywords": "Interface IApplicationWriteStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract which handles operations related to creating new client applications and updating existing client applications. public interface IApplicationWriteStore Methods CreateClientApplicationAsync(ApplicationDto<CreateApplicationRequest>, CancellationToken) Asynchronously adds a new client application to the system based on the provided data transfer object (DTO). Task<ApplicationStoreResult> CreateClientApplicationAsync(ApplicationDto<CreateApplicationRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<CreateApplicationRequest> The data transfer object containing the details of the client application to be created. cancellationToken CancellationToken A token that can be used to cancel the asynchronous operation. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. The task result contains an ApplicationStoreResult which indicates the success or failure of the operation. Exceptions ArgumentNullException Thrown when the dto is null. Exception Thrown when an error occurs during the process of adding the client application. SoftDeleteApplicationAsync(ApplicationDto<DeleteApplicationByNameRequest>, CancellationToken) Soft deletes an existing client application based on the provided application name. The deletion is marked with the current user and timestamp. Task<ApplicationStoreResult> SoftDeleteApplicationAsync(ApplicationDto<DeleteApplicationByNameRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<DeleteApplicationByNameRequest> A dto which encapsulates the request and its related objects to this operation. cancellationToken CancellationToken A token that can be used to cancel the asynchronous operation. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. The task result contains an ApplicationStoreResult which indicates the success or failure of the operation. Exceptions ArgumentNullException Thrown when the dto is null. Exception Thrown when an error occurs during the process of soft deleting the client application. UpdateApplicationAsync(ApplicationDto<UpdateApplicationByNameRequest>, CancellationToken) Asynchronously updates an existing client application in the system based on the provided data transfer object (DTO). Task<ApplicationStoreResult> UpdateApplicationAsync(ApplicationDto<UpdateApplicationByNameRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<UpdateApplicationByNameRequest> The data transfer object containing the updated details of the client application. cancellationToken CancellationToken A token that can be used to cancel the asynchronous operation. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. The task result contains an ApplicationStoreResult which indicates the success or failure of the operation. Exceptions ArgumentNullException Thrown when the dto is null. Exception Thrown when an error occurs during the process of updating the client application. UpdateClientSecretAsync(ApplicationDto<CreateApplicationSecretRequest>, CancellationToken) Generates a new client secret and updates the client application with the hashed secret. Task<ApplicationStoreResult> UpdateClientSecretAsync(ApplicationDto<CreateApplicationSecretRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<CreateApplicationSecretRequest> The ID of the client application to update. cancellationToken CancellationToken A token to cancel the operation if needed. The default value is None. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown if dto is null or empty."
  },
  "api/Application.Contracts.IEmailPublisher.html": {
    "href": "api/Application.Contracts.IEmailPublisher.html",
    "title": "Interface IEmailPublisher | Authentica",
    "keywords": "Interface IEmailPublisher Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Publishes a message to the message queue, for confirmation emails, password reset codes, and mfa codes, update email codes, and update phone number codes public interface IEmailPublisher Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/Application.Contracts.IJsonWebTokenProvider.html": {
    "href": "api/Application.Contracts.IJsonWebTokenProvider.html",
    "title": "Interface IJsonWebTokenProvider | Authentica",
    "keywords": "Interface IJsonWebTokenProvider Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for the JWT Token Provider implementation JsonWebTokenProvider public interface IJsonWebTokenProvider Methods TryCreateRefreshTokenAsync(string, string, string, string, int, string, IList<string>, IList<string>) Tries to create a refresh JWT (JSON Web Token) asynchronously. Task<JwtResult> TryCreateRefreshTokenAsync(string email, string jwtSecret, string issuer, string audience, int expires, string subject, IList<string> roles, IList<string> scopes) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires int The expiration date and time of the JWT. subject string The subject of the JWT. roles IList<string> The roles that are stored as claims in the JWT. scopes IList<string> The scopes that are assigned to the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryCreateTokenAsync(string, string, string, string, int, string, IList<string>, IList<string>) Tries to create a new JWT (JSON Web Token) asynchronously. Task<JwtResult> TryCreateTokenAsync(string email, string jwtSecret, string issuer, string audience, int expires, string subject, IList<string> roles, IList<string> scopes) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires int The expiration date and time of the JWT. subject string The subject of the JWT. roles IList<string> The roles that are stored as claims in the JWT. scopes IList<string> The scopes that are assigned to the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryValidateTokenAsync(string, string, string, string) Tries to validate a JWT (JSON Web Token) asynchronously. Task<JwtResult> TryValidateTokenAsync(string token, string jwtSecret, string issuer, string audience) Parameters token string The JWT to validate. jwtSecret string The secret key used to validate the JWT's signature. issuer string The expected issuer of the JWT. audience string The expected audience of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token validation."
  },
  "api/Application.Contracts.IMultiFactorTotpProvider.html": {
    "href": "api/Application.Contracts.IMultiFactorTotpProvider.html",
    "title": "Interface IMultiFactorTotpProvider | Authentica",
    "keywords": "Interface IMultiFactorTotpProvider Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines the contract for a provider that handles Time-based One-Time Password (TOTP) generation, formatting, and validation for mfa authentication. public interface IMultiFactorTotpProvider Methods FormatKey(string) Formats the unformatted TOTP key by inserting spaces for readability. string FormatKey(string unformattedKey) Parameters unformattedKey string The unformatted TOTP key. Returns string The formatted TOTP key with spaces inserted. GenerateKeyAsync(User) Generates a new TOTP key for the specified user. Task<string> GenerateKeyAsync(User user) Parameters user User The user for whom to generate the TOTP key. Returns Task<string> A task representing the asynchronous operation. The task result contains the generated TOTP key. GenerateQrCodeUriAsync(User) Generates a QR code URI for the specified user that can be used to configure an authenticator app. Task<string> GenerateQrCodeUriAsync(User user) Parameters user User The user for whom to generate the QR code URI. Returns Task<string> A task representing the asynchronous operation. The task result contains the QR code URI. ValidateAsync(string, User) Validates the provided TOTP code for the specified user. Task<bool> ValidateAsync(string code, User user) Parameters code string The TOTP code to validate. user User The user for whom to validate the TOTP code. Returns Task<bool> A task representing the asynchronous operation. The task result indicates whether the code is valid."
  },
  "api/Application.Contracts.IRandomStringProvider.html": {
    "href": "api/Application.Contracts.IRandomStringProvider.html",
    "title": "Interface IRandomStringProvider | Authentica",
    "keywords": "Interface IRandomStringProvider Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Represents a contract for a random string generator. public interface IRandomStringProvider Methods GenerateAlphanumeric(int) Generates a random string of specified length. string GenerateAlphanumeric(int length = 256) Parameters length int Length of the random string to generate. Default is 256. Returns string A randomly generated alphanumeric string."
  },
  "api/Application.Contracts.IScopeProvider.html": {
    "href": "api/Application.Contracts.IScopeProvider.html",
    "title": "Interface IScopeProvider | Authentica",
    "keywords": "Interface IScopeProvider Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for a scope provider. public interface IScopeProvider Methods ParseScopes(string) Parses a space-delimited scope string into a list of individual scopes. IList<string> ParseScopes(string scopeString) Parameters scopeString string The space-delimited string of scopes to parse. Returns IList<string> An IList<string> containing individual scopes. Returns an empty list if the input is null, empty, or whitespace."
  },
  "api/Application.Contracts.ISecretHasher.html": {
    "href": "api/Application.Contracts.ISecretHasher.html",
    "title": "Interface ISecretHasher | Authentica",
    "keywords": "Interface ISecretHasher Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for hashing and verifying secrets. public interface ISecretHasher Methods Hash(string) Computes the hash of the specified input. string Hash(string input) Parameters input string The input string to hash. Returns string The hashed representation of the input string. Verify(string, string) Verifies that a hashed representation matches the specified input. bool Verify(string input, string storedHash) Parameters input string The input string to verify. storedHash string The stored hash to compare against. Returns bool true if the input matches the stored hash; otherwise, false."
  },
  "api/Application.Contracts.ISessionReadStore.html": {
    "href": "api/Application.Contracts.ISessionReadStore.html",
    "title": "Interface ISessionReadStore | Authentica",
    "keywords": "Interface ISessionReadStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines the contract for reading session data from a persistent store. public interface ISessionReadStore Methods GetAsync(string) Retrieves all sessions from the store asynchronously based on the user id. Task<IList<Session>> GetAsync(string UserId) Parameters UserId string The user's unique identifier. Returns Task<IList<Session>> A task that represents the asynchronous operation. The task result contains the retrieved session, or null if not found. GetByIdAsync(string) Retrieves a session from the store based on the session id. Task<Session> GetByIdAsync(string SessionId) Parameters SessionId string The session unique identifier. Returns Task<Session> A task that represents the asynchronous operation."
  },
  "api/Application.Contracts.ISessionWriteStore.html": {
    "href": "api/Application.Contracts.ISessionWriteStore.html",
    "title": "Interface ISessionWriteStore | Authentica",
    "keywords": "Interface ISessionWriteStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines the contract for writing session data to a persistent store. public interface ISessionWriteStore Methods CreateAsync(Session) Creates a new session in the store asynchronously. Task<Session> CreateAsync(Session session) Parameters session Session The session to create. Returns Task<Session> A task that represents the asynchronous operation. The task result contains the created session. DeleteAsync(Session) Deletes a session from the store asynchronously. Task DeleteAsync(Session session) Parameters session Session Returns Task A task that represents the asynchronous operation."
  },
  "api/Application.Contracts.ISharedStore.html": {
    "href": "api/Application.Contracts.ISharedStore.html",
    "title": "Interface ISharedStore | Authentica",
    "keywords": "Interface ISharedStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for operations that are generic and can be shared. public interface ISharedStore Methods PurgeEntriesAsync<TEntity>(CancellationToken) Asynchronously purges soft-deleted entries from the store. Task<SharedStoreResult> PurgeEntriesAsync<TEntity>(CancellationToken cancellationToken) where TEntity : class, IEntityDeletionStatus<string> Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<SharedStoreResult> A task representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the purge operation. Type Parameters TEntity The type of the entity to purge. Exceptions OperationCanceledException Thrown if the operation is cancelled."
  },
  "api/Application.Contracts.ITimer.html": {
    "href": "api/Application.Contracts.ITimer.html",
    "title": "Interface ITimer | Authentica",
    "keywords": "Interface ITimer Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines an contract for a timer that waits for the next tick. public interface ITimer Methods WaitForNextTickAsync(CancellationToken) Asynchronously waits for the next tick of the timer. Task<bool> WaitForNextTickAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken A token to cancel the wait operation. Returns Task<bool> A task that represents the asynchronous wait operation. The task result is true if the wait completed successfully, false if the wait was canceled."
  },
  "api/Application.Contracts.IUserReadStore.html": {
    "href": "api/Application.Contracts.IUserReadStore.html",
    "title": "Interface IUserReadStore | Authentica",
    "keywords": "Interface IUserReadStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for user read operations. public interface IUserReadStore Methods GetAllUsersAsync() Asynchronously retrieves the list of users in the database Task<IList<User>> GetAllUsersAsync() Returns Task<IList<User>> A task that represents the asynchronous operation. The task result contains a list of all users. GetUserByEmailAsync(ClaimsPrincipal, CancellationToken) Retrieves a user by their email from the given claims principal. Task<UserStoreResult> GetUserByEmailAsync(ClaimsPrincipal claimsPrincipal, CancellationToken cancellationToken = default) Parameters claimsPrincipal ClaimsPrincipal The claims principal containing the user's email claim. cancellationToken CancellationToken The cancellation token to observe. Returns Task<UserStoreResult> A task that represents the asynchronous operation, containing the result of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. GetUserByEmailAsync(string) Asynchronously retrieves a user by their email address. Task<UserStoreResult> GetUserByEmailAsync(string email) Parameters email string The email address of the user to retrieve. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. GetUserByIdAsync(string) Asynchronously retrieves a user by their id. Task<UserStoreResult> GetUserByIdAsync(string Id) Parameters Id string The unique identifier of the user. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. GetUserRolesAsync(string) Asynchronously retrieves the list of roles associated with a specified user. Task<IList<string>> GetUserRolesAsync(string email) Parameters email string The email of the user for whom to retrieve roles. Returns Task<IList<string>> A task that represents the asynchronous operation. The task result contains a list of role names associated with the user."
  },
  "api/Application.Contracts.IUserWriteStore.html": {
    "href": "api/Application.Contracts.IUserWriteStore.html",
    "title": "Interface IUserWriteStore | Authentica",
    "keywords": "Interface IUserWriteStore Namespace Application.Contracts Assembly Authentica.Service.Identity.dll Defines methods for writing operations related to user data. public interface IUserWriteStore Methods ConfirmEmailAsync(User, string) Asynchronously confirms a user's email address using a confirmation token. Task<UserStoreResult> ConfirmEmailAsync(User user, string token) Parameters user User The user whose email address is being confirmed. token string The email confirmation token. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions ArgumentNullException Thrown if user or token is null. Exception Thrown if an unexpected error occurs during the operation. CreateUserAsync(RegisterRequest, CancellationToken) Asynchronously creates a new user based on the provided registration request. Task<UserStoreResult> CreateUserAsync(RegisterRequest request, CancellationToken cancellationToken) Parameters request RegisterRequest The registration request containing the user's details for creation. cancellationToken CancellationToken A cancellation token to observe while waiting for the task to complete. Returns Task<UserStoreResult> A task that represents the asynchronous operation. The task result is a UserStoreResult indicating the success or failure of the user creation operation. Exceptions ArgumentNullException Thrown when request is null. OperationCanceledException Thrown when the operation is canceled by the cancellationToken. RedeemMultiFactorRecoveryCodeAsync(User, string) Asynchronously redeems a mfa recovery code for a user. Task<UserStoreResult> RedeemMultiFactorRecoveryCodeAsync(User user, string code) Parameters user User The user attempting to redeem the recovery code. code string The mfa recovery code. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. ResetPasswordAsync(User, string, string) Asynchronously resets a user's password using a reset token and a new password. Task<UserStoreResult> ResetPasswordAsync(User user, string token, string newPassword) Parameters user User The user whose password is being reset. token string The password reset token. newPassword string The new password for the user. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions ArgumentException Thrown if token is null or whitespace. SoftDeleteUserAsync(ClaimsPrincipal, CancellationToken) Soft deletes a user by marking the user as deleted in the data store. Task<UserStoreResult> SoftDeleteUserAsync(ClaimsPrincipal user, CancellationToken cancellationToken = default) Parameters user ClaimsPrincipal The user to be soft deleted. cancellationToken CancellationToken The cancellation token. Returns Task<UserStoreResult> A task that represents the asynchronous operation. The task result contains a UserStoreResult indicating the success or failure of the operation. UpdateEmailAsync(User, string, string) Asynchronously updates a user's email address using a confirmation token. Task<UserStoreResult> UpdateEmailAsync(User user, string newEmail, string token) Parameters user User The user whose email address is being updated. newEmail string The new email address to set for the user. token string The email confirmation token. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. UpdatePhoneNumberAsync(User, string, string) Updates the phone number of the specified user. Task<UserStoreResult> UpdatePhoneNumberAsync(User user, string phoneNumber, string token) Parameters user User The user whose phone number needs to be updated. phoneNumber string The new phone number to be set for the user. token string The token used to verify the phone number change. Returns Task<UserStoreResult> A task that represents the asynchronous operation. The task result contains a UserStoreResult indicating the result of the operation."
  },
  "api/Application.Contracts.html": {
    "href": "api/Application.Contracts.html",
    "title": "Namespace Application.Contracts | Authentica",
    "keywords": "Namespace Application.Contracts Interfaces IActivityReadStore Defines a contract for reading activity data. IActivityWriteStore Defines a contract for storing activities. IApplicationReadStore Defines a contract for read operations on application-related data. IApplicationWriteStore Defines a contract which handles operations related to creating new client applications and updating existing client applications. IEmailPublisher Publishes a message to the message queue, for confirmation emails, password reset codes, and mfa codes, update email codes, and update phone number codes IJsonWebTokenProvider Defines a contract for the JWT Token Provider implementation JsonWebTokenProvider IMultiFactorTotpProvider Defines the contract for a provider that handles Time-based One-Time Password (TOTP) generation, formatting, and validation for mfa authentication. IRandomStringProvider Represents a contract for a random string generator. IScopeProvider Defines a contract for a scope provider. ISecretHasher Defines a contract for hashing and verifying secrets. ISessionReadStore Defines the contract for reading session data from a persistent store. ISessionWriteStore Defines the contract for writing session data to a persistent store. ISharedStore Defines a contract for operations that are generic and can be shared. ITimer Defines an contract for a timer that waits for the next tick. IUserReadStore Defines a contract for user read operations. IUserWriteStore Defines methods for writing operations related to user data."
  },
  "api/Application.Cryptography.Argon2PasswordHasher-1.html": {
    "href": "api/Application.Cryptography.Argon2PasswordHasher-1.html",
    "title": "Class Argon2PasswordHasher<TUser> | Authentica",
    "keywords": "Class Argon2PasswordHasher<TUser> Namespace Application.Cryptography Assembly Authentica.Service.Identity.dll Implementation class for password hashing, which integrates with ASP.NET Identity. public class Argon2PasswordHasher<TUser> : IPasswordHasher<TUser> where TUser : class Type Parameters TUser Inheritance object Argon2PasswordHasher<TUser> Implements IPasswordHasher<TUser> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HashPassword(TUser, string) Returns a hashed representation of the supplied password for the specified user. public string HashPassword(TUser user, string password) Parameters user TUser The user whose password is to be hashed. password string The password to hash. Returns string A hashed representation of the supplied password for the specified user. VerifyHashedPassword(TUser, string, string) Returns a PasswordVerificationResult indicating the result of a password hash comparison. public PasswordVerificationResult VerifyHashedPassword(TUser user, string hashedPassword, string providedPassword) Parameters user TUser The user whose password should be verified. hashedPassword string The hash value for a user's stored password. providedPassword string The password supplied for comparison. Returns PasswordVerificationResult A PasswordVerificationResult indicating the result of a password hash comparison. Remarks Implementations of this method should be time consistent."
  },
  "api/Application.Cryptography.Argon2SecretHasher.html": {
    "href": "api/Application.Cryptography.Argon2SecretHasher.html",
    "title": "Class Argon2SecretHasher | Authentica",
    "keywords": "Class Argon2SecretHasher Namespace Application.Cryptography Assembly Authentica.Service.Identity.dll Implementation for a secret hasher using the Argon2 algorithm. public class Argon2SecretHasher : ISecretHasher Inheritance object Argon2SecretHasher Implements ISecretHasher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Hash(string) Computes the hash of the specified input. public string Hash(string input) Parameters input string The input string to hash. Returns string The hashed representation of the input string. Verify(string, string) Verifies that a hashed representation matches the specified input. public bool Verify(string input, string storedHash) Parameters input string The input string to verify. storedHash string The stored hash to compare against. Returns bool true if the input matches the stored hash; otherwise, false."
  },
  "api/Application.Cryptography.Shared.html": {
    "href": "api/Application.Cryptography.Shared.html",
    "title": "Class Shared | Authentica",
    "keywords": "Class Shared Namespace Application.Cryptography Assembly Authentica.Service.Identity.dll Provides shared methods for cryptographic operations. public static class Shared Inheritance object Shared Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Hash(string) Hashes a given string with the Argon2 algorithm. public static string Hash(string input) Parameters input string The string to hash. Returns string The hashed string Verify(string, string) Verifies the password by re-encrypting the input, and comparing the stored hash. public static bool Verify(string input, string storedHash) Parameters input string The input string. storedHash string The stored password hash. Returns bool"
  },
  "api/Application.Cryptography.html": {
    "href": "api/Application.Cryptography.html",
    "title": "Namespace Application.Cryptography | Authentica",
    "keywords": "Namespace Application.Cryptography Classes Argon2PasswordHasher<TUser> Implementation class for password hashing, which integrates with ASP.NET Identity. Argon2SecretHasher Implementation for a secret hasher using the Argon2 algorithm. Shared Provides shared methods for cryptographic operations."
  },
  "api/Application.DTOs.ApplicationDto-1.html": {
    "href": "api/Application.DTOs.ApplicationDto-1.html",
    "title": "Class ApplicationDto<TRequest> | Authentica",
    "keywords": "Class ApplicationDto<TRequest> Namespace Application.DTOs Assembly Authentica.Service.Identity.dll Represents a data transfer object for an application. public class ApplicationDto<TRequest> where TRequest : class Type Parameters TRequest Inheritance object ApplicationDto<TRequest> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ClaimsPrincipal Gets or sets the claims principal representing the current user. public ClaimsPrincipal ClaimsPrincipal { get; set; } Property Value ClaimsPrincipal Request Gets or sets the request data for the client application. public TRequest Request { get; set; } Property Value TRequest"
  },
  "api/Application.DTOs.html": {
    "href": "api/Application.DTOs.html",
    "title": "Namespace Application.DTOs | Authentica",
    "keywords": "Namespace Application.DTOs Classes ApplicationDto<TRequest> Represents a data transfer object for an application."
  },
  "api/Application.Exceptions.PurgeFailureException.html": {
    "href": "api/Application.Exceptions.PurgeFailureException.html",
    "title": "Class PurgeFailureException | Authentica",
    "keywords": "Class PurgeFailureException Namespace Application.Exceptions Assembly Authentica.Service.Identity.dll Represents errors that occur during a purge operation. public class PurgeFailureException : Exception, ISerializable Inheritance object Exception PurgeFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PurgeFailureException(string?) Initializes a new instance of the PurgeFailureException class with a specified error message. public PurgeFailureException(string? message) Parameters message string The message that describes the error."
  },
  "api/Application.Exceptions.html": {
    "href": "api/Application.Exceptions.html",
    "title": "Namespace Application.Exceptions | Authentica",
    "keywords": "Namespace Application.Exceptions Classes PurgeFailureException Represents errors that occur during a purge operation."
  },
  "api/Application.Extensions.HealthCheckExtensions.html": {
    "href": "api/Application.Extensions.HealthCheckExtensions.html",
    "title": "Class HealthCheckExtensions | Authentica",
    "keywords": "Class HealthCheckExtensions Namespace Application.Extensions Assembly Authentica.Service.Identity.dll A collection of extension methods for health checks. public static class HealthCheckExtensions Inheritance object HealthCheckExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRedisHealthCheck(IServiceCollection) Adds a Redis health check to the service collection if the Cache feature flag is enabled. public static IServiceCollection AddRedisHealthCheck(this IServiceCollection services) Parameters services IServiceCollection The service collection to which the health check is added. Returns IServiceCollection The original service collection, potentially with the Redis health check added. Exceptions InvalidOperationException Thrown if the required configuration value for Redis connection string is not found."
  },
  "api/Application.Extensions.HttpContextExtensions.html": {
    "href": "api/Application.Extensions.HttpContextExtensions.html",
    "title": "Class HttpContextExtensions | Authentica",
    "keywords": "Class HttpContextExtensions Namespace Application.Extensions Assembly Authentica.Service.Identity.dll Provides extension methods for HttpContext. public static class HttpContextExtensions Inheritance object HttpContextExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetIpAddress(HttpContext) Gets the client's IP address from the request. public static string GetIpAddress(this HttpContext context) Parameters context HttpContext The HttpContext. Returns string Client's IP address or null if not determined. Remarks Checks X-Forwarded-For header first, then falls back to RemoteIpAddress. Note: IP addresses can be spoofed."
  },
  "api/Application.Extensions.ServiceCollectionExtensions.html": {
    "href": "api/Application.Extensions.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Authentica",
    "keywords": "Class ServiceCollectionExtensions Namespace Application.Extensions Assembly Authentica.Service.Identity.dll Extension methods for the IServiceCollection public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddBearerAuthentication(IServiceCollection) Adds bearer authentication services. public static IServiceCollection AddBearerAuthentication(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddCrossOrigin(IServiceCollection) Adds cross-origin policies for the application. public static IServiceCollection AddCrossOrigin(this IServiceCollection services) Parameters services IServiceCollection The service collection. Returns IServiceCollection The updated service collection. AddCustomSession(IServiceCollection) Adds custom session configuration to the application. public static IServiceCollection AddCustomSession(this IServiceCollection services) Parameters services IServiceCollection The service collection. Returns IServiceCollection The updated service collection. AddIdentity(IServiceCollection) Adds the ASP.NET Identity configuration. public static IServiceCollection AddIdentity(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection instance. Returns IServiceCollection The modified IServiceCollection AddPersistence(IServiceCollection) Adds the persistence services to the service collection. public static IServiceCollection AddPersistence(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection instance. Returns IServiceCollection The modified IServiceCollection AddPublisherMessaging(IServiceCollection) Adds publisher messaging for rabbitmq or azure service bus. public static IServiceCollection AddPublisherMessaging(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddSessionCache(IServiceCollection) Add the required services for in-memory and redis services, if redis is enabled in the feature flags. public static IServiceCollection AddSessionCache(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance. AddSwaggerGen(IServiceCollection, string) Adds Swagger with custom configuration. public static IServiceCollection AddSwaggerGen(this IServiceCollection services, string xmlFile) Parameters services IServiceCollection The IServiceCollection instance. xmlFile string Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/Application.Extensions.ValidationExtensions.html": {
    "href": "api/Application.Extensions.ValidationExtensions.html",
    "title": "Class ValidationExtensions | Authentica",
    "keywords": "Class ValidationExtensions Namespace Application.Extensions Assembly Authentica.Service.Identity.dll Provides extension methods for validation. public static class ValidationExtensions Inheritance object ValidationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods BeAValidGrantType(string) Determines whether the specified string is a valid OAuth 2.0 grant type. public static bool BeAValidGrantType(this string grantType) Parameters grantType string The grant type string to validate. Returns bool true if the specified string is a valid grant type; otherwise, false. BeAValidGuid(string) Determines whether the specified string is a valid GUID. public static bool BeAValidGuid(this string guid) Parameters guid string The string to validate as a GUID. Returns bool true if the specified string is a valid GUID; otherwise, false. BeAValidUri(string) Determines whether the specified string is a valid URI. public static bool BeAValidUri(this string uri) Parameters uri string The string to validate as a URI. Returns bool true if the specified string is a valid URI; otherwise, false."
  },
  "api/Application.Extensions.WebApplicationExtensions.html": {
    "href": "api/Application.Extensions.WebApplicationExtensions.html",
    "title": "Class WebApplicationExtensions | Authentica",
    "keywords": "Class WebApplicationExtensions Namespace Application.Extensions Assembly Authentica.Service.Identity.dll Extensions for IApplicationBuilder public static class WebApplicationExtensions Inheritance object WebApplicationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods UseSeedDataAsync(WebApplication) Seeds data asynchronously. public static Task UseSeedDataAsync(this WebApplication app) Parameters app WebApplication The web application. Returns Task A Task representing the asynchronous operation. UseSeedTestDataAsync(WebApplication) Seeds all test data asynchronously public static Task UseSeedTestDataAsync(this WebApplication app) Parameters app WebApplication The web application. Returns Task A Task representing the asynchronous operation."
  },
  "api/Application.Extensions.html": {
    "href": "api/Application.Extensions.html",
    "title": "Namespace Application.Extensions | Authentica",
    "keywords": "Namespace Application.Extensions Classes HealthCheckExtensions A collection of extension methods for health checks. HttpContextExtensions Provides extension methods for HttpContext. ServiceCollectionExtensions Extension methods for the IServiceCollection ValidationExtensions Provides extension methods for validation. WebApplicationExtensions Extensions for IApplicationBuilder"
  },
  "api/Application.Factories.IdentityErrorFactory.html": {
    "href": "api/Application.Factories.IdentityErrorFactory.html",
    "title": "Class IdentityErrorFactory | Authentica",
    "keywords": "Class IdentityErrorFactory Namespace Application.Factories Assembly Authentica.Service.Identity.dll Provides custom error messages for identity operations, including detailed exception information. public class IdentityErrorFactory : IdentityErrorDescriber Inheritance object IdentityErrorDescriber IdentityErrorFactory Inherited Members IdentityErrorDescriber.DefaultError() IdentityErrorDescriber.ConcurrencyFailure() IdentityErrorDescriber.PasswordMismatch() IdentityErrorDescriber.InvalidToken() IdentityErrorDescriber.RecoveryCodeRedemptionFailed() IdentityErrorDescriber.LoginAlreadyAssociated() IdentityErrorDescriber.InvalidUserName(string) IdentityErrorDescriber.InvalidEmail(string) IdentityErrorDescriber.DuplicateUserName(string) IdentityErrorDescriber.DuplicateEmail(string) IdentityErrorDescriber.InvalidRoleName(string) IdentityErrorDescriber.DuplicateRoleName(string) IdentityErrorDescriber.UserAlreadyHasPassword() IdentityErrorDescriber.UserLockoutNotEnabled() IdentityErrorDescriber.UserAlreadyInRole(string) IdentityErrorDescriber.UserNotInRole(string) IdentityErrorDescriber.PasswordTooShort(int) IdentityErrorDescriber.PasswordRequiresUniqueChars(int) IdentityErrorDescriber.PasswordRequiresNonAlphanumeric() IdentityErrorDescriber.PasswordRequiresDigit() IdentityErrorDescriber.PasswordRequiresLower() IdentityErrorDescriber.PasswordRequiresUpper() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApplicationNotFound() Returns an error message indicating the application was not found. public static IdentityError ApplicationNotFound() Returns IdentityError An IdentityError indicating application not found. EmailNotFound() Returns an error message indicating that the specified email was not found. public static IdentityError EmailNotFound() Returns IdentityError An IdentityError with a message indicating the email was not found. ExceptionOccurred(Exception) Returns an error message indicating an exception occurred with details. public static IdentityError ExceptionOccurred(Exception exception) Parameters exception Exception The exception that occurred. Returns IdentityError An IdentityError with a detailed error message. UserNotFound() Returns an error message indicating that the specified user was not found. public static IdentityError UserNotFound() Returns IdentityError An IdentityError indicating that the user was not found."
  },
  "api/Application.Factories.html": {
    "href": "api/Application.Factories.html",
    "title": "Namespace Application.Factories | Authentica",
    "keywords": "Namespace Application.Factories Classes IdentityErrorFactory Provides custom error messages for identity operations, including detailed exception information."
  },
  "api/Application.Mappers.ClientApplicationMapper.html": {
    "href": "api/Application.Mappers.ClientApplicationMapper.html",
    "title": "Class ClientApplicationMapper | Authentica",
    "keywords": "Class ClientApplicationMapper Namespace Application.Mappers Assembly Authentica.Service.Identity.dll Mapper class to convert ClientApplication objects to ReadApplicationResponse objects. [Mapper] public class ClientApplicationMapper Inheritance object ClientApplicationMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToResponse(ClientApplication) Converts a ClientApplication object to a ReadApplicationResponse object. [GeneratedCode(\"Riok.Mapperly\", \"3.6.0.0\")] public ReadApplicationResponse ToResponse(ClientApplication clientApplication) Parameters clientApplication ClientApplication The ClientApplication object to convert. Returns ReadApplicationResponse A ReadApplicationResponse object representing the mapped data."
  },
  "api/Application.Mappers.GetAllUsersMapper.html": {
    "href": "api/Application.Mappers.GetAllUsersMapper.html",
    "title": "Class GetAllUsersMapper | Authentica",
    "keywords": "Class GetAllUsersMapper Namespace Application.Mappers Assembly Authentica.Service.Identity.dll Provides mapping functionality for converting a list of users to their response representations. [Mapper] public class GetAllUsersMapper Inheritance object GetAllUsersMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToResponse(IList<User>) Converts a list of User objects to a list of GetUserResponse objects. [GeneratedCode(\"Riok.Mapperly\", \"3.6.0.0\")] public List<GetUserResponse> ToResponse(IList<User> Users) Parameters Users IList<User> The list of users to convert. Returns List<GetUserResponse> A list of GetUserResponse objects representing the users."
  },
  "api/Application.Mappers.ReadAllActivitiesMapper.html": {
    "href": "api/Application.Mappers.ReadAllActivitiesMapper.html",
    "title": "Class ReadAllActivitiesMapper | Authentica",
    "keywords": "Class ReadAllActivitiesMapper Namespace Application.Mappers Assembly Authentica.Service.Identity.dll Provides mapping functionality to convert event domain models to response models. [Mapper] public class ReadAllActivitiesMapper Inheritance object ReadAllActivitiesMapper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToResponse(ImmutableList<Activity>) Maps a list of activity domain models to a list of activity response models. [GeneratedCode(\"Riok.Mapperly\", \"3.6.0.0\")] public ImmutableList<ActivityResponse> ToResponse(ImmutableList<Activity> activities) Parameters activities ImmutableList<Activity> The list of activity domain models to be mapped. Returns ImmutableList<ActivityResponse> A list of activity response models."
  },
  "api/Application.Mappers.html": {
    "href": "api/Application.Mappers.html",
    "title": "Namespace Application.Mappers | Authentica",
    "keywords": "Namespace Application.Mappers Classes ClientApplicationMapper Mapper class to convert ClientApplication objects to ReadApplicationResponse objects. GetAllUsersMapper Provides mapping functionality for converting a list of users to their response representations. ReadAllActivitiesMapper Provides mapping functionality to convert event domain models to response models."
  },
  "api/Application.Providers.JsonWebTokenProvider.html": {
    "href": "api/Application.Providers.JsonWebTokenProvider.html",
    "title": "Class JsonWebTokenProvider | Authentica",
    "keywords": "Class JsonWebTokenProvider Namespace Application.Providers Assembly Authentica.Service.Identity.dll Represents a service for managing JSON Web Tokens. This includes creating, refreshing and validating JSON Web Tokens. public sealed class JsonWebTokenProvider : IJsonWebTokenProvider Inheritance object JsonWebTokenProvider Implements IJsonWebTokenProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors JsonWebTokenProvider(JwtSecurityTokenHandler) Initializes a new instance of the JsonWebTokenProvider class with a specified JwtSecurityTokenHandler for handling JWT operations. public JsonWebTokenProvider(JwtSecurityTokenHandler tokenHandler) Parameters tokenHandler JwtSecurityTokenHandler The token handler used for generating and validating JWT tokens. Methods TryCreateRefreshTokenAsync(string, string, string, string, int, string, IList<string>, IList<string>) Tries to create a refresh JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryCreateRefreshTokenAsync(string email, string jwtSecret, string issuer, string audience, int expires, string subject, IList<string> roles, IList<string> scopes) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires int The expiration date and time of the JWT. subject string The subject of the JWT. roles IList<string> The roles that are stored as claims in the JWT. scopes IList<string> The scopes that are assigned to the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryCreateTokenAsync(string, string, string, string, int, string, IList<string>, IList<string>) Tries to create a new JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryCreateTokenAsync(string email, string jwtSecret, string issuer, string audience, int expires, string subject, IList<string> roles, IList<string> scopes) Parameters email string The email of the token's recipient. jwtSecret string The secret key used to sign the JWT. issuer string The issuer of the JWT. audience string The intended audience of the JWT. expires int The expiration date and time of the JWT. subject string The subject of the JWT. roles IList<string> The roles that are stored as claims in the JWT. scopes IList<string> The scopes that are assigned to the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token creation. TryValidateTokenAsync(string, string, string, string) Tries to validate a JWT (JSON Web Token) asynchronously. public Task<JwtResult> TryValidateTokenAsync(string token, string jwtSecret, string issuer, string audience) Parameters token string The JWT to validate. jwtSecret string The secret key used to validate the JWT's signature. issuer string The expected issuer of the JWT. audience string The expected audience of the JWT. Returns Task<JwtResult> A JwtResult containing the result of the token validation."
  },
  "api/Application.Providers.MultiFactorTotpProvider.html": {
    "href": "api/Application.Providers.MultiFactorTotpProvider.html",
    "title": "Class MultiFactorTotpProvider | Authentica",
    "keywords": "Class MultiFactorTotpProvider Namespace Application.Providers Assembly Authentica.Service.Identity.dll Provides functionality for generating and validating Time-based One-Time Password (TOTP) keys for mfa. public sealed class MultiFactorTotpProvider : IMultiFactorTotpProvider Inheritance object MultiFactorTotpProvider Implements IMultiFactorTotpProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorTotpProvider(IServiceProvider) Initializes a new instance of MultiFactorTotpProvider public MultiFactorTotpProvider(IServiceProvider services) Parameters services IServiceProvider The service provider. Methods FormatKey(string) Formats the unformatted TOTP key by inserting spaces for readability. public string FormatKey(string unformattedKey) Parameters unformattedKey string The unformatted TOTP key. Returns string The formatted TOTP key with spaces inserted. GenerateKeyAsync(User) Generates a new TOTP key for the specified user. public Task<string> GenerateKeyAsync(User user) Parameters user User The user for whom to generate the TOTP key. Returns Task<string> A task representing the asynchronous operation. The task result contains the generated TOTP key. GenerateQrCodeUriAsync(User) Generates a QR code URI for the specified user that can be used to configure an authenticator app. public Task<string> GenerateQrCodeUriAsync(User user) Parameters user User The user for whom to generate the QR code URI. Returns Task<string> A task representing the asynchronous operation. The task result contains the QR code URI. Exceptions InvalidOperationException Thrown if no authenticator key is found for the user. ValidateAsync(string, User) Validates the provided TOTP code for the specified user. public Task<bool> ValidateAsync(string code, User user) Parameters code string The TOTP code to validate. user User The user for whom to validate the TOTP code. Returns Task<bool> A task representing the asynchronous operation. The task result indicates whether the code is valid."
  },
  "api/Application.Providers.RandomStringProvider.html": {
    "href": "api/Application.Providers.RandomStringProvider.html",
    "title": "Class RandomStringProvider | Authentica",
    "keywords": "Class RandomStringProvider Namespace Application.Providers Assembly Authentica.Service.Identity.dll Represents an implementation for a random string generator. public sealed class RandomStringProvider : IRandomStringProvider Inheritance object RandomStringProvider Implements IRandomStringProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GenerateAlphanumeric(int) Generates a random string of specified length. public string GenerateAlphanumeric(int length = 256) Parameters length int Length of the random string to generate. Default is 256. Returns string A randomly generated alphanumeric string."
  },
  "api/Application.Providers.ScopeProvider.html": {
    "href": "api/Application.Providers.ScopeProvider.html",
    "title": "Class ScopeProvider | Authentica",
    "keywords": "Class ScopeProvider Namespace Application.Providers Assembly Authentica.Service.Identity.dll Provides functionality to parse JWT scope strings into lists of individual scopes. public sealed class ScopeProvider : IScopeProvider Inheritance object ScopeProvider Implements IScopeProvider Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods ParseScopes(string) Parses a space-delimited scope string into a list of individual scopes. public IList<string> ParseScopes(string scopeString) Parameters scopeString string The space-delimited string of scopes to parse. Returns IList<string> An IList<string> containing individual scopes. Returns an empty list if the input is null, empty, or whitespace."
  },
  "api/Application.Providers.TimerProvider.html": {
    "href": "api/Application.Providers.TimerProvider.html",
    "title": "Class TimerProvider | Authentica",
    "keywords": "Class TimerProvider Namespace Application.Providers Assembly Authentica.Service.Identity.dll Provides a timer that ticks at regular intervals and allows waiting for the next tick. public sealed class TimerProvider : ITimer Inheritance object TimerProvider Implements ITimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors TimerProvider() Initializes a new instance of the TimerProvider class. The timer is set to tick every day. public TimerProvider() Methods ~TimerProvider() Finalizer that disposes of the resources. protected ~TimerProvider() WaitForNextTickAsync(CancellationToken) Waits asynchronously for the next tick of the timer. public Task<bool> WaitForNextTickAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken A cancellation token that can be used to cancel the wait. Returns Task<bool> A task that represents the asynchronous wait operation. The task result is true if the next tick occurred; false if the wait was canceled."
  },
  "api/Application.Providers.html": {
    "href": "api/Application.Providers.html",
    "title": "Namespace Application.Providers | Authentica",
    "keywords": "Namespace Application.Providers Classes JsonWebTokenProvider Represents a service for managing JSON Web Tokens. This includes creating, refreshing and validating JSON Web Tokens. MultiFactorTotpProvider Provides functionality for generating and validating Time-based One-Time Password (TOTP) keys for mfa. RandomStringProvider Represents an implementation for a random string generator. ScopeProvider Provides functionality to parse JWT scope strings into lists of individual scopes. TimerProvider Provides a timer that ticks at regular intervals and allows waiting for the next tick."
  },
  "api/Application.Publishers.EmailPublisher.html": {
    "href": "api/Application.Publishers.EmailPublisher.html",
    "title": "Class EmailPublisher | Authentica",
    "keywords": "Class EmailPublisher Namespace Application.Publishers Assembly Authentica.Service.Identity.dll Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and mfa codes. public sealed class EmailPublisher : IEmailPublisher Inheritance object EmailPublisher Implements IEmailPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EmailPublisher(IServiceProvider) Initalizes a new instance of EmailPublisher public EmailPublisher(IServiceProvider serviceProvider) Parameters serviceProvider IServiceProvider Properties ServiceProvider The application's service provider public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. public Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/Application.Publishers.NullEmailPublisher.html": {
    "href": "api/Application.Publishers.NullEmailPublisher.html",
    "title": "Class NullEmailPublisher | Authentica",
    "keywords": "Class NullEmailPublisher Namespace Application.Publishers Assembly Authentica.Service.Identity.dll This is a null implementation of IEmailPublisher Allows for the system to be tested without needing a message queue available. This will mean that the system will no longer be able to send emails for registration confirmation, mfa authentication and forgot password, but this is only when the Feature Flag for RabbitMq or Azure Service Bus is disabled. public class NullEmailPublisher : IEmailPublisher Inheritance object NullEmailPublisher Implements IEmailPublisher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Publish(EmailMessage, CancellationToken) Publishes a message to the message queue. [ExcludeFromCodeCoverage] public Task Publish(EmailMessage emailMessage, CancellationToken cancellationToken) Parameters emailMessage EmailMessage The object which encapsulates the email message. cancellationToken CancellationToken The cancellation token which propigates notification that the operation will be cancelled. Returns Task An asyncronous operation of type Task"
  },
  "api/Application.Publishers.html": {
    "href": "api/Application.Publishers.html",
    "title": "Namespace Application.Publishers | Authentica",
    "keywords": "Namespace Application.Publishers Classes EmailPublisher Publishes a message to the message queue, for confirmation emails, password reset codes, password reset links and mfa codes. NullEmailPublisher This is a null implementation of IEmailPublisher Allows for the system to be tested without needing a message queue available. This will mean that the system will no longer be able to send emails for registration confirmation, mfa authentication and forgot password, but this is only when the Feature Flag for RabbitMq or Azure Service Bus is disabled."
  },
  "api/Application.Redactors.ActivityDataRedactor.ReferenceEqualityComparer.html": {
    "href": "api/Application.Redactors.ActivityDataRedactor.ReferenceEqualityComparer.html",
    "title": "Class ActivityDataRedactor.ReferenceEqualityComparer | Authentica",
    "keywords": "Class ActivityDataRedactor.ReferenceEqualityComparer Namespace Application.Redactors Assembly Authentica.Service.Identity.dll Compares objects by reference equality. public class ActivityDataRedactor.ReferenceEqualityComparer : IEqualityComparer<object> Inheritance object ActivityDataRedactor.ReferenceEqualityComparer Implements IEqualityComparer<object> Inherited Members object.Equals(object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Equals(object?, object?) Determines whether the specified objects are equal. public bool Equals(object? x, object? y) Parameters x object The first object to compare. y object The second object to compare. Returns bool true if the specified objects are equal; otherwise, false. GetHashCode(object) Returns a hash code for the specified object. public int GetHashCode(object obj) Parameters obj object The object for which a hash code is to be returned. Returns int A hash code for the specified object."
  },
  "api/Application.Redactors.ActivityDataRedactor.html": {
    "href": "api/Application.Redactors.ActivityDataRedactor.html",
    "title": "Class ActivityDataRedactor | Authentica",
    "keywords": "Class ActivityDataRedactor Namespace Application.Redactors Assembly Authentica.Service.Identity.dll Provides functionality to redact sensitive data from objects. public static class ActivityDataRedactor Inheritance object ActivityDataRedactor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RedactSensitiveData<T>(T) Redacts sensitive data from the given object. public static T RedactSensitiveData<T>(T obj) where T : class Parameters obj T The object to redact. Returns T The redacted object. Type Parameters T The type of the object to redact."
  },
  "api/Application.Redactors.html": {
    "href": "api/Application.Redactors.html",
    "title": "Namespace Application.Redactors | Authentica",
    "keywords": "Namespace Application.Redactors Classes ActivityDataRedactor Provides functionality to redact sensitive data from objects. ActivityDataRedactor.ReferenceEqualityComparer Compares objects by reference equality."
  },
  "api/Application.Results.ApplicationStoreResult.html": {
    "href": "api/Application.Results.ApplicationStoreResult.html",
    "title": "Class ApplicationStoreResult | Authentica",
    "keywords": "Class ApplicationStoreResult Namespace Application.Results Assembly Authentica.Service.Identity.dll Represents the result of an operation performed in the application store context. public sealed class ApplicationStoreResult : BaseResult<ApplicationStoreResult> Inheritance object BaseResult<ApplicationStoreResult> ApplicationStoreResult Inherited Members BaseResult<ApplicationStoreResult>.Errors BaseResult<ApplicationStoreResult>.Succeeded BaseResult<ApplicationStoreResult>.Failed(params IdentityError[]) BaseResult<ApplicationStoreResult>.Success() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Secret Gets or sets the secret associated with the application. public string? Secret { get; } Property Value string Methods Success(string) Creates a successful result with the specified app. public static ApplicationStoreResult Success(string secret) Parameters secret string The secret to include in the result. Returns ApplicationStoreResult A successful ApplicationStoreResult with the specified user."
  },
  "api/Application.Results.BaseResult-1.html": {
    "href": "api/Application.Results.BaseResult-1.html",
    "title": "Class BaseResult<TResult> | Authentica",
    "keywords": "Class BaseResult<TResult> Namespace Application.Results Assembly Authentica.Service.Identity.dll Represents the result of an operation, indicating success or failure and any associated errors. public abstract class BaseResult<TResult> where TResult : BaseResult<TResult>, new() Type Parameters TResult Inheritance object BaseResult<TResult> Derived ApplicationStoreResult SessionStoreResult SharedStoreResult UserStoreResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Errors Gets an enumeration of errors associated with the result of an operation. public IEnumerable<IdentityError> Errors { get; } Property Value IEnumerable<IdentityError> Succeeded Gets a value indicating whether the operation succeeded. public bool Succeeded { get; protected set; } Property Value bool Methods Failed(params IdentityError[]) Creates a new result indicating a failed operation with the specified errors. public static TResult Failed(params IdentityError[] errors) Parameters errors IdentityError[] An array of IdentityError objects representing the errors. Returns TResult A new result indicating a failed operation. Success() Creates a new result indicating the success of an operation. public static TResult Success() Returns TResult A new successful result."
  },
  "api/Application.Results.JwtResult.html": {
    "href": "api/Application.Results.JwtResult.html",
    "title": "Class JwtResult | Authentica",
    "keywords": "Class JwtResult Namespace Application.Results Assembly Authentica.Service.Identity.dll Represents the result of a JWT (JSON Web Token) operation. public sealed class JwtResult Inheritance object JwtResult Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Error Gets or sets an optional error message in case the JWT operation encountered an error. public string? Error { get; set; } Property Value string Success Gets or sets a value indicating whether the JWT operation was successful. public bool Success { get; set; } Property Value bool Token Gets or sets the JWT (JSON Web Token) string if the operation was successful. public string Token { get; set; } Property Value string"
  },
  "api/Application.Results.SessionStoreResult.html": {
    "href": "api/Application.Results.SessionStoreResult.html",
    "title": "Class SessionStoreResult | Authentica",
    "keywords": "Class SessionStoreResult Namespace Application.Results Assembly Authentica.Service.Identity.dll Represents the result of a session store operation. public sealed class SessionStoreResult : BaseResult<SessionStoreResult> Inheritance object BaseResult<SessionStoreResult> SessionStoreResult Inherited Members BaseResult<SessionStoreResult>.Errors BaseResult<SessionStoreResult>.Succeeded BaseResult<SessionStoreResult>.Failed(params IdentityError[]) BaseResult<SessionStoreResult>.Success() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Application.Results.SharedStoreResult.html": {
    "href": "api/Application.Results.SharedStoreResult.html",
    "title": "Class SharedStoreResult | Authentica",
    "keywords": "Class SharedStoreResult Namespace Application.Results Assembly Authentica.Service.Identity.dll Represents the result of an operation on a shared store. public sealed class SharedStoreResult : BaseResult<SharedStoreResult> Inheritance object BaseResult<SharedStoreResult> SharedStoreResult Inherited Members BaseResult<SharedStoreResult>.Errors BaseResult<SharedStoreResult>.Succeeded BaseResult<SharedStoreResult>.Failed(params IdentityError[]) BaseResult<SharedStoreResult>.Success() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Application.Results.UserStoreResult.html": {
    "href": "api/Application.Results.UserStoreResult.html",
    "title": "Class UserStoreResult | Authentica",
    "keywords": "Class UserStoreResult Namespace Application.Results Assembly Authentica.Service.Identity.dll Represents the result of a user store operation. public sealed class UserStoreResult : BaseResult<UserStoreResult> Inheritance object BaseResult<UserStoreResult> UserStoreResult Inherited Members BaseResult<UserStoreResult>.Errors BaseResult<UserStoreResult>.Succeeded BaseResult<UserStoreResult>.Failed(params IdentityError[]) BaseResult<UserStoreResult>.Success() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties User Gets the user associated with the result. public User User { get; } Property Value User Methods Success(User) Creates a successful result with the specified user. public static UserStoreResult Success(User user) Parameters user User The user to include in the result. Returns UserStoreResult A successful UserStoreResult with the specified user."
  },
  "api/Application.Results.html": {
    "href": "api/Application.Results.html",
    "title": "Namespace Application.Results | Authentica",
    "keywords": "Namespace Application.Results Classes ApplicationStoreResult Represents the result of an operation performed in the application store context. BaseResult<TResult> Represents the result of an operation, indicating success or failure and any associated errors. JwtResult Represents the result of a JWT (JSON Web Token) operation. SessionStoreResult Represents the result of a session store operation. SharedStoreResult Represents the result of an operation on a shared store. UserStoreResult Represents the result of a user store operation."
  },
  "api/Application.Stores.ActivityReadStore.html": {
    "href": "api/Application.Stores.ActivityReadStore.html",
    "title": "Class ActivityReadStore | Authentica",
    "keywords": "Class ActivityReadStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides write operations to the event log. public sealed class ActivityReadStore : StoreBase, IActivityReadStore Inheritance object StoreBase ActivityReadStore Implements IActivityReadStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ActivityReadStore(IServiceProvider) Initializes a new instance of the ActivityReadStore class. public ActivityReadStore(IServiceProvider services) Parameters services IServiceProvider The service provider to retrieve required services for the write store operations. Remarks This constructor initializes the ActivityReadStore instance by calling the base constructor with the provided service provider. Methods GetActivities() Retrieves a list of all activities. public ImmutableList<Activity> GetActivities() Returns ImmutableList<Activity> An immutable list of activities. GetActivitiesByDateTimeStamp(DateTime) Retrieves a list of activities that occurred at or after the specified timestamp. public ImmutableList<Activity> GetActivitiesByDateTimeStamp(DateTime timeStamp) Parameters timeStamp DateTime The timestamp to filter activities. Returns ImmutableList<Activity> An immutable list of activities that match the timestamp criteria."
  },
  "api/Application.Stores.ActivityWriteStore.html": {
    "href": "api/Application.Stores.ActivityWriteStore.html",
    "title": "Class ActivityWriteStore | Authentica",
    "keywords": "Class ActivityWriteStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides write operations to the activity log. public sealed class ActivityWriteStore : StoreBase, IActivityWriteStore Inheritance object StoreBase ActivityWriteStore Implements IActivityWriteStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ActivityWriteStore(IServiceProvider) Initializes a new instance of the ActivityReadStore class. public ActivityWriteStore(IServiceProvider services) Parameters services IServiceProvider The service provider to retrieve required services for the write store operations. Remarks This constructor initializes the ActivityReadStore instance by calling the base constructor with the provided service provider. Methods SaveActivityAsync<T>(T) Saves an activity asynchronously. public Task SaveActivityAsync<T>(T activity) where T : class Parameters activity T The activity to save. Returns Task A task that represents the asynchronous operation. Type Parameters T The type of the activity."
  },
  "api/Application.Stores.ApplicationReadStore.html": {
    "href": "api/Application.Stores.ApplicationReadStore.html",
    "title": "Class ApplicationReadStore | Authentica",
    "keywords": "Class ApplicationReadStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides read operations for application-related data. public sealed class ApplicationReadStore : StoreBase, IApplicationReadStore Inheritance object StoreBase ApplicationReadStore Implements IApplicationReadStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationReadStore(IServiceProvider) Initializes a new instance of the ApplicationReadStore class. public ApplicationReadStore(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods CheckApplicationExistsAsync(string, CancellationToken) Checks if an application with the specified name exists. public Task<bool> CheckApplicationExistsAsync(string applicationName, CancellationToken cancellationToken = default) Parameters applicationName string The name of the application to check. cancellationToken CancellationToken The cancellation token to observe. Returns Task<bool> A task that represents the asynchronous operation, containing a boolean indicating if the application exists. GetAllClientApplicationsByUserIdAsync(string, CancellationToken) Retrieves all client applications associated with a given user ID. public Task<IEnumerable<ClientApplication>> GetAllClientApplicationsByUserIdAsync(string userId, CancellationToken cancellationToken = default) Parameters userId string The user ID to check for association. cancellationToken CancellationToken A cancellation token to observe while waiting for the task to complete. Returns Task<IEnumerable<ClientApplication>> A list of client applications associated with the specified user ID. GetClientApplicationByClientIdAndCallbackUri(ApplicationDto<AuthorizeRequest>, CancellationToken) Retrieves a client application by its client ID specified in the provided DTO. public Task<ClientApplication?> GetClientApplicationByClientIdAndCallbackUri(ApplicationDto<AuthorizeRequest> dto, CancellationToken cancellationToken) Parameters dto ApplicationDto<AuthorizeRequest> The data transfer object containing the authorization request and claims principal. cancellationToken CancellationToken The cancellation token to cancel the operation. Returns Task<ClientApplication> A task that represents the asynchronous operation, containing the client application if found; otherwise, null. GetClientApplicationByNameAndUserIdAsync(string, string, CancellationToken) Retrieves a client application by its name and associated user ID. public Task<ClientApplication?> GetClientApplicationByNameAndUserIdAsync(string name, string userId, CancellationToken cancellationToken = default) Parameters name string The name of the client application to retrieve. userId string The user ID to check for association. cancellationToken CancellationToken A cancellation token to observe while waiting for the task to complete. Returns Task<ClientApplication> The client application if found, otherwise null."
  },
  "api/Application.Stores.ApplicationWriteStore.html": {
    "href": "api/Application.Stores.ApplicationWriteStore.html",
    "title": "Class ApplicationWriteStore | Authentica",
    "keywords": "Class ApplicationWriteStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Handles write operations related to creating new client applications and updating existing client applications. public class ApplicationWriteStore : StoreBase, IApplicationWriteStore Inheritance object StoreBase ApplicationWriteStore Implements IApplicationWriteStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationWriteStore(IServiceProvider) Initializes a new instance of the ApplicationWriteStore class. public ApplicationWriteStore(IServiceProvider services) Parameters services IServiceProvider The service provider to retrieve required services for the write store operations. Remarks This constructor initializes the ApplicationWriteStore instance by calling the base constructor with the provided service provider. Methods CreateClientApplicationAsync(ApplicationDto<CreateApplicationRequest>, CancellationToken) Adds a new client application to the database and associates it with a user. public Task<ApplicationStoreResult> CreateClientApplicationAsync(ApplicationDto<CreateApplicationRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<CreateApplicationRequest> A data transfer object containing the information for the client application and the user context. cancellationToken CancellationToken A token to cancel the operation if needed. The default value is None. Returns Task<ApplicationStoreResult> An ApplicationStoreResult representing the outcome of the operation. It includes the newly created user if successful. Remarks This method performs the following steps: Retrieves the user's email from the claims principal contained in the dto. Finds the user by their email using the UserManager<TUser>. Creates a new ClientApplication and UserClientApplication with the provided data. Inserts the new client application and user-client association into the database. Uses a transaction to ensure that both insert operations are atomic. Rolls back the transaction if an exception occurs, and returns an error result. Exceptions ArgumentNullException Thrown if dto is null. SoftDeleteApplicationAsync(ApplicationDto<DeleteApplicationByNameRequest>, CancellationToken) Soft deletes a client application by marking it as deleted in the database. public Task<ApplicationStoreResult> SoftDeleteApplicationAsync(ApplicationDto<DeleteApplicationByNameRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<DeleteApplicationByNameRequest> The data transfer object containing the application name to be deleted and the claims principal of the user performing the action. cancellationToken CancellationToken A token that can be used to cancel the asynchronous operation. The default value is None. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. The task result contains an ApplicationStoreResult which indicates the success or failure of the operation. Exceptions ArgumentNullException Thrown when the dto is null. Exception Thrown when an error occurs during the process of soft deleting the client application. UpdateApplicationAsync(ApplicationDto<UpdateApplicationByNameRequest>, CancellationToken) Asynchronously updates an existing client application based on the provided data transfer object (DTO). public Task<ApplicationStoreResult> UpdateApplicationAsync(ApplicationDto<UpdateApplicationByNameRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<UpdateApplicationByNameRequest> The data transfer object containing the details of the client application to be updated. cancellationToken CancellationToken A token that can be used to cancel the asynchronous operation. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. The task result contains an ApplicationStoreResult which indicates the success or failure of the operation. Exceptions ArgumentNullException Thrown when the dto is null. Exception Thrown when an error occurs during the process of updating the client application. UpdateClientSecretAsync(ApplicationDto<CreateApplicationSecretRequest>, CancellationToken) Generates a new client secret and updates the client application with the hashed secret. public Task<ApplicationStoreResult> UpdateClientSecretAsync(ApplicationDto<CreateApplicationSecretRequest> dto, CancellationToken cancellationToken = default) Parameters dto ApplicationDto<CreateApplicationSecretRequest> The ID of the client application to update. cancellationToken CancellationToken A token to cancel the operation if needed. The default value is None. Returns Task<ApplicationStoreResult> A task that represents the asynchronous operation. Exceptions ArgumentNullException Thrown if dto is null or empty."
  },
  "api/Application.Stores.SessionReadStore.html": {
    "href": "api/Application.Stores.SessionReadStore.html",
    "title": "Class SessionReadStore | Authentica",
    "keywords": "Class SessionReadStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides implementation for reading session data from a persistent store. public sealed class SessionReadStore : StoreBase, ISessionReadStore Inheritance object StoreBase SessionReadStore Implements ISessionReadStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SessionReadStore(IServiceProvider) Initializes a new instance of the SessionWriteStore class. public SessionReadStore(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods GetAsync(string) Retrieves all sessions from the store asynchronously based on the user id. public Task<IList<Session>> GetAsync(string UserId) Parameters UserId string The user's unique identifier. Returns Task<IList<Session>> A task that represents the asynchronous operation. The task result contains the retrieved session, or null if not found. GetByIdAsync(string) Retrieves a session from the store based on the session id. public Task<Session> GetByIdAsync(string SessionId) Parameters SessionId string The session unique identifier. Returns Task<Session> A task that represents the asynchronous operation."
  },
  "api/Application.Stores.SessionWriteStore.html": {
    "href": "api/Application.Stores.SessionWriteStore.html",
    "title": "Class SessionWriteStore | Authentica",
    "keywords": "Class SessionWriteStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides implementation for writing session data to a persistent store. public sealed class SessionWriteStore : StoreBase, ISessionWriteStore Inheritance object StoreBase SessionWriteStore Implements ISessionWriteStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SessionWriteStore(IServiceProvider) Initializes a new instance of the SessionWriteStore class. public SessionWriteStore(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Methods CreateAsync(Session) Creates a new session in the store asynchronously. public Task<Session> CreateAsync(Session session) Parameters session Session The session to create. Returns Task<Session> A task that represents the asynchronous operation. The task result contains the created session. DeleteAsync(Session) Soft deletes a session from the store asynchronously. public Task DeleteAsync(Session session) Parameters session Session The session to delete. Returns Task A task that represents the asynchronous operation."
  },
  "api/Application.Stores.SharedStore.html": {
    "href": "api/Application.Stores.SharedStore.html",
    "title": "Class SharedStore | Authentica",
    "keywords": "Class SharedStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Represents a shared store that manages entities. public class SharedStore : StoreBase, ISharedStore Inheritance object StoreBase SharedStore Implements ISharedStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SharedStore(IServiceProvider) Initializes a new instance of the SharedStore class. public SharedStore(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve services. Methods PurgeEntriesAsync<TEntity>(CancellationToken) Purges entries of type TEntity that were soft-deleted more than seven years ago. public Task<SharedStoreResult> PurgeEntriesAsync<TEntity>(CancellationToken cancellationToken) where TEntity : class, IEntityDeletionStatus<string> Parameters cancellationToken CancellationToken A token to monitor for cancellation requests. Returns Task<SharedStoreResult> A SharedStoreResult indicating the result of the purge operation. Type Parameters TEntity The type of the entity. Exceptions OperationCanceledException Thrown if the operation is cancelled."
  },
  "api/Application.Stores.StoreBase.html": {
    "href": "api/Application.Stores.StoreBase.html",
    "title": "Class StoreBase | Authentica",
    "keywords": "Class StoreBase Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides a base class for data stores with common service dependencies. public abstract class StoreBase Inheritance object StoreBase Derived ActivityReadStore ActivityWriteStore ApplicationReadStore ApplicationWriteStore SessionReadStore SessionWriteStore SharedStore UserReadStore UserWriteStore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors StoreBase(IServiceProvider) Initializes a new instance of the StoreBase class. protected StoreBase(IServiceProvider services) Parameters services IServiceProvider The service provider used to resolve dependencies. Properties ApplicationReadStore Gets the IApplicationReadStore instance from the service provider. This store provides read operations for application-related data. public IApplicationReadStore ApplicationReadStore { get; } Property Value IApplicationReadStore DbContext Gets the AppDbContext instance from the service provider. This context is used to interact with the application's database. public AppDbContext DbContext { get; } Property Value AppDbContext HttpContext Gets the HttpContext instance from the service provider. public HttpContext HttpContext { get; } Property Value HttpContext Services Gets the service provider used to resolve dependencies. public IServiceProvider Services { get; } Property Value IServiceProvider UserManager Gets the UserManager<TUser> instance from the service provider. This manager is used to manage user-related operations. public UserManager<User> UserManager { get; } Property Value UserManager<User> UserReadStore Gets the IUserReadStore instance from the service provider. This store provides read operations for user-related data. public IUserReadStore UserReadStore { get; } Property Value IUserReadStore"
  },
  "api/Application.Stores.UserReadStore.html": {
    "href": "api/Application.Stores.UserReadStore.html",
    "title": "Class UserReadStore | Authentica",
    "keywords": "Class UserReadStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides read operations for user-related data. public class UserReadStore : StoreBase, IUserReadStore Inheritance object StoreBase UserReadStore Implements IUserReadStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserReadStore(IServiceProvider) Initializes a new instance of the UserReadStore class. public UserReadStore(IServiceProvider services) Parameters services IServiceProvider The service provider for accessing application services. Methods GetAllUsersAsync() Asynchronously retrieves the list of users in the database public Task<IList<User>> GetAllUsersAsync() Returns Task<IList<User>> A task that represents the asynchronous operation. The task result contains a list of all users. GetUserByEmailAsync(ClaimsPrincipal, CancellationToken) Retrieves a user by their email from the given claims principal. public Task<UserStoreResult> GetUserByEmailAsync(ClaimsPrincipal claimsPrincipal, CancellationToken cancellationToken = default) Parameters claimsPrincipal ClaimsPrincipal The claims principal containing the user's email claim. cancellationToken CancellationToken The cancellation token to observe. Returns Task<UserStoreResult> A task that represents the asynchronous operation, containing the result of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. GetUserByEmailAsync(string) Asynchronously retrieves a user by their email address. public Task<UserStoreResult> GetUserByEmailAsync(string email) Parameters email string The email address of the user to retrieve. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. GetUserByIdAsync(string) Asynchronously retrieves a user by their id. public Task<UserStoreResult> GetUserByIdAsync(string Id) Parameters Id string The unique identifier of the user. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. GetUserRolesAsync(string) Asynchronously retrieves the list of roles associated with a specified user. public Task<IList<string>> GetUserRolesAsync(string email) Parameters email string The email of the user for whom to retrieve roles. Returns Task<IList<string>> A task that represents the asynchronous operation. The task result contains a list of role names associated with the user."
  },
  "api/Application.Stores.UserWriteStore.html": {
    "href": "api/Application.Stores.UserWriteStore.html",
    "title": "Class UserWriteStore | Authentica",
    "keywords": "Class UserWriteStore Namespace Application.Stores Assembly Authentica.Service.Identity.dll Provides write operations for user-related data. public sealed class UserWriteStore : StoreBase, IUserWriteStore Inheritance object StoreBase UserWriteStore Implements IUserWriteStore Inherited Members StoreBase.Services StoreBase.DbContext StoreBase.HttpContext StoreBase.UserManager StoreBase.ApplicationReadStore StoreBase.UserReadStore object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors UserWriteStore(IServiceProvider) Initializes a new instance of the UserWriteStore class. public UserWriteStore(IServiceProvider services) Parameters services IServiceProvider The service provider to be used by the store. Methods ConfirmEmailAsync(User, string) Asynchronously confirms a user's email address using a confirmation token. public Task<UserStoreResult> ConfirmEmailAsync(User user, string token) Parameters user User The user whose email address is being confirmed. token string The email confirmation token. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions ArgumentNullException Thrown if user or token is null. Exception Thrown if an unexpected error occurs during the operation. CreateUserAsync(RegisterRequest, CancellationToken) Asynchronously creates a new user based on the provided registration request. public Task<UserStoreResult> CreateUserAsync(RegisterRequest request, CancellationToken cancellationToken) Parameters request RegisterRequest The registration request containing the user's details for creation. cancellationToken CancellationToken A cancellation token to observe while waiting for the task to complete. Returns Task<UserStoreResult> A task that represents the asynchronous operation. The task result is a UserStoreResult indicating the success or failure of the user creation operation. Exceptions ArgumentNullException Thrown when request is null. OperationCanceledException Thrown when the operation is canceled by the cancellationToken. RedeemMultiFactorRecoveryCodeAsync(User, string) Asynchronously redeems a mfa recovery code for a user. public Task<UserStoreResult> RedeemMultiFactorRecoveryCodeAsync(User user, string code) Parameters user User The user attempting to redeem the recovery code. code string The mfa recovery code. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. ResetPasswordAsync(User, string, string) Asynchronously resets a user's password using a reset token and a new password. public Task<UserStoreResult> ResetPasswordAsync(User user, string token, string newPassword) Parameters user User The user whose password is being reset. token string The password reset token. newPassword string The new password for the user. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions ArgumentException Thrown if token is null or whitespace. SoftDeleteUserAsync(ClaimsPrincipal, CancellationToken) Soft deletes a user by marking the user as deleted in the data store. public Task<UserStoreResult> SoftDeleteUserAsync(ClaimsPrincipal user, CancellationToken cancellationToken = default) Parameters user ClaimsPrincipal The user to be soft deleted. cancellationToken CancellationToken The cancellation token. Returns Task<UserStoreResult> A task that represents the asynchronous operation. The task result contains a UserStoreResult indicating the success or failure of the operation. UpdateEmailAsync(User, string, string) Asynchronously updates a user's email address using a confirmation token. public Task<UserStoreResult> UpdateEmailAsync(User user, string newEmail, string token) Parameters user User The user whose email address is being updated. newEmail string The new email address to set for the user. token string The email confirmation token. Returns Task<UserStoreResult> A Task<TResult> representing the asynchronous operation. The task result contains a UserStoreResult indicating the outcome of the operation. Exceptions Exception Thrown if an unexpected error occurs during the operation. UpdatePhoneNumberAsync(User, string, string) Updates the phone number of the specified user. public Task<UserStoreResult> UpdatePhoneNumberAsync(User user, string phoneNumber, string token) Parameters user User The user whose phone number needs to be updated. phoneNumber string The new phone number to be set for the user. token string The token used to verify the phone number change. Returns Task<UserStoreResult> A task that represents the asynchronous operation. The task result contains a UserStoreResult indicating the result of the operation."
  },
  "api/Application.Stores.html": {
    "href": "api/Application.Stores.html",
    "title": "Namespace Application.Stores | Authentica",
    "keywords": "Namespace Application.Stores Classes ActivityReadStore Provides write operations to the event log. ActivityWriteStore Provides write operations to the activity log. ApplicationReadStore Provides read operations for application-related data. ApplicationWriteStore Handles write operations related to creating new client applications and updating existing client applications. SessionReadStore Provides implementation for reading session data from a persistent store. SessionWriteStore Provides implementation for writing session data to a persistent store. SharedStore Represents a shared store that manages entities. StoreBase Provides a base class for data stores with common service dependencies. UserReadStore Provides read operations for user-related data. UserWriteStore Provides write operations for user-related data."
  },
  "api/Application.Validators.AddressValidator.html": {
    "href": "api/Application.Validators.AddressValidator.html",
    "title": "Class AddressValidator | Authentica",
    "keywords": "Class AddressValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for Address. public class AddressValidator : AbstractValidator<Address>, IValidator<Address>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<Address> AddressValidator Implements IValidator<Address> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<Address>.Validate(Address) AbstractValidator<Address>.ValidateAsync(Address, CancellationToken) AbstractValidator<Address>.Validate(ValidationContext<Address>) AbstractValidator<Address>.ValidateAsync(ValidationContext<Address>, CancellationToken) AbstractValidator<Address>.CreateDescriptor() AbstractValidator<Address>.RuleFor<TProperty>(Expression<Func<Address, TProperty>>) AbstractValidator<Address>.Transform<TProperty, TTransformed>(Expression<Func<Address, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<Address>.Transform<TProperty, TTransformed>(Expression<Func<Address, TProperty>>, Func<Address, TProperty, TTransformed>) AbstractValidator<Address>.RuleForEach<TElement>(Expression<Func<Address, IEnumerable<TElement>>>) AbstractValidator<Address>.TransformForEach<TElement, TTransformed>(Expression<Func<Address, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<Address>.TransformForEach<TElement, TTransformed>(Expression<Func<Address, IEnumerable<TElement>>>, Func<Address, TElement, TTransformed>) AbstractValidator<Address>.RuleSet(string, Action) AbstractValidator<Address>.When(Func<Address, bool>, Action) AbstractValidator<Address>.When(Func<Address, ValidationContext<Address>, bool>, Action) AbstractValidator<Address>.Unless(Func<Address, bool>, Action) AbstractValidator<Address>.Unless(Func<Address, ValidationContext<Address>, bool>, Action) AbstractValidator<Address>.WhenAsync(Func<Address, CancellationToken, Task<bool>>, Action) AbstractValidator<Address>.WhenAsync(Func<Address, ValidationContext<Address>, CancellationToken, Task<bool>>, Action) AbstractValidator<Address>.UnlessAsync(Func<Address, CancellationToken, Task<bool>>, Action) AbstractValidator<Address>.UnlessAsync(Func<Address, ValidationContext<Address>, CancellationToken, Task<bool>>, Action) AbstractValidator<Address>.Include(IValidator<Address>) AbstractValidator<Address>.Include<TValidator>(Func<Address, TValidator>) AbstractValidator<Address>.GetEnumerator() AbstractValidator<Address>.EnsureInstanceNotNull(object) AbstractValidator<Address>.PreValidate(ValidationContext<Address>, ValidationResult) AbstractValidator<Address>.RaiseValidationException(ValidationContext<Address>, ValidationResult) AbstractValidator<Address>.OnRuleAdded(IValidationRule<Address>) AbstractValidator<Address>.CascadeMode AbstractValidator<Address>.ClassLevelCascadeMode AbstractValidator<Address>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AddressValidator() Initializes a new instance of AddressValidator. public AddressValidator()"
  },
  "api/Application.Validators.AuthorizeRequestValidator.html": {
    "href": "api/Application.Validators.AuthorizeRequestValidator.html",
    "title": "Class AuthorizeRequestValidator | Authentica",
    "keywords": "Class AuthorizeRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for AuthorizeRequest. public class AuthorizeRequestValidator : AbstractValidator<AuthorizeRequest>, IValidator<AuthorizeRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<AuthorizeRequest> AuthorizeRequestValidator Implements IValidator<AuthorizeRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<AuthorizeRequest>.Validate(AuthorizeRequest) AbstractValidator<AuthorizeRequest>.ValidateAsync(AuthorizeRequest, CancellationToken) AbstractValidator<AuthorizeRequest>.Validate(ValidationContext<AuthorizeRequest>) AbstractValidator<AuthorizeRequest>.ValidateAsync(ValidationContext<AuthorizeRequest>, CancellationToken) AbstractValidator<AuthorizeRequest>.CreateDescriptor() AbstractValidator<AuthorizeRequest>.RuleFor<TProperty>(Expression<Func<AuthorizeRequest, TProperty>>) AbstractValidator<AuthorizeRequest>.Transform<TProperty, TTransformed>(Expression<Func<AuthorizeRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<AuthorizeRequest>.Transform<TProperty, TTransformed>(Expression<Func<AuthorizeRequest, TProperty>>, Func<AuthorizeRequest, TProperty, TTransformed>) AbstractValidator<AuthorizeRequest>.RuleForEach<TElement>(Expression<Func<AuthorizeRequest, IEnumerable<TElement>>>) AbstractValidator<AuthorizeRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<AuthorizeRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<AuthorizeRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<AuthorizeRequest, IEnumerable<TElement>>>, Func<AuthorizeRequest, TElement, TTransformed>) AbstractValidator<AuthorizeRequest>.RuleSet(string, Action) AbstractValidator<AuthorizeRequest>.When(Func<AuthorizeRequest, bool>, Action) AbstractValidator<AuthorizeRequest>.When(Func<AuthorizeRequest, ValidationContext<AuthorizeRequest>, bool>, Action) AbstractValidator<AuthorizeRequest>.Unless(Func<AuthorizeRequest, bool>, Action) AbstractValidator<AuthorizeRequest>.Unless(Func<AuthorizeRequest, ValidationContext<AuthorizeRequest>, bool>, Action) AbstractValidator<AuthorizeRequest>.WhenAsync(Func<AuthorizeRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<AuthorizeRequest>.WhenAsync(Func<AuthorizeRequest, ValidationContext<AuthorizeRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<AuthorizeRequest>.UnlessAsync(Func<AuthorizeRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<AuthorizeRequest>.UnlessAsync(Func<AuthorizeRequest, ValidationContext<AuthorizeRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<AuthorizeRequest>.Include(IValidator<AuthorizeRequest>) AbstractValidator<AuthorizeRequest>.Include<TValidator>(Func<AuthorizeRequest, TValidator>) AbstractValidator<AuthorizeRequest>.GetEnumerator() AbstractValidator<AuthorizeRequest>.EnsureInstanceNotNull(object) AbstractValidator<AuthorizeRequest>.PreValidate(ValidationContext<AuthorizeRequest>, ValidationResult) AbstractValidator<AuthorizeRequest>.RaiseValidationException(ValidationContext<AuthorizeRequest>, ValidationResult) AbstractValidator<AuthorizeRequest>.OnRuleAdded(IValidationRule<AuthorizeRequest>) AbstractValidator<AuthorizeRequest>.CascadeMode AbstractValidator<AuthorizeRequest>.ClassLevelCascadeMode AbstractValidator<AuthorizeRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizeRequestValidator() Initializes a new instance of AuthorizeRequestValidator public AuthorizeRequestValidator()"
  },
  "api/Application.Validators.ConfirmEmailRequestValidator.html": {
    "href": "api/Application.Validators.ConfirmEmailRequestValidator.html",
    "title": "Class ConfirmEmailRequestValidator | Authentica",
    "keywords": "Class ConfirmEmailRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for ConfirmEmailRequest. public class ConfirmEmailRequestValidator : AbstractValidator<ConfirmEmailRequest>, IValidator<ConfirmEmailRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<ConfirmEmailRequest> ConfirmEmailRequestValidator Implements IValidator<ConfirmEmailRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<ConfirmEmailRequest>.Validate(ConfirmEmailRequest) AbstractValidator<ConfirmEmailRequest>.ValidateAsync(ConfirmEmailRequest, CancellationToken) AbstractValidator<ConfirmEmailRequest>.Validate(ValidationContext<ConfirmEmailRequest>) AbstractValidator<ConfirmEmailRequest>.ValidateAsync(ValidationContext<ConfirmEmailRequest>, CancellationToken) AbstractValidator<ConfirmEmailRequest>.CreateDescriptor() AbstractValidator<ConfirmEmailRequest>.RuleFor<TProperty>(Expression<Func<ConfirmEmailRequest, TProperty>>) AbstractValidator<ConfirmEmailRequest>.Transform<TProperty, TTransformed>(Expression<Func<ConfirmEmailRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<ConfirmEmailRequest>.Transform<TProperty, TTransformed>(Expression<Func<ConfirmEmailRequest, TProperty>>, Func<ConfirmEmailRequest, TProperty, TTransformed>) AbstractValidator<ConfirmEmailRequest>.RuleForEach<TElement>(Expression<Func<ConfirmEmailRequest, IEnumerable<TElement>>>) AbstractValidator<ConfirmEmailRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<ConfirmEmailRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<ConfirmEmailRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<ConfirmEmailRequest, IEnumerable<TElement>>>, Func<ConfirmEmailRequest, TElement, TTransformed>) AbstractValidator<ConfirmEmailRequest>.RuleSet(string, Action) AbstractValidator<ConfirmEmailRequest>.When(Func<ConfirmEmailRequest, bool>, Action) AbstractValidator<ConfirmEmailRequest>.When(Func<ConfirmEmailRequest, ValidationContext<ConfirmEmailRequest>, bool>, Action) AbstractValidator<ConfirmEmailRequest>.Unless(Func<ConfirmEmailRequest, bool>, Action) AbstractValidator<ConfirmEmailRequest>.Unless(Func<ConfirmEmailRequest, ValidationContext<ConfirmEmailRequest>, bool>, Action) AbstractValidator<ConfirmEmailRequest>.WhenAsync(Func<ConfirmEmailRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<ConfirmEmailRequest>.WhenAsync(Func<ConfirmEmailRequest, ValidationContext<ConfirmEmailRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<ConfirmEmailRequest>.UnlessAsync(Func<ConfirmEmailRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<ConfirmEmailRequest>.UnlessAsync(Func<ConfirmEmailRequest, ValidationContext<ConfirmEmailRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<ConfirmEmailRequest>.Include(IValidator<ConfirmEmailRequest>) AbstractValidator<ConfirmEmailRequest>.Include<TValidator>(Func<ConfirmEmailRequest, TValidator>) AbstractValidator<ConfirmEmailRequest>.GetEnumerator() AbstractValidator<ConfirmEmailRequest>.EnsureInstanceNotNull(object) AbstractValidator<ConfirmEmailRequest>.PreValidate(ValidationContext<ConfirmEmailRequest>, ValidationResult) AbstractValidator<ConfirmEmailRequest>.RaiseValidationException(ValidationContext<ConfirmEmailRequest>, ValidationResult) AbstractValidator<ConfirmEmailRequest>.OnRuleAdded(IValidationRule<ConfirmEmailRequest>) AbstractValidator<ConfirmEmailRequest>.CascadeMode AbstractValidator<ConfirmEmailRequest>.ClassLevelCascadeMode AbstractValidator<ConfirmEmailRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConfirmEmailRequestValidator() Initializes a new instance of ConfirmEmailRequestValidator. public ConfirmEmailRequestValidator()"
  },
  "api/Application.Validators.CreateApplicationRequestValidator.html": {
    "href": "api/Application.Validators.CreateApplicationRequestValidator.html",
    "title": "Class CreateApplicationRequestValidator | Authentica",
    "keywords": "Class CreateApplicationRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for CreateApplicationRequest. public class CreateApplicationRequestValidator : AbstractValidator<CreateApplicationRequest>, IValidator<CreateApplicationRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<CreateApplicationRequest> CreateApplicationRequestValidator Implements IValidator<CreateApplicationRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<CreateApplicationRequest>.Validate(CreateApplicationRequest) AbstractValidator<CreateApplicationRequest>.ValidateAsync(CreateApplicationRequest, CancellationToken) AbstractValidator<CreateApplicationRequest>.Validate(ValidationContext<CreateApplicationRequest>) AbstractValidator<CreateApplicationRequest>.ValidateAsync(ValidationContext<CreateApplicationRequest>, CancellationToken) AbstractValidator<CreateApplicationRequest>.CreateDescriptor() AbstractValidator<CreateApplicationRequest>.RuleFor<TProperty>(Expression<Func<CreateApplicationRequest, TProperty>>) AbstractValidator<CreateApplicationRequest>.Transform<TProperty, TTransformed>(Expression<Func<CreateApplicationRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<CreateApplicationRequest>.Transform<TProperty, TTransformed>(Expression<Func<CreateApplicationRequest, TProperty>>, Func<CreateApplicationRequest, TProperty, TTransformed>) AbstractValidator<CreateApplicationRequest>.RuleForEach<TElement>(Expression<Func<CreateApplicationRequest, IEnumerable<TElement>>>) AbstractValidator<CreateApplicationRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<CreateApplicationRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<CreateApplicationRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<CreateApplicationRequest, IEnumerable<TElement>>>, Func<CreateApplicationRequest, TElement, TTransformed>) AbstractValidator<CreateApplicationRequest>.RuleSet(string, Action) AbstractValidator<CreateApplicationRequest>.When(Func<CreateApplicationRequest, bool>, Action) AbstractValidator<CreateApplicationRequest>.When(Func<CreateApplicationRequest, ValidationContext<CreateApplicationRequest>, bool>, Action) AbstractValidator<CreateApplicationRequest>.Unless(Func<CreateApplicationRequest, bool>, Action) AbstractValidator<CreateApplicationRequest>.Unless(Func<CreateApplicationRequest, ValidationContext<CreateApplicationRequest>, bool>, Action) AbstractValidator<CreateApplicationRequest>.WhenAsync(Func<CreateApplicationRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationRequest>.WhenAsync(Func<CreateApplicationRequest, ValidationContext<CreateApplicationRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationRequest>.UnlessAsync(Func<CreateApplicationRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationRequest>.UnlessAsync(Func<CreateApplicationRequest, ValidationContext<CreateApplicationRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationRequest>.Include(IValidator<CreateApplicationRequest>) AbstractValidator<CreateApplicationRequest>.Include<TValidator>(Func<CreateApplicationRequest, TValidator>) AbstractValidator<CreateApplicationRequest>.GetEnumerator() AbstractValidator<CreateApplicationRequest>.EnsureInstanceNotNull(object) AbstractValidator<CreateApplicationRequest>.PreValidate(ValidationContext<CreateApplicationRequest>, ValidationResult) AbstractValidator<CreateApplicationRequest>.RaiseValidationException(ValidationContext<CreateApplicationRequest>, ValidationResult) AbstractValidator<CreateApplicationRequest>.OnRuleAdded(IValidationRule<CreateApplicationRequest>) AbstractValidator<CreateApplicationRequest>.CascadeMode AbstractValidator<CreateApplicationRequest>.ClassLevelCascadeMode AbstractValidator<CreateApplicationRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateApplicationRequestValidator() Initializes a new instance of CreateApplicationRequestValidator public CreateApplicationRequestValidator()"
  },
  "api/Application.Validators.CreateApplicationSecretRequestValidator.html": {
    "href": "api/Application.Validators.CreateApplicationSecretRequestValidator.html",
    "title": "Class CreateApplicationSecretRequestValidator | Authentica",
    "keywords": "Class CreateApplicationSecretRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for CreateApplicationSecretRequest. public class CreateApplicationSecretRequestValidator : AbstractValidator<CreateApplicationSecretRequest>, IValidator<CreateApplicationSecretRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<CreateApplicationSecretRequest> CreateApplicationSecretRequestValidator Implements IValidator<CreateApplicationSecretRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<CreateApplicationSecretRequest>.Validate(CreateApplicationSecretRequest) AbstractValidator<CreateApplicationSecretRequest>.ValidateAsync(CreateApplicationSecretRequest, CancellationToken) AbstractValidator<CreateApplicationSecretRequest>.Validate(ValidationContext<CreateApplicationSecretRequest>) AbstractValidator<CreateApplicationSecretRequest>.ValidateAsync(ValidationContext<CreateApplicationSecretRequest>, CancellationToken) AbstractValidator<CreateApplicationSecretRequest>.CreateDescriptor() AbstractValidator<CreateApplicationSecretRequest>.RuleFor<TProperty>(Expression<Func<CreateApplicationSecretRequest, TProperty>>) AbstractValidator<CreateApplicationSecretRequest>.Transform<TProperty, TTransformed>(Expression<Func<CreateApplicationSecretRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<CreateApplicationSecretRequest>.Transform<TProperty, TTransformed>(Expression<Func<CreateApplicationSecretRequest, TProperty>>, Func<CreateApplicationSecretRequest, TProperty, TTransformed>) AbstractValidator<CreateApplicationSecretRequest>.RuleForEach<TElement>(Expression<Func<CreateApplicationSecretRequest, IEnumerable<TElement>>>) AbstractValidator<CreateApplicationSecretRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<CreateApplicationSecretRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<CreateApplicationSecretRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<CreateApplicationSecretRequest, IEnumerable<TElement>>>, Func<CreateApplicationSecretRequest, TElement, TTransformed>) AbstractValidator<CreateApplicationSecretRequest>.RuleSet(string, Action) AbstractValidator<CreateApplicationSecretRequest>.When(Func<CreateApplicationSecretRequest, bool>, Action) AbstractValidator<CreateApplicationSecretRequest>.When(Func<CreateApplicationSecretRequest, ValidationContext<CreateApplicationSecretRequest>, bool>, Action) AbstractValidator<CreateApplicationSecretRequest>.Unless(Func<CreateApplicationSecretRequest, bool>, Action) AbstractValidator<CreateApplicationSecretRequest>.Unless(Func<CreateApplicationSecretRequest, ValidationContext<CreateApplicationSecretRequest>, bool>, Action) AbstractValidator<CreateApplicationSecretRequest>.WhenAsync(Func<CreateApplicationSecretRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationSecretRequest>.WhenAsync(Func<CreateApplicationSecretRequest, ValidationContext<CreateApplicationSecretRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationSecretRequest>.UnlessAsync(Func<CreateApplicationSecretRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationSecretRequest>.UnlessAsync(Func<CreateApplicationSecretRequest, ValidationContext<CreateApplicationSecretRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateApplicationSecretRequest>.Include(IValidator<CreateApplicationSecretRequest>) AbstractValidator<CreateApplicationSecretRequest>.Include<TValidator>(Func<CreateApplicationSecretRequest, TValidator>) AbstractValidator<CreateApplicationSecretRequest>.GetEnumerator() AbstractValidator<CreateApplicationSecretRequest>.EnsureInstanceNotNull(object) AbstractValidator<CreateApplicationSecretRequest>.PreValidate(ValidationContext<CreateApplicationSecretRequest>, ValidationResult) AbstractValidator<CreateApplicationSecretRequest>.RaiseValidationException(ValidationContext<CreateApplicationSecretRequest>, ValidationResult) AbstractValidator<CreateApplicationSecretRequest>.OnRuleAdded(IValidationRule<CreateApplicationSecretRequest>) AbstractValidator<CreateApplicationSecretRequest>.CascadeMode AbstractValidator<CreateApplicationSecretRequest>.ClassLevelCascadeMode AbstractValidator<CreateApplicationSecretRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateApplicationSecretRequestValidator() Initializes a new instance of CreateApplicationSecretRequestValidator public CreateApplicationSecretRequestValidator()"
  },
  "api/Application.Validators.DeleteApplicationByNameRequestValidator.html": {
    "href": "api/Application.Validators.DeleteApplicationByNameRequestValidator.html",
    "title": "Class DeleteApplicationByNameRequestValidator | Authentica",
    "keywords": "Class DeleteApplicationByNameRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for DeleteApplicationByNameRequest. public class DeleteApplicationByNameRequestValidator : AbstractValidator<DeleteApplicationByNameRequest>, IValidator<DeleteApplicationByNameRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<DeleteApplicationByNameRequest> DeleteApplicationByNameRequestValidator Implements IValidator<DeleteApplicationByNameRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<DeleteApplicationByNameRequest>.Validate(DeleteApplicationByNameRequest) AbstractValidator<DeleteApplicationByNameRequest>.ValidateAsync(DeleteApplicationByNameRequest, CancellationToken) AbstractValidator<DeleteApplicationByNameRequest>.Validate(ValidationContext<DeleteApplicationByNameRequest>) AbstractValidator<DeleteApplicationByNameRequest>.ValidateAsync(ValidationContext<DeleteApplicationByNameRequest>, CancellationToken) AbstractValidator<DeleteApplicationByNameRequest>.CreateDescriptor() AbstractValidator<DeleteApplicationByNameRequest>.RuleFor<TProperty>(Expression<Func<DeleteApplicationByNameRequest, TProperty>>) AbstractValidator<DeleteApplicationByNameRequest>.Transform<TProperty, TTransformed>(Expression<Func<DeleteApplicationByNameRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<DeleteApplicationByNameRequest>.Transform<TProperty, TTransformed>(Expression<Func<DeleteApplicationByNameRequest, TProperty>>, Func<DeleteApplicationByNameRequest, TProperty, TTransformed>) AbstractValidator<DeleteApplicationByNameRequest>.RuleForEach<TElement>(Expression<Func<DeleteApplicationByNameRequest, IEnumerable<TElement>>>) AbstractValidator<DeleteApplicationByNameRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<DeleteApplicationByNameRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<DeleteApplicationByNameRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<DeleteApplicationByNameRequest, IEnumerable<TElement>>>, Func<DeleteApplicationByNameRequest, TElement, TTransformed>) AbstractValidator<DeleteApplicationByNameRequest>.RuleSet(string, Action) AbstractValidator<DeleteApplicationByNameRequest>.When(Func<DeleteApplicationByNameRequest, bool>, Action) AbstractValidator<DeleteApplicationByNameRequest>.When(Func<DeleteApplicationByNameRequest, ValidationContext<DeleteApplicationByNameRequest>, bool>, Action) AbstractValidator<DeleteApplicationByNameRequest>.Unless(Func<DeleteApplicationByNameRequest, bool>, Action) AbstractValidator<DeleteApplicationByNameRequest>.Unless(Func<DeleteApplicationByNameRequest, ValidationContext<DeleteApplicationByNameRequest>, bool>, Action) AbstractValidator<DeleteApplicationByNameRequest>.WhenAsync(Func<DeleteApplicationByNameRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<DeleteApplicationByNameRequest>.WhenAsync(Func<DeleteApplicationByNameRequest, ValidationContext<DeleteApplicationByNameRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<DeleteApplicationByNameRequest>.UnlessAsync(Func<DeleteApplicationByNameRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<DeleteApplicationByNameRequest>.UnlessAsync(Func<DeleteApplicationByNameRequest, ValidationContext<DeleteApplicationByNameRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<DeleteApplicationByNameRequest>.Include(IValidator<DeleteApplicationByNameRequest>) AbstractValidator<DeleteApplicationByNameRequest>.Include<TValidator>(Func<DeleteApplicationByNameRequest, TValidator>) AbstractValidator<DeleteApplicationByNameRequest>.GetEnumerator() AbstractValidator<DeleteApplicationByNameRequest>.EnsureInstanceNotNull(object) AbstractValidator<DeleteApplicationByNameRequest>.PreValidate(ValidationContext<DeleteApplicationByNameRequest>, ValidationResult) AbstractValidator<DeleteApplicationByNameRequest>.RaiseValidationException(ValidationContext<DeleteApplicationByNameRequest>, ValidationResult) AbstractValidator<DeleteApplicationByNameRequest>.OnRuleAdded(IValidationRule<DeleteApplicationByNameRequest>) AbstractValidator<DeleteApplicationByNameRequest>.CascadeMode AbstractValidator<DeleteApplicationByNameRequest>.ClassLevelCascadeMode AbstractValidator<DeleteApplicationByNameRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DeleteApplicationByNameRequestValidator() Initializes a new instance of DeleteApplicationByNameRequestValidator public DeleteApplicationByNameRequestValidator()"
  },
  "api/Application.Validators.LoginRequestValidator.html": {
    "href": "api/Application.Validators.LoginRequestValidator.html",
    "title": "Class LoginRequestValidator | Authentica",
    "keywords": "Class LoginRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for LoginRequest. public class LoginRequestValidator : AbstractValidator<LoginRequest>, IValidator<LoginRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<LoginRequest> LoginRequestValidator Implements IValidator<LoginRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<LoginRequest>.Validate(LoginRequest) AbstractValidator<LoginRequest>.ValidateAsync(LoginRequest, CancellationToken) AbstractValidator<LoginRequest>.Validate(ValidationContext<LoginRequest>) AbstractValidator<LoginRequest>.ValidateAsync(ValidationContext<LoginRequest>, CancellationToken) AbstractValidator<LoginRequest>.CreateDescriptor() AbstractValidator<LoginRequest>.RuleFor<TProperty>(Expression<Func<LoginRequest, TProperty>>) AbstractValidator<LoginRequest>.Transform<TProperty, TTransformed>(Expression<Func<LoginRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<LoginRequest>.Transform<TProperty, TTransformed>(Expression<Func<LoginRequest, TProperty>>, Func<LoginRequest, TProperty, TTransformed>) AbstractValidator<LoginRequest>.RuleForEach<TElement>(Expression<Func<LoginRequest, IEnumerable<TElement>>>) AbstractValidator<LoginRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<LoginRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<LoginRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<LoginRequest, IEnumerable<TElement>>>, Func<LoginRequest, TElement, TTransformed>) AbstractValidator<LoginRequest>.RuleSet(string, Action) AbstractValidator<LoginRequest>.When(Func<LoginRequest, bool>, Action) AbstractValidator<LoginRequest>.When(Func<LoginRequest, ValidationContext<LoginRequest>, bool>, Action) AbstractValidator<LoginRequest>.Unless(Func<LoginRequest, bool>, Action) AbstractValidator<LoginRequest>.Unless(Func<LoginRequest, ValidationContext<LoginRequest>, bool>, Action) AbstractValidator<LoginRequest>.WhenAsync(Func<LoginRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<LoginRequest>.WhenAsync(Func<LoginRequest, ValidationContext<LoginRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<LoginRequest>.UnlessAsync(Func<LoginRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<LoginRequest>.UnlessAsync(Func<LoginRequest, ValidationContext<LoginRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<LoginRequest>.Include(IValidator<LoginRequest>) AbstractValidator<LoginRequest>.Include<TValidator>(Func<LoginRequest, TValidator>) AbstractValidator<LoginRequest>.GetEnumerator() AbstractValidator<LoginRequest>.EnsureInstanceNotNull(object) AbstractValidator<LoginRequest>.PreValidate(ValidationContext<LoginRequest>, ValidationResult) AbstractValidator<LoginRequest>.RaiseValidationException(ValidationContext<LoginRequest>, ValidationResult) AbstractValidator<LoginRequest>.OnRuleAdded(IValidationRule<LoginRequest>) AbstractValidator<LoginRequest>.CascadeMode AbstractValidator<LoginRequest>.ClassLevelCascadeMode AbstractValidator<LoginRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoginRequestValidator() Initializes a new instance of LoginRequestValidator. public LoginRequestValidator()"
  },
  "api/Application.Validators.MultiFactorLoginRequestValidator.html": {
    "href": "api/Application.Validators.MultiFactorLoginRequestValidator.html",
    "title": "Class MultiFactorLoginRequestValidator | Authentica",
    "keywords": "Class MultiFactorLoginRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for MultiFactorLoginRequest. public class MultiFactorLoginRequestValidator : AbstractValidator<MultiFactorLoginRequest>, IValidator<MultiFactorLoginRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<MultiFactorLoginRequest> MultiFactorLoginRequestValidator Implements IValidator<MultiFactorLoginRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<MultiFactorLoginRequest>.Validate(MultiFactorLoginRequest) AbstractValidator<MultiFactorLoginRequest>.ValidateAsync(MultiFactorLoginRequest, CancellationToken) AbstractValidator<MultiFactorLoginRequest>.Validate(ValidationContext<MultiFactorLoginRequest>) AbstractValidator<MultiFactorLoginRequest>.ValidateAsync(ValidationContext<MultiFactorLoginRequest>, CancellationToken) AbstractValidator<MultiFactorLoginRequest>.CreateDescriptor() AbstractValidator<MultiFactorLoginRequest>.RuleFor<TProperty>(Expression<Func<MultiFactorLoginRequest, TProperty>>) AbstractValidator<MultiFactorLoginRequest>.Transform<TProperty, TTransformed>(Expression<Func<MultiFactorLoginRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<MultiFactorLoginRequest>.Transform<TProperty, TTransformed>(Expression<Func<MultiFactorLoginRequest, TProperty>>, Func<MultiFactorLoginRequest, TProperty, TTransformed>) AbstractValidator<MultiFactorLoginRequest>.RuleForEach<TElement>(Expression<Func<MultiFactorLoginRequest, IEnumerable<TElement>>>) AbstractValidator<MultiFactorLoginRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<MultiFactorLoginRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<MultiFactorLoginRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<MultiFactorLoginRequest, IEnumerable<TElement>>>, Func<MultiFactorLoginRequest, TElement, TTransformed>) AbstractValidator<MultiFactorLoginRequest>.RuleSet(string, Action) AbstractValidator<MultiFactorLoginRequest>.When(Func<MultiFactorLoginRequest, bool>, Action) AbstractValidator<MultiFactorLoginRequest>.When(Func<MultiFactorLoginRequest, ValidationContext<MultiFactorLoginRequest>, bool>, Action) AbstractValidator<MultiFactorLoginRequest>.Unless(Func<MultiFactorLoginRequest, bool>, Action) AbstractValidator<MultiFactorLoginRequest>.Unless(Func<MultiFactorLoginRequest, ValidationContext<MultiFactorLoginRequest>, bool>, Action) AbstractValidator<MultiFactorLoginRequest>.WhenAsync(Func<MultiFactorLoginRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorLoginRequest>.WhenAsync(Func<MultiFactorLoginRequest, ValidationContext<MultiFactorLoginRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorLoginRequest>.UnlessAsync(Func<MultiFactorLoginRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorLoginRequest>.UnlessAsync(Func<MultiFactorLoginRequest, ValidationContext<MultiFactorLoginRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorLoginRequest>.Include(IValidator<MultiFactorLoginRequest>) AbstractValidator<MultiFactorLoginRequest>.Include<TValidator>(Func<MultiFactorLoginRequest, TValidator>) AbstractValidator<MultiFactorLoginRequest>.GetEnumerator() AbstractValidator<MultiFactorLoginRequest>.EnsureInstanceNotNull(object) AbstractValidator<MultiFactorLoginRequest>.PreValidate(ValidationContext<MultiFactorLoginRequest>, ValidationResult) AbstractValidator<MultiFactorLoginRequest>.RaiseValidationException(ValidationContext<MultiFactorLoginRequest>, ValidationResult) AbstractValidator<MultiFactorLoginRequest>.OnRuleAdded(IValidationRule<MultiFactorLoginRequest>) AbstractValidator<MultiFactorLoginRequest>.CascadeMode AbstractValidator<MultiFactorLoginRequest>.ClassLevelCascadeMode AbstractValidator<MultiFactorLoginRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorLoginRequestValidator() Initializes a new instance of MultiFactorLoginRequestValidator. public MultiFactorLoginRequestValidator()"
  },
  "api/Application.Validators.MultiFactorRecoveryCodeRedeemRequestValidator.html": {
    "href": "api/Application.Validators.MultiFactorRecoveryCodeRedeemRequestValidator.html",
    "title": "Class MultiFactorRecoveryCodeRedeemRequestValidator | Authentica",
    "keywords": "Class MultiFactorRecoveryCodeRedeemRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for MultiFactorRecoveryCodeRedeemRequest. public class MultiFactorRecoveryCodeRedeemRequestValidator : AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>, IValidator<MultiFactorRecoveryCodeRedeemRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<MultiFactorRecoveryCodeRedeemRequest> MultiFactorRecoveryCodeRedeemRequestValidator Implements IValidator<MultiFactorRecoveryCodeRedeemRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Validate(MultiFactorRecoveryCodeRedeemRequest) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.ValidateAsync(MultiFactorRecoveryCodeRedeemRequest, CancellationToken) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Validate(ValidationContext<MultiFactorRecoveryCodeRedeemRequest>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.ValidateAsync(ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, CancellationToken) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.CreateDescriptor() AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.RuleFor<TProperty>(Expression<Func<MultiFactorRecoveryCodeRedeemRequest, TProperty>>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Transform<TProperty, TTransformed>(Expression<Func<MultiFactorRecoveryCodeRedeemRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Transform<TProperty, TTransformed>(Expression<Func<MultiFactorRecoveryCodeRedeemRequest, TProperty>>, Func<MultiFactorRecoveryCodeRedeemRequest, TProperty, TTransformed>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.RuleForEach<TElement>(Expression<Func<MultiFactorRecoveryCodeRedeemRequest, IEnumerable<TElement>>>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<MultiFactorRecoveryCodeRedeemRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<MultiFactorRecoveryCodeRedeemRequest, IEnumerable<TElement>>>, Func<MultiFactorRecoveryCodeRedeemRequest, TElement, TTransformed>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.RuleSet(string, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.When(Func<MultiFactorRecoveryCodeRedeemRequest, bool>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.When(Func<MultiFactorRecoveryCodeRedeemRequest, ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, bool>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Unless(Func<MultiFactorRecoveryCodeRedeemRequest, bool>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Unless(Func<MultiFactorRecoveryCodeRedeemRequest, ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, bool>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.WhenAsync(Func<MultiFactorRecoveryCodeRedeemRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.WhenAsync(Func<MultiFactorRecoveryCodeRedeemRequest, ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.UnlessAsync(Func<MultiFactorRecoveryCodeRedeemRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.UnlessAsync(Func<MultiFactorRecoveryCodeRedeemRequest, ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Include(IValidator<MultiFactorRecoveryCodeRedeemRequest>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.Include<TValidator>(Func<MultiFactorRecoveryCodeRedeemRequest, TValidator>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.GetEnumerator() AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.EnsureInstanceNotNull(object) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.PreValidate(ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, ValidationResult) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.RaiseValidationException(ValidationContext<MultiFactorRecoveryCodeRedeemRequest>, ValidationResult) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.OnRuleAdded(IValidationRule<MultiFactorRecoveryCodeRedeemRequest>) AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.CascadeMode AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.ClassLevelCascadeMode AbstractValidator<MultiFactorRecoveryCodeRedeemRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultiFactorRecoveryCodeRedeemRequestValidator() Initializes a new instance of MultiFactorRecoveryCodeRedeemRequestValidator. public MultiFactorRecoveryCodeRedeemRequestValidator()"
  },
  "api/Application.Validators.PasswordResetRequestValidator.html": {
    "href": "api/Application.Validators.PasswordResetRequestValidator.html",
    "title": "Class PasswordResetRequestValidator | Authentica",
    "keywords": "Class PasswordResetRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for PasswordResetRequest. public class PasswordResetRequestValidator : AbstractValidator<PasswordResetRequest>, IValidator<PasswordResetRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<PasswordResetRequest> PasswordResetRequestValidator Implements IValidator<PasswordResetRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<PasswordResetRequest>.Validate(PasswordResetRequest) AbstractValidator<PasswordResetRequest>.ValidateAsync(PasswordResetRequest, CancellationToken) AbstractValidator<PasswordResetRequest>.Validate(ValidationContext<PasswordResetRequest>) AbstractValidator<PasswordResetRequest>.ValidateAsync(ValidationContext<PasswordResetRequest>, CancellationToken) AbstractValidator<PasswordResetRequest>.CreateDescriptor() AbstractValidator<PasswordResetRequest>.RuleFor<TProperty>(Expression<Func<PasswordResetRequest, TProperty>>) AbstractValidator<PasswordResetRequest>.Transform<TProperty, TTransformed>(Expression<Func<PasswordResetRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<PasswordResetRequest>.Transform<TProperty, TTransformed>(Expression<Func<PasswordResetRequest, TProperty>>, Func<PasswordResetRequest, TProperty, TTransformed>) AbstractValidator<PasswordResetRequest>.RuleForEach<TElement>(Expression<Func<PasswordResetRequest, IEnumerable<TElement>>>) AbstractValidator<PasswordResetRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<PasswordResetRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<PasswordResetRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<PasswordResetRequest, IEnumerable<TElement>>>, Func<PasswordResetRequest, TElement, TTransformed>) AbstractValidator<PasswordResetRequest>.RuleSet(string, Action) AbstractValidator<PasswordResetRequest>.When(Func<PasswordResetRequest, bool>, Action) AbstractValidator<PasswordResetRequest>.When(Func<PasswordResetRequest, ValidationContext<PasswordResetRequest>, bool>, Action) AbstractValidator<PasswordResetRequest>.Unless(Func<PasswordResetRequest, bool>, Action) AbstractValidator<PasswordResetRequest>.Unless(Func<PasswordResetRequest, ValidationContext<PasswordResetRequest>, bool>, Action) AbstractValidator<PasswordResetRequest>.WhenAsync(Func<PasswordResetRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<PasswordResetRequest>.WhenAsync(Func<PasswordResetRequest, ValidationContext<PasswordResetRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<PasswordResetRequest>.UnlessAsync(Func<PasswordResetRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<PasswordResetRequest>.UnlessAsync(Func<PasswordResetRequest, ValidationContext<PasswordResetRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<PasswordResetRequest>.Include(IValidator<PasswordResetRequest>) AbstractValidator<PasswordResetRequest>.Include<TValidator>(Func<PasswordResetRequest, TValidator>) AbstractValidator<PasswordResetRequest>.GetEnumerator() AbstractValidator<PasswordResetRequest>.EnsureInstanceNotNull(object) AbstractValidator<PasswordResetRequest>.PreValidate(ValidationContext<PasswordResetRequest>, ValidationResult) AbstractValidator<PasswordResetRequest>.RaiseValidationException(ValidationContext<PasswordResetRequest>, ValidationResult) AbstractValidator<PasswordResetRequest>.OnRuleAdded(IValidationRule<PasswordResetRequest>) AbstractValidator<PasswordResetRequest>.CascadeMode AbstractValidator<PasswordResetRequest>.ClassLevelCascadeMode AbstractValidator<PasswordResetRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PasswordResetRequestValidator() Initializes a new instance of PasswordResetRequestValidator. public PasswordResetRequestValidator()"
  },
  "api/Application.Validators.ReadApplicationByNameRequestValidator.html": {
    "href": "api/Application.Validators.ReadApplicationByNameRequestValidator.html",
    "title": "Class ReadApplicationByNameRequestValidator | Authentica",
    "keywords": "Class ReadApplicationByNameRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for ReadApplicationByNameRequestValidator. public class ReadApplicationByNameRequestValidator : AbstractValidator<ReadApplicationByNameRequest>, IValidator<ReadApplicationByNameRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<ReadApplicationByNameRequest> ReadApplicationByNameRequestValidator Implements IValidator<ReadApplicationByNameRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<ReadApplicationByNameRequest>.Validate(ReadApplicationByNameRequest) AbstractValidator<ReadApplicationByNameRequest>.ValidateAsync(ReadApplicationByNameRequest, CancellationToken) AbstractValidator<ReadApplicationByNameRequest>.Validate(ValidationContext<ReadApplicationByNameRequest>) AbstractValidator<ReadApplicationByNameRequest>.ValidateAsync(ValidationContext<ReadApplicationByNameRequest>, CancellationToken) AbstractValidator<ReadApplicationByNameRequest>.CreateDescriptor() AbstractValidator<ReadApplicationByNameRequest>.RuleFor<TProperty>(Expression<Func<ReadApplicationByNameRequest, TProperty>>) AbstractValidator<ReadApplicationByNameRequest>.Transform<TProperty, TTransformed>(Expression<Func<ReadApplicationByNameRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<ReadApplicationByNameRequest>.Transform<TProperty, TTransformed>(Expression<Func<ReadApplicationByNameRequest, TProperty>>, Func<ReadApplicationByNameRequest, TProperty, TTransformed>) AbstractValidator<ReadApplicationByNameRequest>.RuleForEach<TElement>(Expression<Func<ReadApplicationByNameRequest, IEnumerable<TElement>>>) AbstractValidator<ReadApplicationByNameRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<ReadApplicationByNameRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<ReadApplicationByNameRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<ReadApplicationByNameRequest, IEnumerable<TElement>>>, Func<ReadApplicationByNameRequest, TElement, TTransformed>) AbstractValidator<ReadApplicationByNameRequest>.RuleSet(string, Action) AbstractValidator<ReadApplicationByNameRequest>.When(Func<ReadApplicationByNameRequest, bool>, Action) AbstractValidator<ReadApplicationByNameRequest>.When(Func<ReadApplicationByNameRequest, ValidationContext<ReadApplicationByNameRequest>, bool>, Action) AbstractValidator<ReadApplicationByNameRequest>.Unless(Func<ReadApplicationByNameRequest, bool>, Action) AbstractValidator<ReadApplicationByNameRequest>.Unless(Func<ReadApplicationByNameRequest, ValidationContext<ReadApplicationByNameRequest>, bool>, Action) AbstractValidator<ReadApplicationByNameRequest>.WhenAsync(Func<ReadApplicationByNameRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<ReadApplicationByNameRequest>.WhenAsync(Func<ReadApplicationByNameRequest, ValidationContext<ReadApplicationByNameRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<ReadApplicationByNameRequest>.UnlessAsync(Func<ReadApplicationByNameRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<ReadApplicationByNameRequest>.UnlessAsync(Func<ReadApplicationByNameRequest, ValidationContext<ReadApplicationByNameRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<ReadApplicationByNameRequest>.Include(IValidator<ReadApplicationByNameRequest>) AbstractValidator<ReadApplicationByNameRequest>.Include<TValidator>(Func<ReadApplicationByNameRequest, TValidator>) AbstractValidator<ReadApplicationByNameRequest>.GetEnumerator() AbstractValidator<ReadApplicationByNameRequest>.EnsureInstanceNotNull(object) AbstractValidator<ReadApplicationByNameRequest>.PreValidate(ValidationContext<ReadApplicationByNameRequest>, ValidationResult) AbstractValidator<ReadApplicationByNameRequest>.RaiseValidationException(ValidationContext<ReadApplicationByNameRequest>, ValidationResult) AbstractValidator<ReadApplicationByNameRequest>.OnRuleAdded(IValidationRule<ReadApplicationByNameRequest>) AbstractValidator<ReadApplicationByNameRequest>.CascadeMode AbstractValidator<ReadApplicationByNameRequest>.ClassLevelCascadeMode AbstractValidator<ReadApplicationByNameRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReadApplicationByNameRequestValidator() Initializes a new instance of ReadApplicationByNameRequestValidator public ReadApplicationByNameRequestValidator()"
  },
  "api/Application.Validators.RegisterRequestValidator.html": {
    "href": "api/Application.Validators.RegisterRequestValidator.html",
    "title": "Class RegisterRequestValidator | Authentica",
    "keywords": "Class RegisterRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for RegisterRequest. public class RegisterRequestValidator : AbstractValidator<RegisterRequest>, IValidator<RegisterRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<RegisterRequest> RegisterRequestValidator Implements IValidator<RegisterRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<RegisterRequest>.Validate(RegisterRequest) AbstractValidator<RegisterRequest>.ValidateAsync(RegisterRequest, CancellationToken) AbstractValidator<RegisterRequest>.Validate(ValidationContext<RegisterRequest>) AbstractValidator<RegisterRequest>.ValidateAsync(ValidationContext<RegisterRequest>, CancellationToken) AbstractValidator<RegisterRequest>.CreateDescriptor() AbstractValidator<RegisterRequest>.RuleFor<TProperty>(Expression<Func<RegisterRequest, TProperty>>) AbstractValidator<RegisterRequest>.Transform<TProperty, TTransformed>(Expression<Func<RegisterRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<RegisterRequest>.Transform<TProperty, TTransformed>(Expression<Func<RegisterRequest, TProperty>>, Func<RegisterRequest, TProperty, TTransformed>) AbstractValidator<RegisterRequest>.RuleForEach<TElement>(Expression<Func<RegisterRequest, IEnumerable<TElement>>>) AbstractValidator<RegisterRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<RegisterRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<RegisterRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<RegisterRequest, IEnumerable<TElement>>>, Func<RegisterRequest, TElement, TTransformed>) AbstractValidator<RegisterRequest>.RuleSet(string, Action) AbstractValidator<RegisterRequest>.When(Func<RegisterRequest, bool>, Action) AbstractValidator<RegisterRequest>.When(Func<RegisterRequest, ValidationContext<RegisterRequest>, bool>, Action) AbstractValidator<RegisterRequest>.Unless(Func<RegisterRequest, bool>, Action) AbstractValidator<RegisterRequest>.Unless(Func<RegisterRequest, ValidationContext<RegisterRequest>, bool>, Action) AbstractValidator<RegisterRequest>.WhenAsync(Func<RegisterRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<RegisterRequest>.WhenAsync(Func<RegisterRequest, ValidationContext<RegisterRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<RegisterRequest>.UnlessAsync(Func<RegisterRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<RegisterRequest>.UnlessAsync(Func<RegisterRequest, ValidationContext<RegisterRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<RegisterRequest>.Include(IValidator<RegisterRequest>) AbstractValidator<RegisterRequest>.Include<TValidator>(Func<RegisterRequest, TValidator>) AbstractValidator<RegisterRequest>.GetEnumerator() AbstractValidator<RegisterRequest>.EnsureInstanceNotNull(object) AbstractValidator<RegisterRequest>.PreValidate(ValidationContext<RegisterRequest>, ValidationResult) AbstractValidator<RegisterRequest>.RaiseValidationException(ValidationContext<RegisterRequest>, ValidationResult) AbstractValidator<RegisterRequest>.OnRuleAdded(IValidationRule<RegisterRequest>) AbstractValidator<RegisterRequest>.CascadeMode AbstractValidator<RegisterRequest>.ClassLevelCascadeMode AbstractValidator<RegisterRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RegisterRequestValidator() Initializes a new instance of RegisterRequestValidator. public RegisterRequestValidator()"
  },
  "api/Application.Validators.SendTokenRequestValidator.html": {
    "href": "api/Application.Validators.SendTokenRequestValidator.html",
    "title": "Class SendTokenRequestValidator | Authentica",
    "keywords": "Class SendTokenRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validates the SendTokenRequest to ensure that the provided email and token type meet the required criteria. public class SendTokenRequestValidator : AbstractValidator<SendTokenRequest>, IValidator<SendTokenRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<SendTokenRequest> SendTokenRequestValidator Implements IValidator<SendTokenRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<SendTokenRequest>.Validate(SendTokenRequest) AbstractValidator<SendTokenRequest>.ValidateAsync(SendTokenRequest, CancellationToken) AbstractValidator<SendTokenRequest>.Validate(ValidationContext<SendTokenRequest>) AbstractValidator<SendTokenRequest>.ValidateAsync(ValidationContext<SendTokenRequest>, CancellationToken) AbstractValidator<SendTokenRequest>.CreateDescriptor() AbstractValidator<SendTokenRequest>.RuleFor<TProperty>(Expression<Func<SendTokenRequest, TProperty>>) AbstractValidator<SendTokenRequest>.Transform<TProperty, TTransformed>(Expression<Func<SendTokenRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<SendTokenRequest>.Transform<TProperty, TTransformed>(Expression<Func<SendTokenRequest, TProperty>>, Func<SendTokenRequest, TProperty, TTransformed>) AbstractValidator<SendTokenRequest>.RuleForEach<TElement>(Expression<Func<SendTokenRequest, IEnumerable<TElement>>>) AbstractValidator<SendTokenRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<SendTokenRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<SendTokenRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<SendTokenRequest, IEnumerable<TElement>>>, Func<SendTokenRequest, TElement, TTransformed>) AbstractValidator<SendTokenRequest>.RuleSet(string, Action) AbstractValidator<SendTokenRequest>.When(Func<SendTokenRequest, bool>, Action) AbstractValidator<SendTokenRequest>.When(Func<SendTokenRequest, ValidationContext<SendTokenRequest>, bool>, Action) AbstractValidator<SendTokenRequest>.Unless(Func<SendTokenRequest, bool>, Action) AbstractValidator<SendTokenRequest>.Unless(Func<SendTokenRequest, ValidationContext<SendTokenRequest>, bool>, Action) AbstractValidator<SendTokenRequest>.WhenAsync(Func<SendTokenRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<SendTokenRequest>.WhenAsync(Func<SendTokenRequest, ValidationContext<SendTokenRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<SendTokenRequest>.UnlessAsync(Func<SendTokenRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<SendTokenRequest>.UnlessAsync(Func<SendTokenRequest, ValidationContext<SendTokenRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<SendTokenRequest>.Include(IValidator<SendTokenRequest>) AbstractValidator<SendTokenRequest>.Include<TValidator>(Func<SendTokenRequest, TValidator>) AbstractValidator<SendTokenRequest>.GetEnumerator() AbstractValidator<SendTokenRequest>.EnsureInstanceNotNull(object) AbstractValidator<SendTokenRequest>.PreValidate(ValidationContext<SendTokenRequest>, ValidationResult) AbstractValidator<SendTokenRequest>.RaiseValidationException(ValidationContext<SendTokenRequest>, ValidationResult) AbstractValidator<SendTokenRequest>.OnRuleAdded(IValidationRule<SendTokenRequest>) AbstractValidator<SendTokenRequest>.CascadeMode AbstractValidator<SendTokenRequest>.ClassLevelCascadeMode AbstractValidator<SendTokenRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SendTokenRequestValidator() Initializes a new instance of the SendTokenRequestValidator class and defines validation rules. public SendTokenRequestValidator()"
  },
  "api/Application.Validators.TokenRequestValidator.html": {
    "href": "api/Application.Validators.TokenRequestValidator.html",
    "title": "Class TokenRequestValidator | Authentica",
    "keywords": "Class TokenRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for TokenRequest. public class TokenRequestValidator : AbstractValidator<TokenRequest>, IValidator<TokenRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<TokenRequest> TokenRequestValidator Implements IValidator<TokenRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<TokenRequest>.Validate(TokenRequest) AbstractValidator<TokenRequest>.ValidateAsync(TokenRequest, CancellationToken) AbstractValidator<TokenRequest>.Validate(ValidationContext<TokenRequest>) AbstractValidator<TokenRequest>.ValidateAsync(ValidationContext<TokenRequest>, CancellationToken) AbstractValidator<TokenRequest>.CreateDescriptor() AbstractValidator<TokenRequest>.RuleFor<TProperty>(Expression<Func<TokenRequest, TProperty>>) AbstractValidator<TokenRequest>.Transform<TProperty, TTransformed>(Expression<Func<TokenRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<TokenRequest>.Transform<TProperty, TTransformed>(Expression<Func<TokenRequest, TProperty>>, Func<TokenRequest, TProperty, TTransformed>) AbstractValidator<TokenRequest>.RuleForEach<TElement>(Expression<Func<TokenRequest, IEnumerable<TElement>>>) AbstractValidator<TokenRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<TokenRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<TokenRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<TokenRequest, IEnumerable<TElement>>>, Func<TokenRequest, TElement, TTransformed>) AbstractValidator<TokenRequest>.RuleSet(string, Action) AbstractValidator<TokenRequest>.When(Func<TokenRequest, bool>, Action) AbstractValidator<TokenRequest>.When(Func<TokenRequest, ValidationContext<TokenRequest>, bool>, Action) AbstractValidator<TokenRequest>.Unless(Func<TokenRequest, bool>, Action) AbstractValidator<TokenRequest>.Unless(Func<TokenRequest, ValidationContext<TokenRequest>, bool>, Action) AbstractValidator<TokenRequest>.WhenAsync(Func<TokenRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<TokenRequest>.WhenAsync(Func<TokenRequest, ValidationContext<TokenRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<TokenRequest>.UnlessAsync(Func<TokenRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<TokenRequest>.UnlessAsync(Func<TokenRequest, ValidationContext<TokenRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<TokenRequest>.Include(IValidator<TokenRequest>) AbstractValidator<TokenRequest>.Include<TValidator>(Func<TokenRequest, TValidator>) AbstractValidator<TokenRequest>.GetEnumerator() AbstractValidator<TokenRequest>.EnsureInstanceNotNull(object) AbstractValidator<TokenRequest>.PreValidate(ValidationContext<TokenRequest>, ValidationResult) AbstractValidator<TokenRequest>.RaiseValidationException(ValidationContext<TokenRequest>, ValidationResult) AbstractValidator<TokenRequest>.OnRuleAdded(IValidationRule<TokenRequest>) AbstractValidator<TokenRequest>.CascadeMode AbstractValidator<TokenRequest>.ClassLevelCascadeMode AbstractValidator<TokenRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TokenRequestValidator() Initializes a new instance of TokenRequestValidator. public TokenRequestValidator()"
  },
  "api/Application.Validators.UpdateAddressRequestValidator.html": {
    "href": "api/Application.Validators.UpdateAddressRequestValidator.html",
    "title": "Class UpdateAddressRequestValidator | Authentica",
    "keywords": "Class UpdateAddressRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for UpdateAddressRequest. public class UpdateAddressRequestValidator : AbstractValidator<UpdateAddressRequest>, IValidator<UpdateAddressRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UpdateAddressRequest> UpdateAddressRequestValidator Implements IValidator<UpdateAddressRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UpdateAddressRequest>.Validate(UpdateAddressRequest) AbstractValidator<UpdateAddressRequest>.ValidateAsync(UpdateAddressRequest, CancellationToken) AbstractValidator<UpdateAddressRequest>.Validate(ValidationContext<UpdateAddressRequest>) AbstractValidator<UpdateAddressRequest>.ValidateAsync(ValidationContext<UpdateAddressRequest>, CancellationToken) AbstractValidator<UpdateAddressRequest>.CreateDescriptor() AbstractValidator<UpdateAddressRequest>.RuleFor<TProperty>(Expression<Func<UpdateAddressRequest, TProperty>>) AbstractValidator<UpdateAddressRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdateAddressRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UpdateAddressRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdateAddressRequest, TProperty>>, Func<UpdateAddressRequest, TProperty, TTransformed>) AbstractValidator<UpdateAddressRequest>.RuleForEach<TElement>(Expression<Func<UpdateAddressRequest, IEnumerable<TElement>>>) AbstractValidator<UpdateAddressRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateAddressRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UpdateAddressRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateAddressRequest, IEnumerable<TElement>>>, Func<UpdateAddressRequest, TElement, TTransformed>) AbstractValidator<UpdateAddressRequest>.RuleSet(string, Action) AbstractValidator<UpdateAddressRequest>.When(Func<UpdateAddressRequest, bool>, Action) AbstractValidator<UpdateAddressRequest>.When(Func<UpdateAddressRequest, ValidationContext<UpdateAddressRequest>, bool>, Action) AbstractValidator<UpdateAddressRequest>.Unless(Func<UpdateAddressRequest, bool>, Action) AbstractValidator<UpdateAddressRequest>.Unless(Func<UpdateAddressRequest, ValidationContext<UpdateAddressRequest>, bool>, Action) AbstractValidator<UpdateAddressRequest>.WhenAsync(Func<UpdateAddressRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateAddressRequest>.WhenAsync(Func<UpdateAddressRequest, ValidationContext<UpdateAddressRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateAddressRequest>.UnlessAsync(Func<UpdateAddressRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateAddressRequest>.UnlessAsync(Func<UpdateAddressRequest, ValidationContext<UpdateAddressRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateAddressRequest>.Include(IValidator<UpdateAddressRequest>) AbstractValidator<UpdateAddressRequest>.Include<TValidator>(Func<UpdateAddressRequest, TValidator>) AbstractValidator<UpdateAddressRequest>.GetEnumerator() AbstractValidator<UpdateAddressRequest>.EnsureInstanceNotNull(object) AbstractValidator<UpdateAddressRequest>.PreValidate(ValidationContext<UpdateAddressRequest>, ValidationResult) AbstractValidator<UpdateAddressRequest>.RaiseValidationException(ValidationContext<UpdateAddressRequest>, ValidationResult) AbstractValidator<UpdateAddressRequest>.OnRuleAdded(IValidationRule<UpdateAddressRequest>) AbstractValidator<UpdateAddressRequest>.CascadeMode AbstractValidator<UpdateAddressRequest>.ClassLevelCascadeMode AbstractValidator<UpdateAddressRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateAddressRequestValidator() Initializes a new instance of UpdateAddressRequestValidator. public UpdateAddressRequestValidator()"
  },
  "api/Application.Validators.UpdateApplicationByNameRequestValidator.html": {
    "href": "api/Application.Validators.UpdateApplicationByNameRequestValidator.html",
    "title": "Class UpdateApplicationByNameRequestValidator | Authentica",
    "keywords": "Class UpdateApplicationByNameRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for UpdateApplicationByNameRequest. public class UpdateApplicationByNameRequestValidator : AbstractValidator<UpdateApplicationByNameRequest>, IValidator<UpdateApplicationByNameRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UpdateApplicationByNameRequest> UpdateApplicationByNameRequestValidator Implements IValidator<UpdateApplicationByNameRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UpdateApplicationByNameRequest>.Validate(UpdateApplicationByNameRequest) AbstractValidator<UpdateApplicationByNameRequest>.ValidateAsync(UpdateApplicationByNameRequest, CancellationToken) AbstractValidator<UpdateApplicationByNameRequest>.Validate(ValidationContext<UpdateApplicationByNameRequest>) AbstractValidator<UpdateApplicationByNameRequest>.ValidateAsync(ValidationContext<UpdateApplicationByNameRequest>, CancellationToken) AbstractValidator<UpdateApplicationByNameRequest>.CreateDescriptor() AbstractValidator<UpdateApplicationByNameRequest>.RuleFor<TProperty>(Expression<Func<UpdateApplicationByNameRequest, TProperty>>) AbstractValidator<UpdateApplicationByNameRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdateApplicationByNameRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UpdateApplicationByNameRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdateApplicationByNameRequest, TProperty>>, Func<UpdateApplicationByNameRequest, TProperty, TTransformed>) AbstractValidator<UpdateApplicationByNameRequest>.RuleForEach<TElement>(Expression<Func<UpdateApplicationByNameRequest, IEnumerable<TElement>>>) AbstractValidator<UpdateApplicationByNameRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateApplicationByNameRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UpdateApplicationByNameRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateApplicationByNameRequest, IEnumerable<TElement>>>, Func<UpdateApplicationByNameRequest, TElement, TTransformed>) AbstractValidator<UpdateApplicationByNameRequest>.RuleSet(string, Action) AbstractValidator<UpdateApplicationByNameRequest>.When(Func<UpdateApplicationByNameRequest, bool>, Action) AbstractValidator<UpdateApplicationByNameRequest>.When(Func<UpdateApplicationByNameRequest, ValidationContext<UpdateApplicationByNameRequest>, bool>, Action) AbstractValidator<UpdateApplicationByNameRequest>.Unless(Func<UpdateApplicationByNameRequest, bool>, Action) AbstractValidator<UpdateApplicationByNameRequest>.Unless(Func<UpdateApplicationByNameRequest, ValidationContext<UpdateApplicationByNameRequest>, bool>, Action) AbstractValidator<UpdateApplicationByNameRequest>.WhenAsync(Func<UpdateApplicationByNameRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateApplicationByNameRequest>.WhenAsync(Func<UpdateApplicationByNameRequest, ValidationContext<UpdateApplicationByNameRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateApplicationByNameRequest>.UnlessAsync(Func<UpdateApplicationByNameRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateApplicationByNameRequest>.UnlessAsync(Func<UpdateApplicationByNameRequest, ValidationContext<UpdateApplicationByNameRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateApplicationByNameRequest>.Include(IValidator<UpdateApplicationByNameRequest>) AbstractValidator<UpdateApplicationByNameRequest>.Include<TValidator>(Func<UpdateApplicationByNameRequest, TValidator>) AbstractValidator<UpdateApplicationByNameRequest>.GetEnumerator() AbstractValidator<UpdateApplicationByNameRequest>.EnsureInstanceNotNull(object) AbstractValidator<UpdateApplicationByNameRequest>.PreValidate(ValidationContext<UpdateApplicationByNameRequest>, ValidationResult) AbstractValidator<UpdateApplicationByNameRequest>.RaiseValidationException(ValidationContext<UpdateApplicationByNameRequest>, ValidationResult) AbstractValidator<UpdateApplicationByNameRequest>.OnRuleAdded(IValidationRule<UpdateApplicationByNameRequest>) AbstractValidator<UpdateApplicationByNameRequest>.CascadeMode AbstractValidator<UpdateApplicationByNameRequest>.ClassLevelCascadeMode AbstractValidator<UpdateApplicationByNameRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateApplicationByNameRequestValidator() Initializes a new instance of UpdateApplicationByNameRequestValidator public UpdateApplicationByNameRequestValidator()"
  },
  "api/Application.Validators.UpdateEmailRequestValidator.html": {
    "href": "api/Application.Validators.UpdateEmailRequestValidator.html",
    "title": "Class UpdateEmailRequestValidator | Authentica",
    "keywords": "Class UpdateEmailRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for UpdateEmailRequest. public class UpdateEmailRequestValidator : AbstractValidator<UpdateEmailRequest>, IValidator<UpdateEmailRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UpdateEmailRequest> UpdateEmailRequestValidator Implements IValidator<UpdateEmailRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UpdateEmailRequest>.Validate(UpdateEmailRequest) AbstractValidator<UpdateEmailRequest>.ValidateAsync(UpdateEmailRequest, CancellationToken) AbstractValidator<UpdateEmailRequest>.Validate(ValidationContext<UpdateEmailRequest>) AbstractValidator<UpdateEmailRequest>.ValidateAsync(ValidationContext<UpdateEmailRequest>, CancellationToken) AbstractValidator<UpdateEmailRequest>.CreateDescriptor() AbstractValidator<UpdateEmailRequest>.RuleFor<TProperty>(Expression<Func<UpdateEmailRequest, TProperty>>) AbstractValidator<UpdateEmailRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdateEmailRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UpdateEmailRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdateEmailRequest, TProperty>>, Func<UpdateEmailRequest, TProperty, TTransformed>) AbstractValidator<UpdateEmailRequest>.RuleForEach<TElement>(Expression<Func<UpdateEmailRequest, IEnumerable<TElement>>>) AbstractValidator<UpdateEmailRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateEmailRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UpdateEmailRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateEmailRequest, IEnumerable<TElement>>>, Func<UpdateEmailRequest, TElement, TTransformed>) AbstractValidator<UpdateEmailRequest>.RuleSet(string, Action) AbstractValidator<UpdateEmailRequest>.When(Func<UpdateEmailRequest, bool>, Action) AbstractValidator<UpdateEmailRequest>.When(Func<UpdateEmailRequest, ValidationContext<UpdateEmailRequest>, bool>, Action) AbstractValidator<UpdateEmailRequest>.Unless(Func<UpdateEmailRequest, bool>, Action) AbstractValidator<UpdateEmailRequest>.Unless(Func<UpdateEmailRequest, ValidationContext<UpdateEmailRequest>, bool>, Action) AbstractValidator<UpdateEmailRequest>.WhenAsync(Func<UpdateEmailRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateEmailRequest>.WhenAsync(Func<UpdateEmailRequest, ValidationContext<UpdateEmailRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateEmailRequest>.UnlessAsync(Func<UpdateEmailRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateEmailRequest>.UnlessAsync(Func<UpdateEmailRequest, ValidationContext<UpdateEmailRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateEmailRequest>.Include(IValidator<UpdateEmailRequest>) AbstractValidator<UpdateEmailRequest>.Include<TValidator>(Func<UpdateEmailRequest, TValidator>) AbstractValidator<UpdateEmailRequest>.GetEnumerator() AbstractValidator<UpdateEmailRequest>.EnsureInstanceNotNull(object) AbstractValidator<UpdateEmailRequest>.PreValidate(ValidationContext<UpdateEmailRequest>, ValidationResult) AbstractValidator<UpdateEmailRequest>.RaiseValidationException(ValidationContext<UpdateEmailRequest>, ValidationResult) AbstractValidator<UpdateEmailRequest>.OnRuleAdded(IValidationRule<UpdateEmailRequest>) AbstractValidator<UpdateEmailRequest>.CascadeMode AbstractValidator<UpdateEmailRequest>.ClassLevelCascadeMode AbstractValidator<UpdateEmailRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateEmailRequestValidator() Initializes a new instance of UpdateEmailRequestValidator. public UpdateEmailRequestValidator()"
  },
  "api/Application.Validators.UpdatePhoneNumberRequestValidator.html": {
    "href": "api/Application.Validators.UpdatePhoneNumberRequestValidator.html",
    "title": "Class UpdatePhoneNumberRequestValidator | Authentica",
    "keywords": "Class UpdatePhoneNumberRequestValidator Namespace Application.Validators Assembly Authentica.Service.Identity.dll Validator for UpdatePhoneNumberRequest. public class UpdatePhoneNumberRequestValidator : AbstractValidator<UpdatePhoneNumberRequest>, IValidator<UpdatePhoneNumberRequest>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UpdatePhoneNumberRequest> UpdatePhoneNumberRequestValidator Implements IValidator<UpdatePhoneNumberRequest> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UpdatePhoneNumberRequest>.Validate(UpdatePhoneNumberRequest) AbstractValidator<UpdatePhoneNumberRequest>.ValidateAsync(UpdatePhoneNumberRequest, CancellationToken) AbstractValidator<UpdatePhoneNumberRequest>.Validate(ValidationContext<UpdatePhoneNumberRequest>) AbstractValidator<UpdatePhoneNumberRequest>.ValidateAsync(ValidationContext<UpdatePhoneNumberRequest>, CancellationToken) AbstractValidator<UpdatePhoneNumberRequest>.CreateDescriptor() AbstractValidator<UpdatePhoneNumberRequest>.RuleFor<TProperty>(Expression<Func<UpdatePhoneNumberRequest, TProperty>>) AbstractValidator<UpdatePhoneNumberRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdatePhoneNumberRequest, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UpdatePhoneNumberRequest>.Transform<TProperty, TTransformed>(Expression<Func<UpdatePhoneNumberRequest, TProperty>>, Func<UpdatePhoneNumberRequest, TProperty, TTransformed>) AbstractValidator<UpdatePhoneNumberRequest>.RuleForEach<TElement>(Expression<Func<UpdatePhoneNumberRequest, IEnumerable<TElement>>>) AbstractValidator<UpdatePhoneNumberRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdatePhoneNumberRequest, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UpdatePhoneNumberRequest>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdatePhoneNumberRequest, IEnumerable<TElement>>>, Func<UpdatePhoneNumberRequest, TElement, TTransformed>) AbstractValidator<UpdatePhoneNumberRequest>.RuleSet(string, Action) AbstractValidator<UpdatePhoneNumberRequest>.When(Func<UpdatePhoneNumberRequest, bool>, Action) AbstractValidator<UpdatePhoneNumberRequest>.When(Func<UpdatePhoneNumberRequest, ValidationContext<UpdatePhoneNumberRequest>, bool>, Action) AbstractValidator<UpdatePhoneNumberRequest>.Unless(Func<UpdatePhoneNumberRequest, bool>, Action) AbstractValidator<UpdatePhoneNumberRequest>.Unless(Func<UpdatePhoneNumberRequest, ValidationContext<UpdatePhoneNumberRequest>, bool>, Action) AbstractValidator<UpdatePhoneNumberRequest>.WhenAsync(Func<UpdatePhoneNumberRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdatePhoneNumberRequest>.WhenAsync(Func<UpdatePhoneNumberRequest, ValidationContext<UpdatePhoneNumberRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdatePhoneNumberRequest>.UnlessAsync(Func<UpdatePhoneNumberRequest, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdatePhoneNumberRequest>.UnlessAsync(Func<UpdatePhoneNumberRequest, ValidationContext<UpdatePhoneNumberRequest>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdatePhoneNumberRequest>.Include(IValidator<UpdatePhoneNumberRequest>) AbstractValidator<UpdatePhoneNumberRequest>.Include<TValidator>(Func<UpdatePhoneNumberRequest, TValidator>) AbstractValidator<UpdatePhoneNumberRequest>.GetEnumerator() AbstractValidator<UpdatePhoneNumberRequest>.EnsureInstanceNotNull(object) AbstractValidator<UpdatePhoneNumberRequest>.PreValidate(ValidationContext<UpdatePhoneNumberRequest>, ValidationResult) AbstractValidator<UpdatePhoneNumberRequest>.RaiseValidationException(ValidationContext<UpdatePhoneNumberRequest>, ValidationResult) AbstractValidator<UpdatePhoneNumberRequest>.OnRuleAdded(IValidationRule<UpdatePhoneNumberRequest>) AbstractValidator<UpdatePhoneNumberRequest>.CascadeMode AbstractValidator<UpdatePhoneNumberRequest>.ClassLevelCascadeMode AbstractValidator<UpdatePhoneNumberRequest>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdatePhoneNumberRequestValidator() Initializes a new instance of UpdatePhoneNumberRequestValidator. public UpdatePhoneNumberRequestValidator()"
  },
  "api/Application.Validators.html": {
    "href": "api/Application.Validators.html",
    "title": "Namespace Application.Validators | Authentica",
    "keywords": "Namespace Application.Validators Classes AddressValidator Validator for Address. AuthorizeRequestValidator Validator for AuthorizeRequest. ConfirmEmailRequestValidator Validator for ConfirmEmailRequest. CreateApplicationRequestValidator Validator for CreateApplicationRequest. CreateApplicationSecretRequestValidator Validator for CreateApplicationSecretRequest. DeleteApplicationByNameRequestValidator Validator for DeleteApplicationByNameRequest. LoginRequestValidator Validator for LoginRequest. MultiFactorLoginRequestValidator Validator for MultiFactorLoginRequest. MultiFactorRecoveryCodeRedeemRequestValidator Validator for MultiFactorRecoveryCodeRedeemRequest. PasswordResetRequestValidator Validator for PasswordResetRequest. ReadApplicationByNameRequestValidator Validator for ReadApplicationByNameRequestValidator. RegisterRequestValidator Validator for RegisterRequest. SendTokenRequestValidator Validates the SendTokenRequest to ensure that the provided email and token type meet the required criteria. TokenRequestValidator Validator for TokenRequest. UpdateAddressRequestValidator Validator for UpdateAddressRequest. UpdateApplicationByNameRequestValidator Validator for UpdateApplicationByNameRequest. UpdateEmailRequestValidator Validator for UpdateEmailRequest. UpdatePhoneNumberRequestValidator Validator for UpdatePhoneNumberRequest."
  },
  "api/Authentica.Common.EmailMessage.html": {
    "href": "api/Authentica.Common.EmailMessage.html",
    "title": "Class EmailMessage | Authentica",
    "keywords": "Class EmailMessage Namespace Authentica.Common Assembly Authentica.Common.dll Represents a data transfer object for an email message, which are published to the message queue. public sealed class EmailMessage Inheritance object EmailMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Code The code for the user to enter sent via email. public string Code { get; set; } Property Value string EmailAddress The email address to which the email should be sent to. public string EmailAddress { get; set; } Property Value string Type The type of email to be sent to the message queue. EmailPublisherConstants public string Type { get; set; } Property Value string"
  },
  "api/Authentica.Common.EmailTokenConstants.html": {
    "href": "api/Authentica.Common.EmailTokenConstants.html",
    "title": "Class EmailTokenConstants | Authentica",
    "keywords": "Class EmailTokenConstants Namespace Authentica.Common Assembly Authentica.Common.dll Constants for different token types. public static class EmailTokenConstants Inheritance object EmailTokenConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ConfirmEmail Confirm email token type. public const string ConfirmEmail = \"confirm_email\" Field Value string MultiFactor Multi factor token type. public const string MultiFactor = \"multi_factor\" Field Value string ResetPassword Reset password token type. public const string ResetPassword = \"reset_password\" Field Value string UpdateEmail Update email token type. public const string UpdateEmail = \"update_email\" Field Value string UpdatePhoneNumber Update phone number token type. public const string UpdatePhoneNumber = \"update_phonenumber\" Field Value string"
  },
  "api/Authentica.Common.FeatureFlagConstants.html": {
    "href": "api/Authentica.Common.FeatureFlagConstants.html",
    "title": "Class FeatureFlagConstants | Authentica",
    "keywords": "Class FeatureFlagConstants Namespace Authentica.Common Assembly Authentica.Common.dll Constants related to feature flags used in the application. public static class FeatureFlagConstants Inheritance object FeatureFlagConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AzApplicationInsights Constant representing the Azure Application Insights feature flag. public const string AzApplicationInsights = \"AppInsights\" Field Value string AzServiceBus Gets or sets the boolean to enable or disable public const string AzServiceBus = \"ServiceBus\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called FeatureManager.IsEnabledAsync Cache Constant representing the Redis feature flag. public const string Cache = \"Cache\" Field Value string RabbitMq Gets or sets the boolean to enable or disable public const string RabbitMq = \"RabbitMq\" Field Value string Remarks This const string value is used by Microsoft.FeatureManagement to check the appsetings.json when this method is called FeatureManager.IsEnabledAsync"
  },
  "api/Authentica.Common.ServiceCollectionExtensions.html": {
    "href": "api/Authentica.Common.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Authentica",
    "keywords": "Class ServiceCollectionExtensions Namespace Authentica.Common Assembly Authentica.Common.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAzureAppInsights(IServiceCollection) Adds Azure Application Insights, if enabled. public static IServiceCollection AddAzureAppInsights(this IServiceCollection services) Parameters services IServiceCollection The IServiceCollection to which services will be added. Returns IServiceCollection The modified IServiceCollection instance."
  },
  "api/Authentica.Common.html": {
    "href": "api/Authentica.Common.html",
    "title": "Namespace Authentica.Common | Authentica",
    "keywords": "Namespace Authentica.Common Classes EmailMessage Represents a data transfer object for an email message, which are published to the message queue. EmailTokenConstants Constants for different token types. FeatureFlagConstants Constants related to feature flags used in the application. ServiceCollectionExtensions"
  },
  "api/Authentica.Service.Identity.Persistence.Migrations.Initial.html": {
    "href": "api/Authentica.Service.Identity.Persistence.Migrations.Initial.html",
    "title": "Class Initial | Authentica",
    "keywords": "Class Initial Namespace Authentica.Service.Identity.Persistence.Migrations Assembly Authentica.Service.Identity.dll A base class inherited by each EF Core migration. [ExcludeFromCodeCoverage] [DbContext(typeof(AppDbContext))] [Migration(\"20241006200642_Initial\")] public class Initial : Migration Inheritance object Migration Initial Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/Authentica.Service.Identity.Persistence.Migrations.html": {
    "href": "api/Authentica.Service.Identity.Persistence.Migrations.html",
    "title": "Namespace Authentica.Service.Identity.Persistence.Migrations | Authentica",
    "keywords": "Namespace Authentica.Service.Identity.Persistence.Migrations Classes Initial A base class inherited by each EF Core migration."
  },
  "api/Authentica.Service.Identity.Program.html": {
    "href": "api/Authentica.Service.Identity.Program.html",
    "title": "Class Program | Authentica",
    "keywords": "Class Program Namespace Authentica.Service.Identity Assembly Authentica.Service.Identity.dll The entry point for the Web Application. public sealed class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) The entry method for the web application. public static Task Main(string[] args) Parameters args string[] Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.AccountPurgeBackgroundServiceTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.AccountPurgeBackgroundServiceTests.html",
    "title": "Class AccountPurgeBackgroundServiceTests | Authentica",
    "keywords": "Class AccountPurgeBackgroundServiceTests Namespace Authentica.Service.Identity.Tests.IntegrationTests Assembly Authentica.Service.Identity.Tests.dll [TestFixture] public class AccountPurgeBackgroundServiceTests Inheritance object AccountPurgeBackgroundServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteAsync_DeletesOldUserAccountsAfterSevenYears() [Test] public Task ExecuteAsync_DeletesOldUserAccountsAfterSevenYears() Returns Task ExecuteAsync_ThrowsException_WhenAccountPurgeFails() [Test] public void ExecuteAsync_ThrowsException_WhenAccountPurgeFails() OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.AccountPurgeExposeProtected.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.AccountPurgeExposeProtected.html",
    "title": "Class AccountPurgeExposeProtected | Authentica",
    "keywords": "Class AccountPurgeExposeProtected Namespace Authentica.Service.Identity.Tests.IntegrationTests Assembly Authentica.Service.Identity.Tests.dll public class AccountPurgeExposeProtected : AccountPurge, IHostedService, IDisposable Inheritance object BackgroundService AccountPurge AccountPurgeExposeProtected Implements IHostedService IDisposable Inherited Members AccountPurge.ServiceScopeFactory AccountPurge.Logger AccountPurge._timer AccountPurge.ExecuteAsync(CancellationToken) BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccountPurgeExposeProtected(IServiceScopeFactory, ILogger<AccountPurge>, ITimer) public AccountPurgeExposeProtected(IServiceScopeFactory serviceScopeFactory, ILogger<AccountPurge> logger, ITimer timer) Parameters serviceScopeFactory IServiceScopeFactory logger ILogger<AccountPurge> timer ITimer Methods ExecuteTaskAsync(CancellationToken) public Task ExecuteTaskAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.ApplicationPurgeBackgroundServiceTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.ApplicationPurgeBackgroundServiceTests.html",
    "title": "Class ApplicationPurgeBackgroundServiceTests | Authentica",
    "keywords": "Class ApplicationPurgeBackgroundServiceTests Namespace Authentica.Service.Identity.Tests.IntegrationTests Assembly Authentica.Service.Identity.Tests.dll [TestFixture] public class ApplicationPurgeBackgroundServiceTests Inheritance object ApplicationPurgeBackgroundServiceTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteAsync_DeletesOldUserApplicationsAfterSevenYears() [Test] public Task ExecuteAsync_DeletesOldUserApplicationsAfterSevenYears() Returns Task ExecuteAsync_ThrowsException_WhenApplicationPurgeFails() [Test] public void ExecuteAsync_ThrowsException_WhenApplicationPurgeFails() OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.ApplicationPurgeExposeProtected.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.ApplicationPurgeExposeProtected.html",
    "title": "Class ApplicationPurgeExposeProtected | Authentica",
    "keywords": "Class ApplicationPurgeExposeProtected Namespace Authentica.Service.Identity.Tests.IntegrationTests Assembly Authentica.Service.Identity.Tests.dll public class ApplicationPurgeExposeProtected : ApplicationPurge, IHostedService, IDisposable Inheritance object BackgroundService ApplicationPurge ApplicationPurgeExposeProtected Implements IHostedService IDisposable Inherited Members ApplicationPurge.ServiceScopeFactory ApplicationPurge.Logger ApplicationPurge._timer ApplicationPurge.ExecuteAsync(CancellationToken) BackgroundService.Dispose() BackgroundService.StartAsync(CancellationToken) BackgroundService.StopAsync(CancellationToken) BackgroundService.ExecuteTask object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationPurgeExposeProtected(IServiceScopeFactory, ILogger<ApplicationPurge>, ITimer) public ApplicationPurgeExposeProtected(IServiceScopeFactory serviceScopeFactory, ILogger<ApplicationPurge> logger, ITimer timer) Parameters serviceScopeFactory IServiceScopeFactory logger ILogger<ApplicationPurge> timer ITimer Methods ExecuteTaskAsync(CancellationToken) public Task ExecuteTaskAsync(CancellationToken cancellationToken) Parameters cancellationToken CancellationToken Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.CustomWebApplicationFactory-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.CustomWebApplicationFactory-1.html",
    "title": "Class CustomWebApplicationFactory<TProgram> | Authentica",
    "keywords": "Class CustomWebApplicationFactory<TProgram> Namespace Authentica.Service.Identity.Tests.IntegrationTests Assembly Authentica.Service.Identity.Tests.dll public class CustomWebApplicationFactory<TProgram> : WebApplicationFactory<TProgram>, IDisposable, IAsyncDisposable where TProgram : class Type Parameters TProgram Inheritance object WebApplicationFactory<TProgram> CustomWebApplicationFactory<TProgram> Implements IDisposable IAsyncDisposable Inherited Members WebApplicationFactory<TProgram>.WithWebHostBuilder(Action<IWebHostBuilder>) WebApplicationFactory<TProgram>.GetTestAssemblies() WebApplicationFactory<TProgram>.CreateHostBuilder() WebApplicationFactory<TProgram>.CreateWebHostBuilder() WebApplicationFactory<TProgram>.CreateServer(IWebHostBuilder) WebApplicationFactory<TProgram>.CreateHost(IHostBuilder) WebApplicationFactory<TProgram>.CreateClient() WebApplicationFactory<TProgram>.CreateClient(WebApplicationFactoryClientOptions) WebApplicationFactory<TProgram>.CreateDefaultClient(params DelegatingHandler[]) WebApplicationFactory<TProgram>.CreateDefaultClient(Uri, params DelegatingHandler[]) WebApplicationFactory<TProgram>.Dispose() WebApplicationFactory<TProgram>.Dispose(bool) WebApplicationFactory<TProgram>.DisposeAsync() WebApplicationFactory<TProgram>.Server WebApplicationFactory<TProgram>.Services WebApplicationFactory<TProgram>.Factories WebApplicationFactory<TProgram>.ClientOptions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfigureClient(HttpClient) Configures HttpClient instances created by this WebApplicationFactory<TEntryPoint>. protected override void ConfigureClient(HttpClient client) Parameters client HttpClient The HttpClient instance getting configured. ConfigureWebHost(IWebHostBuilder) Gives a fixture an opportunity to configure the application before it gets built. protected override void ConfigureWebHost(IWebHostBuilder builder) Parameters builder IWebHostBuilder The IWebHostBuilder for the application. StartTestContainer() public void StartTestContainer() StopTestContainer() public void StopTestContainer()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.AddToRoleEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.AddToRoleEndpointTests.html",
    "title": "Class AddToRoleEndpointTests | Authentica",
    "keywords": "Class AddToRoleEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class AddToRoleEndpointTests Inheritance object AddToRoleEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddToRole_Returns200Ok_WhenSuccessfullyAddedUserToRole() [Test] public Task AddToRole_Returns200Ok_WhenSuccessfullyAddedUserToRole() Returns Task AddToRole_Returns400BadRequest_WhenUnsuccessful() [Test] public Task AddToRole_Returns400BadRequest_WhenUnsuccessful() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.AdminResetPasswordEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.AdminResetPasswordEndpointTests.html",
    "title": "Class AdminResetPasswordEndpointTests | Authentica",
    "keywords": "Class AdminResetPasswordEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class AdminResetPasswordEndpointTests Inheritance object AdminResetPasswordEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() ResetPassword_Returns204NoContent_WhenResetIsSuccessful() [Test] public Task ResetPassword_Returns204NoContent_WhenResetIsSuccessful() Returns Task ResetPassword_Returns400BadRequest_WhenUserIsNotFound() [Test] public Task ResetPassword_Returns400BadRequest_WhenUserIsNotFound() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.AuthorizeEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.AuthorizeEndpointTests.html",
    "title": "Class AuthorizeEndpointTests | Authentica",
    "keywords": "Class AuthorizeEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class AuthorizeEndpointTests Inheritance object AuthorizeEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AuthorizeEndpoint_Returns302Found_WhenCodeIsRequestedForRegisteredApplication() [Test] public Task AuthorizeEndpoint_Returns302Found_WhenCodeIsRequestedForRegisteredApplication() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ConfirmEmailEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ConfirmEmailEndpointTests.html",
    "title": "Class ConfirmEmailEndpointTests | Authentica",
    "keywords": "Class ConfirmEmailEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ConfirmEmailEndpointTests Inheritance object ConfirmEmailEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfirmEmail_Returns200OK_WhenConfirmationIsSuccessful() [Test] public Task ConfirmEmail_Returns200OK_WhenConfirmationIsSuccessful() Returns Task ConfirmEmail_Returns500InternalServerError_WhenErrorsAreReturned() [Test] public Task ConfirmEmail_Returns500InternalServerError_WhenErrorsAreReturned() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateApplicationEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateApplicationEndpointTests.html",
    "title": "Class CreateApplicationEndpointTests | Authentica",
    "keywords": "Class CreateApplicationEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class CreateApplicationEndpointTests Inheritance object CreateApplicationEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateApplication_Returns201Created_WhenSuccessful() [Test] public Task CreateApplication_Returns201Created_WhenSuccessful() Returns Task CreateApplication_Returns400BadRequest_WhenApplicationExists() [Test] public Task CreateApplication_Returns400BadRequest_WhenApplicationExists() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateApplicationSecretEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateApplicationSecretEndpointTests.html",
    "title": "Class CreateApplicationSecretEndpointTests | Authentica",
    "keywords": "Class CreateApplicationSecretEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class CreateApplicationSecretEndpointTests Inheritance object CreateApplicationSecretEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateApplication_Returns201Created_WhenRequestIsValid() [Test] public Task CreateApplication_Returns201Created_WhenRequestIsValid() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateDeviceCodeEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateDeviceCodeEndpointTests.html",
    "title": "Class CreateDeviceCodeEndpointTests | Authentica",
    "keywords": "Class CreateDeviceCodeEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class CreateDeviceCodeEndpointTests Inheritance object CreateDeviceCodeEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateDeviceCode_Returns200OK_WhenDeviceCodeIsCreatedSuccessfully() [Test] public Task CreateDeviceCode_Returns200OK_WhenDeviceCodeIsCreatedSuccessfully() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateRoleEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.CreateRoleEndpointTests.html",
    "title": "Class CreateRoleEndpointTests | Authentica",
    "keywords": "Class CreateRoleEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class CreateRoleEndpointTests Inheritance object CreateRoleEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateRoleEndpoint_Returns201Created_WhenSuccessful() [Test] public Task CreateRoleEndpoint_Returns201Created_WhenSuccessful() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DeleteAccountEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DeleteAccountEndpointTests.html",
    "title": "Class DeleteAccountEndpointTests | Authentica",
    "keywords": "Class DeleteAccountEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class DeleteAccountEndpointTests Inheritance object DeleteAccountEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteAccount_Returns204NoContent_WhenSoftDeletionIsSuccessful() [Test] public Task DeleteAccount_Returns204NoContent_WhenSoftDeletionIsSuccessful() Returns Task DeleteAccount_Returns500InternalServerError_WhenSoftDeletionFails() [Test] public Task DeleteAccount_Returns500InternalServerError_WhenSoftDeletionFails() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DeleteApplicationEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DeleteApplicationEndpointTests.html",
    "title": "Class DeleteApplicationEndpointTests | Authentica",
    "keywords": "Class DeleteApplicationEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class DeleteApplicationEndpointTests Inheritance object DeleteApplicationEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteApplication_Returns204NoContent_WhenRequestIsValid() [Test] public Task DeleteApplication_Returns204NoContent_WhenRequestIsValid() Returns Task DeleteApplication_Returns400BadRequest_WhenApplicationIsNotFound() [Test] public Task DeleteApplication_Returns400BadRequest_WhenApplicationIsNotFound() Returns Task DeleteApplication_Returns500InternalServerError_WhenApplicationIsNotFound() [Test] public Task DeleteApplication_Returns500InternalServerError_WhenApplicationIsNotFound() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DeleteRoleEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DeleteRoleEndpointTests.html",
    "title": "Class DeleteRoleEndpointTests | Authentica",
    "keywords": "Class DeleteRoleEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class DeleteRoleEndpointTests Inheritance object DeleteRoleEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DeleteRole_Returns204NoContent_WhenSoftDeleteIsSuccessful() [Test] public Task DeleteRole_Returns204NoContent_WhenSoftDeleteIsSuccessful() Returns Task DeleteRole_Returns400BadRequest_WhenRoleIsNotFound() [Test] public Task DeleteRole_Returns400BadRequest_WhenRoleIsNotFound() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DisableMultiFactorEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.DisableMultiFactorEndpointTests.html",
    "title": "Class DisableMultiFactorEndpointTests | Authentica",
    "keywords": "Class DisableMultiFactorEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class DisableMultiFactorEndpointTests Inheritance object DisableMultiFactorEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DisableMultiFactor_Returns200OK_WhenSuccessful() [Test] public Task DisableMultiFactor_Returns200OK_WhenSuccessful() Returns Task DisableMultiFactor_Returns400BadRequest_WhenUserIsNotFound() [Test] public Task DisableMultiFactor_Returns400BadRequest_WhenUserIsNotFound() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.LoginEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.LoginEndpointTests.html",
    "title": "Class LoginEndpointTests | Authentica",
    "keywords": "Class LoginEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class LoginEndpointTests Inheritance object LoginEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods LoginEndpoint_Returns200OK_WhenLoginIsSuccessful() [Test] public Task LoginEndpoint_Returns200OK_WhenLoginIsSuccessful() Returns Task LoginEndpoint_Returns200OK_WhenMultiFactorIsRequired() [Test] public Task LoginEndpoint_Returns200OK_WhenMultiFactorIsRequired() Returns Task LoginEndpoint_Returns400BadRequest_WhenUserIsNotFound() [Test] public Task LoginEndpoint_Returns400BadRequest_WhenUserIsNotFound() Returns Task LoginEndpoint_Returns401Unauthorized_WhenLoginFails() [Test] public Task LoginEndpoint_Returns401Unauthorized_WhenLoginFails() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.LogoutEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.LogoutEndpointTests.html",
    "title": "Class LogoutEndpointTests | Authentica",
    "keywords": "Class LogoutEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class LogoutEndpointTests Inheritance object LogoutEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Logout_Returns204NoContent_WhenSignOutIsSuccessful() [Test] public Task Logout_Returns204NoContent_WhenSignOutIsSuccessful() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorLoginEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorLoginEndpointTests.html",
    "title": "Class MultiFactorLoginEndpointTests | Authentica",
    "keywords": "Class MultiFactorLoginEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class MultiFactorLoginEndpointTests Inheritance object MultiFactorLoginEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MultiFactorLogin_Returns200OK_WhenLoginIsSuccessful() [Test] public Task MultiFactorLogin_Returns200OK_WhenLoginIsSuccessful() Returns Task MultiFactorLogin_Returns400BadRequest_WhenUserIsNotFound() [Test] public Task MultiFactorLogin_Returns400BadRequest_WhenUserIsNotFound() Returns Task MultiFactorLogin_Returns401Unauthorized_WhenLoginIsUnsuccessful() [Test] public Task MultiFactorLogin_Returns401Unauthorized_WhenLoginIsUnsuccessful() Returns Task MultiFactorLogin_Returns401Unauthorized_WhenMFAIsNotEnabledSuccessfully() [Test] public Task MultiFactorLogin_Returns401Unauthorized_WhenMFAIsNotEnabledSuccessfully() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorManageAuthenticatorEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorManageAuthenticatorEndpointTests.html",
    "title": "Class MultiFactorManageAuthenticatorEndpointTests | Authentica",
    "keywords": "Class MultiFactorManageAuthenticatorEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll [TestFixture] public class MultiFactorManageAuthenticatorEndpointTests Inheritance object MultiFactorManageAuthenticatorEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MultiFactorManageAuthenticator_Returns200OK_WhenSuccessfullyEnabled() [Test] public Task MultiFactorManageAuthenticator_Returns200OK_WhenSuccessfullyEnabled() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorManageEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorManageEndpointTests.html",
    "title": "Class MultiFactorManageEndpointTests | Authentica",
    "keywords": "Class MultiFactorManageEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class MultiFactorManageEndpointTests Inheritance object MultiFactorManageEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MultiFactorManage_Returns204NoContent_WhenMultiFactorIsEnabledSuccessfully() [Test] public Task MultiFactorManage_Returns204NoContent_WhenMultiFactorIsEnabledSuccessfully() Returns Task MultiFactorManage_ReturnsBadRequest_WhenUserIsNotFound() [Test] public Task MultiFactorManage_ReturnsBadRequest_WhenUserIsNotFound() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorRecoveryCodesEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorRecoveryCodesEndpointTests.html",
    "title": "Class MultiFactorRecoveryCodesEndpointTests | Authentica",
    "keywords": "Class MultiFactorRecoveryCodesEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class MultiFactorRecoveryCodesEndpointTests Inheritance object MultiFactorRecoveryCodesEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MultiFactorRecoveryCodes_Returns200OK_WhenRecoveryCodesAreGeneratedSuccessfully() [Test] public Task MultiFactorRecoveryCodes_Returns200OK_WhenRecoveryCodesAreGeneratedSuccessfully() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorRecoveryCodesRedeemEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.MultiFactorRecoveryCodesRedeemEndpointTests.html",
    "title": "Class MultiFactorRecoveryCodesRedeemEndpointTests | Authentica",
    "keywords": "Class MultiFactorRecoveryCodesRedeemEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class MultiFactorRecoveryCodesRedeemEndpointTests Inheritance object MultiFactorRecoveryCodesRedeemEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods MultiFactorRecoveryReedem_Returns200OK_WhenRedeemIsSuccessful() [Test] public Task MultiFactorRecoveryReedem_Returns200OK_WhenRedeemIsSuccessful() Returns Task MultiFactorRecoveryReedem_Returns400BadRequest_WhenRedeemIsUnsuccessful() [Test] public Task MultiFactorRecoveryReedem_Returns400BadRequest_WhenRedeemIsUnsuccessful() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadAllActivitiesEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadAllActivitiesEndpointTests.html",
    "title": "Class ReadAllActivitiesEndpointTests | Authentica",
    "keywords": "Class ReadAllActivitiesEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ReadAllActivitiesEndpointTests Inheritance object ReadAllActivitiesEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() ReadAllActivities_Returns200OK_WhenSuccessful() [Test] public Task ReadAllActivities_Returns200OK_WhenSuccessful() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadAllApplicationsEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadAllApplicationsEndpointTests.html",
    "title": "Class ReadAllApplicationsEndpointTests | Authentica",
    "keywords": "Class ReadAllApplicationsEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ReadAllApplicationsEndpointTests Inheritance object ReadAllApplicationsEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAllApplications_Returns200OK_WhenSuccessful() [Test] public Task GetAllApplications_Returns200OK_WhenSuccessful() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadAllUsersEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadAllUsersEndpointTests.html",
    "title": "Class ReadAllUsersEndpointTests | Authentica",
    "keywords": "Class ReadAllUsersEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ReadAllUsersEndpointTests Inheritance object ReadAllUsersEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAllUsers_Returns200OK_WhenSuccessful() [Test] public Task GetAllUsers_Returns200OK_WhenSuccessful() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadApplicationByNameEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadApplicationByNameEndpointTests.html",
    "title": "Class ReadApplicationByNameEndpointTests | Authentica",
    "keywords": "Class ReadApplicationByNameEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ReadApplicationByNameEndpointTests Inheritance object ReadApplicationByNameEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() ReadApplicationByName_Returns200Ok_WhenRequestIsValid() [Test] public Task ReadApplicationByName_Returns200Ok_WhenRequestIsValid() Returns Task ReadApplicationByName_Returns400BadRequest_WhenApplicationIsNotFound() [Test] public Task ReadApplicationByName_Returns400BadRequest_WhenApplicationIsNotFound() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadApplicationsEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadApplicationsEndpointTests.html",
    "title": "Class ReadApplicationsEndpointTests | Authentica",
    "keywords": "Class ReadApplicationsEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ReadApplicationsEndpointTests Inheritance object ReadApplicationsEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() ReadApplications_Returns200Ok_WhenRequestIsValid() [Test] public Task ReadApplications_Returns200Ok_WhenRequestIsValid() Returns Task ReadApplications_ReturnsBadRequest_WhenUserIsNotFound() [Test] public Task ReadApplications_ReturnsBadRequest_WhenUserIsNotFound() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadRolesEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ReadRolesEndpointTests.html",
    "title": "Class ReadRolesEndpointTests | Authentica",
    "keywords": "Class ReadRolesEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ReadRolesEndpointTests Inheritance object ReadRolesEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetRoles_Returns200Ok_WithListOfRoles() [Test] public Task GetRoles_Returns200Ok_WithListOfRoles() Returns Task OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.RegisterAdminEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.RegisterAdminEndpointTests.html",
    "title": "Class RegisterAdminEndpointTests | Authentica",
    "keywords": "Class RegisterAdminEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class RegisterAdminEndpointTests Inheritance object RegisterAdminEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() RegisterAdmin_Returns201Created_WhenRegisterIsSuccessful() [Test] public Task RegisterAdmin_Returns201Created_WhenRegisterIsSuccessful() Returns Task RegisterAdmin_Returns500InternalServerError_WhenRegisterFails() [Test] public Task RegisterAdmin_Returns500InternalServerError_WhenRegisterFails() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.RegisterEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.RegisterEndpointTests.html",
    "title": "Class RegisterEndpointTests | Authentica",
    "keywords": "Class RegisterEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class RegisterEndpointTests Inheritance object RegisterEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() Register_Returns201Created_WhenUserRegistrationIsSuccessful() [Test] public Task Register_Returns201Created_WhenUserRegistrationIsSuccessful() Returns Task Register_Returns409Conflict_WhenUserIsAlreadyRegistered() [Test] public Task Register_Returns409Conflict_WhenUserIsAlreadyRegistered() Returns Task Register_Returns500InternalServerError_WhenCreateFails() [Test] public Task Register_Returns500InternalServerError_WhenCreateFails() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ResetPasswordEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.ResetPasswordEndpointTests.html",
    "title": "Class ResetPasswordEndpointTests | Authentica",
    "keywords": "Class ResetPasswordEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class ResetPasswordEndpointTests Inheritance object ResetPasswordEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() ResetPassword_Returns204NoContent_WhenResetIsSucessful() [Test] public Task ResetPassword_Returns204NoContent_WhenResetIsSucessful() Returns Task ResetPassword_Returns500InternalServerError_WhenResetIsUnsucessful() [Test] public Task ResetPassword_Returns500InternalServerError_WhenResetIsUnsucessful() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.SendTokenEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.SendTokenEndpointTests.html",
    "title": "Class SendTokenEndpointTests | Authentica",
    "keywords": "Class SendTokenEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class SendTokenEndpointTests Inheritance object SendTokenEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() SendTokenEndpoint_ReturnsOK_ForDifferentTokenTypes(string) [TestCase(\"multi_factor\")] [TestCase(\"confirm_email\")] [TestCase(\"reset_password\")] [TestCase(\"update_email\")] [TestCase(\"update_phonenumber\")] public Task SendTokenEndpoint_ReturnsOK_ForDifferentTokenTypes(string tokenType) Parameters tokenType string Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.TokenEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.TokenEndpointTests.html",
    "title": "Class TokenEndpointTests | Authentica",
    "keywords": "Class TokenEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class TokenEndpointTests Inheritance object TokenEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() TokenEndpoint_ReturnsOK_WhenClientCredentialsAreUsed() [Test] public Task TokenEndpoint_ReturnsOK_WhenClientCredentialsAreUsed() Returns Task TokenEndpoint_ReturnsOK_WhenCodeIsUsed() [Test] public Task TokenEndpoint_ReturnsOK_WhenCodeIsUsed() Returns Task TokenEndpoint_ReturnsOK_WhenRefreshTokenIsUsed() [Test] public Task TokenEndpoint_ReturnsOK_WhenRefreshTokenIsUsed() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateAddressEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateAddressEndpointTests.html",
    "title": "Class UpdateAddressEndpointTests | Authentica",
    "keywords": "Class UpdateAddressEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class UpdateAddressEndpointTests Inheritance object UpdateAddressEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdateAddress_Returns200OK_WhenUpdateIsSuccessful() [Test] public Task UpdateAddress_Returns200OK_WhenUpdateIsSuccessful() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateApplicationByNameEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateApplicationByNameEndpointTests.html",
    "title": "Class UpdateApplicationByNameEndpointTests | Authentica",
    "keywords": "Class UpdateApplicationByNameEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class UpdateApplicationByNameEndpointTests Inheritance object UpdateApplicationByNameEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdateApplication_Returns200OK_WhenUpdateIsSuccessful() [Test] public Task UpdateApplication_Returns200OK_WhenUpdateIsSuccessful() Returns Task UpdateApplication_Returns400BadRequest_WhenAppIsNull() [Test] public Task UpdateApplication_Returns400BadRequest_WhenAppIsNull() Returns Task UpdateApplication_Returns400BadRequest_WhenUserIsNull() [Test] public Task UpdateApplication_Returns400BadRequest_WhenUserIsNull() Returns Task UpdateApplication_Returns500InternalServerError_WhenUpdateFails() [Test] public Task UpdateApplication_Returns500InternalServerError_WhenUpdateFails() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateEmailEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateEmailEndpointTests.html",
    "title": "Class UpdateEmailEndpointTests | Authentica",
    "keywords": "Class UpdateEmailEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class UpdateEmailEndpointTests Inheritance object UpdateEmailEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdateEmail_Returns200OK_WhenUpdateIsSuccessful() [Test] public Task UpdateEmail_Returns200OK_WhenUpdateIsSuccessful() Returns Task UpdateEmail_ReturnsBadRequest_WhenUpdateIsUnsuccessful() [Test] public Task UpdateEmail_ReturnsBadRequest_WhenUpdateIsUnsuccessful() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdatePhoneNumberEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdatePhoneNumberEndpointTests.html",
    "title": "Class UpdatePhoneNumberEndpointTests | Authentica",
    "keywords": "Class UpdatePhoneNumberEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class UpdatePhoneNumberEndpointTests Inheritance object UpdatePhoneNumberEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdatePhoneNumber_Returns200OK_WhenUpdateIsSuccessful() [Test] public Task UpdatePhoneNumber_Returns200OK_WhenUpdateIsSuccessful() Returns Task UpdatePhoneNumber_ReturnsBadRequest_WhenUpdateIsUnsuccessful() [Test] public Task UpdatePhoneNumber_ReturnsBadRequest_WhenUpdateIsUnsuccessful() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateRoleEndpointTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.UpdateRoleEndpointTests.html",
    "title": "Class UpdateRoleEndpointTests | Authentica",
    "keywords": "Class UpdateRoleEndpointTests Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Assembly Authentica.Service.Identity.Tests.dll public class UpdateRoleEndpointTests Inheritance object UpdateRoleEndpointTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OneTimeSetup() [OneTimeSetUp] public Task OneTimeSetup() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown() UpdateRole_Returns204NoContent_WhenUpdateIsSuccessful() [Test] public Task UpdateRole_Returns204NoContent_WhenUpdateIsSuccessful() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.Endpoints.html",
    "title": "Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints | Authentica",
    "keywords": "Namespace Authentica.Service.Identity.Tests.IntegrationTests.Endpoints Classes AddToRoleEndpointTests AdminResetPasswordEndpointTests AuthorizeEndpointTests ConfirmEmailEndpointTests CreateApplicationEndpointTests CreateApplicationSecretEndpointTests CreateDeviceCodeEndpointTests CreateRoleEndpointTests DeleteAccountEndpointTests DeleteApplicationEndpointTests DeleteRoleEndpointTests DisableMultiFactorEndpointTests LoginEndpointTests LogoutEndpointTests MultiFactorLoginEndpointTests MultiFactorManageAuthenticatorEndpointTests MultiFactorManageEndpointTests MultiFactorRecoveryCodesEndpointTests MultiFactorRecoveryCodesRedeemEndpointTests ReadAllActivitiesEndpointTests ReadAllApplicationsEndpointTests ReadAllUsersEndpointTests ReadApplicationByNameEndpointTests ReadApplicationsEndpointTests ReadRolesEndpointTests RegisterAdminEndpointTests RegisterEndpointTests ResetPasswordEndpointTests SendTokenEndpointTests TokenEndpointTests UpdateAddressEndpointTests UpdateApplicationByNameEndpointTests UpdateEmailEndpointTests UpdatePhoneNumberEndpointTests UpdateRoleEndpointTests"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.TestFixture-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.TestFixture-1.html",
    "title": "Class TestFixture<TProgram> | Authentica",
    "keywords": "Class TestFixture<TProgram> Namespace Authentica.Service.Identity.Tests.IntegrationTests Assembly Authentica.Service.Identity.Tests.dll [TestFixture] public class TestFixture<TProgram> where TProgram : class Type Parameters TProgram Inheritance object TestFixture<TProgram> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken public string AccessToken { get; } Property Value string Client public HttpClient Client { get; } Property Value HttpClient WebApplicationFactory public CustomWebApplicationFactory<TProgram> WebApplicationFactory { get; } Property Value CustomWebApplicationFactory<TProgram> Methods CreateAuthenticatedClient(Action<IServiceCollection>) public HttpClient CreateAuthenticatedClient(Action<IServiceCollection> configureServices = null) Parameters configureServices Action<IServiceCollection> Returns HttpClient OneTimeSetUpAsync() [OneTimeSetUp] public Task OneTimeSetUpAsync() Returns Task OneTimeTearDown() [OneTimeTearDown] public void OneTimeTearDown()"
  },
  "api/Authentica.Service.Identity.Tests.IntegrationTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.IntegrationTests.html",
    "title": "Namespace Authentica.Service.Identity.Tests.IntegrationTests | Authentica",
    "keywords": "Namespace Authentica.Service.Identity.Tests.IntegrationTests Classes AccountPurgeBackgroundServiceTests AccountPurgeExposeProtected ApplicationPurgeBackgroundServiceTests ApplicationPurgeExposeProtected CustomWebApplicationFactory<TProgram> TestFixture<TProgram>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.ApplicationReadStoreMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.ApplicationReadStoreMock.html",
    "title": "Class ApplicationReadStoreMock | Authentica",
    "keywords": "Class ApplicationReadStoreMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class ApplicationReadStoreMock : Mock<IApplicationReadStore>, IFluentInterface, IMock<IApplicationReadStore>, IMockBase<Mock<IApplicationReadStore>> Inheritance object Mock Mock<IApplicationReadStore> ApplicationReadStoreMock Implements IFluentInterface IMock<IApplicationReadStore> IMockBase<Mock<IApplicationReadStore>> Inherited Members Mock<IApplicationReadStore>.ToString() Mock<IApplicationReadStore>.OnGetObject() Mock<IApplicationReadStore>.As<TInterface>() Mock<IApplicationReadStore>.Setup(Expression<Action<IApplicationReadStore>>) Mock<IApplicationReadStore>.Setup<TResult>(Expression<Func<IApplicationReadStore, TResult>>) Mock<IApplicationReadStore>.SetupGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>) Mock<IApplicationReadStore>.SetupSet<TProperty>(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.SetupSet(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.SetupAdd(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.SetupRemove(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.SetupProperty<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>) Mock<IApplicationReadStore>.SetupProperty<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, TProperty) Mock<IApplicationReadStore>.SetupAllProperties() Mock<IApplicationReadStore>.SetupSequence<TResult>(Expression<Func<IApplicationReadStore, TResult>>) Mock<IApplicationReadStore>.SetupSequence(Expression<Action<IApplicationReadStore>>) Mock<IApplicationReadStore>.When(Func<bool>) Mock<IApplicationReadStore>.Verify(Expression<Action<IApplicationReadStore>>) Mock<IApplicationReadStore>.Verify(Expression<Action<IApplicationReadStore>>, Times) Mock<IApplicationReadStore>.Verify(Expression<Action<IApplicationReadStore>>, Func<Times>) Mock<IApplicationReadStore>.Verify(Expression<Action<IApplicationReadStore>>, string) Mock<IApplicationReadStore>.Verify(Expression<Action<IApplicationReadStore>>, Times, string) Mock<IApplicationReadStore>.Verify(Expression<Action<IApplicationReadStore>>, Func<Times>, string) Mock<IApplicationReadStore>.Verify<TResult>(Expression<Func<IApplicationReadStore, TResult>>) Mock<IApplicationReadStore>.Verify<TResult>(Expression<Func<IApplicationReadStore, TResult>>, Times) Mock<IApplicationReadStore>.Verify<TResult>(Expression<Func<IApplicationReadStore, TResult>>, Func<Times>) Mock<IApplicationReadStore>.Verify<TResult>(Expression<Func<IApplicationReadStore, TResult>>, string) Mock<IApplicationReadStore>.Verify<TResult>(Expression<Func<IApplicationReadStore, TResult>>, Times, string) Mock<IApplicationReadStore>.VerifyGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>) Mock<IApplicationReadStore>.VerifyGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, Times) Mock<IApplicationReadStore>.VerifyGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, Func<Times>) Mock<IApplicationReadStore>.VerifyGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, string) Mock<IApplicationReadStore>.VerifyGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, Times, string) Mock<IApplicationReadStore>.VerifyGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, Func<Times>, string) Mock<IApplicationReadStore>.VerifySet(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.VerifySet(Action<IApplicationReadStore>, Times) Mock<IApplicationReadStore>.VerifySet(Action<IApplicationReadStore>, Func<Times>) Mock<IApplicationReadStore>.VerifySet(Action<IApplicationReadStore>, string) Mock<IApplicationReadStore>.VerifySet(Action<IApplicationReadStore>, Times, string) Mock<IApplicationReadStore>.VerifySet(Action<IApplicationReadStore>, Func<Times>, string) Mock<IApplicationReadStore>.VerifyAdd(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.VerifyAdd(Action<IApplicationReadStore>, Times) Mock<IApplicationReadStore>.VerifyAdd(Action<IApplicationReadStore>, Func<Times>) Mock<IApplicationReadStore>.VerifyAdd(Action<IApplicationReadStore>, string) Mock<IApplicationReadStore>.VerifyAdd(Action<IApplicationReadStore>, Times, string) Mock<IApplicationReadStore>.VerifyAdd(Action<IApplicationReadStore>, Func<Times>, string) Mock<IApplicationReadStore>.VerifyRemove(Action<IApplicationReadStore>) Mock<IApplicationReadStore>.VerifyRemove(Action<IApplicationReadStore>, Times) Mock<IApplicationReadStore>.VerifyRemove(Action<IApplicationReadStore>, Func<Times>) Mock<IApplicationReadStore>.VerifyRemove(Action<IApplicationReadStore>, string) Mock<IApplicationReadStore>.VerifyRemove(Action<IApplicationReadStore>, Times, string) Mock<IApplicationReadStore>.VerifyRemove(Action<IApplicationReadStore>, Func<Times>, string) Mock<IApplicationReadStore>.VerifyNoOtherCalls() Mock<IApplicationReadStore>.Raise(Action<IApplicationReadStore>, EventArgs) Mock<IApplicationReadStore>.Raise(Action<IApplicationReadStore>, params object[]) Mock<IApplicationReadStore>.RaiseAsync(Action<IApplicationReadStore>, params object[]) Mock<IApplicationReadStore>.Expect(Expression<Action<IApplicationReadStore>>) Mock<IApplicationReadStore>.Expect<TResult>(Expression<Func<IApplicationReadStore, TResult>>) Mock<IApplicationReadStore>.ExpectGet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>) Mock<IApplicationReadStore>.ExpectSet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>) Mock<IApplicationReadStore>.ExpectSet<TProperty>(Expression<Func<IApplicationReadStore, TProperty>>, TProperty) Mock<IApplicationReadStore>.Behavior Mock<IApplicationReadStore>.CallBase Mock<IApplicationReadStore>.DefaultValueProvider Mock<IApplicationReadStore>.Object Mock<IApplicationReadStore>.Name Mock<IApplicationReadStore>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<IApplicationReadStore> Mock() Returns Mock<IApplicationReadStore>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.ApplicationWriteStoreMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.ApplicationWriteStoreMock.html",
    "title": "Class ApplicationWriteStoreMock | Authentica",
    "keywords": "Class ApplicationWriteStoreMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class ApplicationWriteStoreMock : Mock<IApplicationWriteStore>, IFluentInterface, IMock<IApplicationWriteStore>, IMockBase<Mock<IApplicationWriteStore>> Inheritance object Mock Mock<IApplicationWriteStore> ApplicationWriteStoreMock Implements IFluentInterface IMock<IApplicationWriteStore> IMockBase<Mock<IApplicationWriteStore>> Inherited Members Mock<IApplicationWriteStore>.ToString() Mock<IApplicationWriteStore>.OnGetObject() Mock<IApplicationWriteStore>.As<TInterface>() Mock<IApplicationWriteStore>.Setup(Expression<Action<IApplicationWriteStore>>) Mock<IApplicationWriteStore>.Setup<TResult>(Expression<Func<IApplicationWriteStore, TResult>>) Mock<IApplicationWriteStore>.SetupGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>) Mock<IApplicationWriteStore>.SetupSet<TProperty>(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.SetupSet(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.SetupAdd(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.SetupRemove(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.SetupProperty<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>) Mock<IApplicationWriteStore>.SetupProperty<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, TProperty) Mock<IApplicationWriteStore>.SetupAllProperties() Mock<IApplicationWriteStore>.SetupSequence<TResult>(Expression<Func<IApplicationWriteStore, TResult>>) Mock<IApplicationWriteStore>.SetupSequence(Expression<Action<IApplicationWriteStore>>) Mock<IApplicationWriteStore>.When(Func<bool>) Mock<IApplicationWriteStore>.Verify(Expression<Action<IApplicationWriteStore>>) Mock<IApplicationWriteStore>.Verify(Expression<Action<IApplicationWriteStore>>, Times) Mock<IApplicationWriteStore>.Verify(Expression<Action<IApplicationWriteStore>>, Func<Times>) Mock<IApplicationWriteStore>.Verify(Expression<Action<IApplicationWriteStore>>, string) Mock<IApplicationWriteStore>.Verify(Expression<Action<IApplicationWriteStore>>, Times, string) Mock<IApplicationWriteStore>.Verify(Expression<Action<IApplicationWriteStore>>, Func<Times>, string) Mock<IApplicationWriteStore>.Verify<TResult>(Expression<Func<IApplicationWriteStore, TResult>>) Mock<IApplicationWriteStore>.Verify<TResult>(Expression<Func<IApplicationWriteStore, TResult>>, Times) Mock<IApplicationWriteStore>.Verify<TResult>(Expression<Func<IApplicationWriteStore, TResult>>, Func<Times>) Mock<IApplicationWriteStore>.Verify<TResult>(Expression<Func<IApplicationWriteStore, TResult>>, string) Mock<IApplicationWriteStore>.Verify<TResult>(Expression<Func<IApplicationWriteStore, TResult>>, Times, string) Mock<IApplicationWriteStore>.VerifyGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>) Mock<IApplicationWriteStore>.VerifyGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, Times) Mock<IApplicationWriteStore>.VerifyGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, Func<Times>) Mock<IApplicationWriteStore>.VerifyGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, string) Mock<IApplicationWriteStore>.VerifyGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, Times, string) Mock<IApplicationWriteStore>.VerifyGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, Func<Times>, string) Mock<IApplicationWriteStore>.VerifySet(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.VerifySet(Action<IApplicationWriteStore>, Times) Mock<IApplicationWriteStore>.VerifySet(Action<IApplicationWriteStore>, Func<Times>) Mock<IApplicationWriteStore>.VerifySet(Action<IApplicationWriteStore>, string) Mock<IApplicationWriteStore>.VerifySet(Action<IApplicationWriteStore>, Times, string) Mock<IApplicationWriteStore>.VerifySet(Action<IApplicationWriteStore>, Func<Times>, string) Mock<IApplicationWriteStore>.VerifyAdd(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.VerifyAdd(Action<IApplicationWriteStore>, Times) Mock<IApplicationWriteStore>.VerifyAdd(Action<IApplicationWriteStore>, Func<Times>) Mock<IApplicationWriteStore>.VerifyAdd(Action<IApplicationWriteStore>, string) Mock<IApplicationWriteStore>.VerifyAdd(Action<IApplicationWriteStore>, Times, string) Mock<IApplicationWriteStore>.VerifyAdd(Action<IApplicationWriteStore>, Func<Times>, string) Mock<IApplicationWriteStore>.VerifyRemove(Action<IApplicationWriteStore>) Mock<IApplicationWriteStore>.VerifyRemove(Action<IApplicationWriteStore>, Times) Mock<IApplicationWriteStore>.VerifyRemove(Action<IApplicationWriteStore>, Func<Times>) Mock<IApplicationWriteStore>.VerifyRemove(Action<IApplicationWriteStore>, string) Mock<IApplicationWriteStore>.VerifyRemove(Action<IApplicationWriteStore>, Times, string) Mock<IApplicationWriteStore>.VerifyRemove(Action<IApplicationWriteStore>, Func<Times>, string) Mock<IApplicationWriteStore>.VerifyNoOtherCalls() Mock<IApplicationWriteStore>.Raise(Action<IApplicationWriteStore>, EventArgs) Mock<IApplicationWriteStore>.Raise(Action<IApplicationWriteStore>, params object[]) Mock<IApplicationWriteStore>.RaiseAsync(Action<IApplicationWriteStore>, params object[]) Mock<IApplicationWriteStore>.Expect(Expression<Action<IApplicationWriteStore>>) Mock<IApplicationWriteStore>.Expect<TResult>(Expression<Func<IApplicationWriteStore, TResult>>) Mock<IApplicationWriteStore>.ExpectGet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>) Mock<IApplicationWriteStore>.ExpectSet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>) Mock<IApplicationWriteStore>.ExpectSet<TProperty>(Expression<Func<IApplicationWriteStore, TProperty>>, TProperty) Mock<IApplicationWriteStore>.Behavior Mock<IApplicationWriteStore>.CallBase Mock<IApplicationWriteStore>.DefaultValueProvider Mock<IApplicationWriteStore>.Object Mock<IApplicationWriteStore>.Name Mock<IApplicationWriteStore>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<IApplicationWriteStore> Mock() Returns Mock<IApplicationWriteStore>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.BusMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.BusMock.html",
    "title": "Class BusMock | Authentica",
    "keywords": "Class BusMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class BusMock : Mock<IBus>, IFluentInterface, IMock<IBus>, IMockBase<BusMock> Inheritance object Mock Mock<IBus> BusMock Implements IFluentInterface IMock<IBus> IMockBase<BusMock> Inherited Members Mock<IBus>.ToString() Mock<IBus>.OnGetObject() Mock<IBus>.As<TInterface>() Mock<IBus>.Setup(Expression<Action<IBus>>) Mock<IBus>.Setup<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.SetupGet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.SetupSet<TProperty>(Action<IBus>) Mock<IBus>.SetupSet(Action<IBus>) Mock<IBus>.SetupAdd(Action<IBus>) Mock<IBus>.SetupRemove(Action<IBus>) Mock<IBus>.SetupProperty<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.SetupProperty<TProperty>(Expression<Func<IBus, TProperty>>, TProperty) Mock<IBus>.SetupAllProperties() Mock<IBus>.SetupSequence<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.SetupSequence(Expression<Action<IBus>>) Mock<IBus>.When(Func<bool>) Mock<IBus>.Verify(Expression<Action<IBus>>) Mock<IBus>.Verify(Expression<Action<IBus>>, Times) Mock<IBus>.Verify(Expression<Action<IBus>>, Func<Times>) Mock<IBus>.Verify(Expression<Action<IBus>>, string) Mock<IBus>.Verify(Expression<Action<IBus>>, Times, string) Mock<IBus>.Verify(Expression<Action<IBus>>, Func<Times>, string) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, Times) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, Func<Times>) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, string) Mock<IBus>.Verify<TResult>(Expression<Func<IBus, TResult>>, Times, string) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Times) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Func<Times>) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, string) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Times, string) Mock<IBus>.VerifyGet<TProperty>(Expression<Func<IBus, TProperty>>, Func<Times>, string) Mock<IBus>.VerifySet(Action<IBus>) Mock<IBus>.VerifySet(Action<IBus>, Times) Mock<IBus>.VerifySet(Action<IBus>, Func<Times>) Mock<IBus>.VerifySet(Action<IBus>, string) Mock<IBus>.VerifySet(Action<IBus>, Times, string) Mock<IBus>.VerifySet(Action<IBus>, Func<Times>, string) Mock<IBus>.VerifyAdd(Action<IBus>) Mock<IBus>.VerifyAdd(Action<IBus>, Times) Mock<IBus>.VerifyAdd(Action<IBus>, Func<Times>) Mock<IBus>.VerifyAdd(Action<IBus>, string) Mock<IBus>.VerifyAdd(Action<IBus>, Times, string) Mock<IBus>.VerifyAdd(Action<IBus>, Func<Times>, string) Mock<IBus>.VerifyRemove(Action<IBus>) Mock<IBus>.VerifyRemove(Action<IBus>, Times) Mock<IBus>.VerifyRemove(Action<IBus>, Func<Times>) Mock<IBus>.VerifyRemove(Action<IBus>, string) Mock<IBus>.VerifyRemove(Action<IBus>, Times, string) Mock<IBus>.VerifyRemove(Action<IBus>, Func<Times>, string) Mock<IBus>.VerifyNoOtherCalls() Mock<IBus>.Raise(Action<IBus>, EventArgs) Mock<IBus>.Raise(Action<IBus>, params object[]) Mock<IBus>.RaiseAsync(Action<IBus>, params object[]) Mock<IBus>.Expect(Expression<Action<IBus>>) Mock<IBus>.Expect<TResult>(Expression<Func<IBus, TResult>>) Mock<IBus>.ExpectGet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.ExpectSet<TProperty>(Expression<Func<IBus, TProperty>>) Mock<IBus>.ExpectSet<TProperty>(Expression<Func<IBus, TProperty>>, TProperty) Mock<IBus>.Behavior Mock<IBus>.CallBase Mock<IBus>.DefaultValueProvider Mock<IBus>.Object Mock<IBus>.Name Mock<IBus>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public BusMock Mock() Returns BusMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.ClaimsPrincipalMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.ClaimsPrincipalMock.html",
    "title": "Class ClaimsPrincipalMock | Authentica",
    "keywords": "Class ClaimsPrincipalMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class ClaimsPrincipalMock : Mock<ClaimsPrincipal>, IFluentInterface, IMock<ClaimsPrincipal>, IMockBase<ClaimsPrincipalMock> Inheritance object Mock Mock<ClaimsPrincipal> ClaimsPrincipalMock Implements IFluentInterface IMock<ClaimsPrincipal> IMockBase<ClaimsPrincipalMock> Inherited Members Mock<ClaimsPrincipal>.ToString() Mock<ClaimsPrincipal>.OnGetObject() Mock<ClaimsPrincipal>.As<TInterface>() Mock<ClaimsPrincipal>.Setup(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.Setup<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.SetupGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.SetupSet<TProperty>(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupSet(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupAdd(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupRemove(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.SetupProperty<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.SetupProperty<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, TProperty) Mock<ClaimsPrincipal>.SetupAllProperties() Mock<ClaimsPrincipal>.SetupSequence<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.SetupSequence(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.When(Func<bool>) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Times) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Func<Times>) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, string) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Times, string) Mock<ClaimsPrincipal>.Verify(Expression<Action<ClaimsPrincipal>>, Func<Times>, string) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, Times) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, Func<Times>) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, string) Mock<ClaimsPrincipal>.Verify<TResult>(Expression<Func<ClaimsPrincipal, TResult>>, Times, string) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Times) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Func<Times>) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, string) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Times, string) Mock<ClaimsPrincipal>.VerifyGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Times) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Func<Times>) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, string) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Times, string) Mock<ClaimsPrincipal>.VerifySet(Action<ClaimsPrincipal>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Times) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Func<Times>) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, string) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Times, string) Mock<ClaimsPrincipal>.VerifyAdd(Action<ClaimsPrincipal>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Times) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Func<Times>) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, string) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Times, string) Mock<ClaimsPrincipal>.VerifyRemove(Action<ClaimsPrincipal>, Func<Times>, string) Mock<ClaimsPrincipal>.VerifyNoOtherCalls() Mock<ClaimsPrincipal>.Raise(Action<ClaimsPrincipal>, EventArgs) Mock<ClaimsPrincipal>.Raise(Action<ClaimsPrincipal>, params object[]) Mock<ClaimsPrincipal>.RaiseAsync(Action<ClaimsPrincipal>, params object[]) Mock<ClaimsPrincipal>.Expect(Expression<Action<ClaimsPrincipal>>) Mock<ClaimsPrincipal>.Expect<TResult>(Expression<Func<ClaimsPrincipal, TResult>>) Mock<ClaimsPrincipal>.ExpectGet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.ExpectSet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>) Mock<ClaimsPrincipal>.ExpectSet<TProperty>(Expression<Func<ClaimsPrincipal, TProperty>>, TProperty) Mock<ClaimsPrincipal>.Behavior Mock<ClaimsPrincipal>.CallBase Mock<ClaimsPrincipal>.DefaultValueProvider Mock<ClaimsPrincipal>.Object Mock<ClaimsPrincipal>.Name Mock<ClaimsPrincipal>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public ClaimsPrincipalMock Mock() Returns ClaimsPrincipalMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.DbContextMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.DbContextMock.html",
    "title": "Class DbContextMock | Authentica",
    "keywords": "Class DbContextMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class DbContextMock : Mock<AppDbContext>, IFluentInterface, IMock<AppDbContext>, IMockBase<Mock<AppDbContext>> Inheritance object Mock Mock<AppDbContext> DbContextMock Implements IFluentInterface IMock<AppDbContext> IMockBase<Mock<AppDbContext>> Inherited Members Mock<AppDbContext>.ToString() Mock<AppDbContext>.OnGetObject() Mock<AppDbContext>.As<TInterface>() Mock<AppDbContext>.Setup(Expression<Action<AppDbContext>>) Mock<AppDbContext>.Setup<TResult>(Expression<Func<AppDbContext, TResult>>) Mock<AppDbContext>.SetupGet<TProperty>(Expression<Func<AppDbContext, TProperty>>) Mock<AppDbContext>.SetupSet<TProperty>(Action<AppDbContext>) Mock<AppDbContext>.SetupSet(Action<AppDbContext>) Mock<AppDbContext>.SetupAdd(Action<AppDbContext>) Mock<AppDbContext>.SetupRemove(Action<AppDbContext>) Mock<AppDbContext>.SetupProperty<TProperty>(Expression<Func<AppDbContext, TProperty>>) Mock<AppDbContext>.SetupProperty<TProperty>(Expression<Func<AppDbContext, TProperty>>, TProperty) Mock<AppDbContext>.SetupAllProperties() Mock<AppDbContext>.SetupSequence<TResult>(Expression<Func<AppDbContext, TResult>>) Mock<AppDbContext>.SetupSequence(Expression<Action<AppDbContext>>) Mock<AppDbContext>.When(Func<bool>) Mock<AppDbContext>.Verify(Expression<Action<AppDbContext>>) Mock<AppDbContext>.Verify(Expression<Action<AppDbContext>>, Times) Mock<AppDbContext>.Verify(Expression<Action<AppDbContext>>, Func<Times>) Mock<AppDbContext>.Verify(Expression<Action<AppDbContext>>, string) Mock<AppDbContext>.Verify(Expression<Action<AppDbContext>>, Times, string) Mock<AppDbContext>.Verify(Expression<Action<AppDbContext>>, Func<Times>, string) Mock<AppDbContext>.Verify<TResult>(Expression<Func<AppDbContext, TResult>>) Mock<AppDbContext>.Verify<TResult>(Expression<Func<AppDbContext, TResult>>, Times) Mock<AppDbContext>.Verify<TResult>(Expression<Func<AppDbContext, TResult>>, Func<Times>) Mock<AppDbContext>.Verify<TResult>(Expression<Func<AppDbContext, TResult>>, string) Mock<AppDbContext>.Verify<TResult>(Expression<Func<AppDbContext, TResult>>, Times, string) Mock<AppDbContext>.VerifyGet<TProperty>(Expression<Func<AppDbContext, TProperty>>) Mock<AppDbContext>.VerifyGet<TProperty>(Expression<Func<AppDbContext, TProperty>>, Times) Mock<AppDbContext>.VerifyGet<TProperty>(Expression<Func<AppDbContext, TProperty>>, Func<Times>) Mock<AppDbContext>.VerifyGet<TProperty>(Expression<Func<AppDbContext, TProperty>>, string) Mock<AppDbContext>.VerifyGet<TProperty>(Expression<Func<AppDbContext, TProperty>>, Times, string) Mock<AppDbContext>.VerifyGet<TProperty>(Expression<Func<AppDbContext, TProperty>>, Func<Times>, string) Mock<AppDbContext>.VerifySet(Action<AppDbContext>) Mock<AppDbContext>.VerifySet(Action<AppDbContext>, Times) Mock<AppDbContext>.VerifySet(Action<AppDbContext>, Func<Times>) Mock<AppDbContext>.VerifySet(Action<AppDbContext>, string) Mock<AppDbContext>.VerifySet(Action<AppDbContext>, Times, string) Mock<AppDbContext>.VerifySet(Action<AppDbContext>, Func<Times>, string) Mock<AppDbContext>.VerifyAdd(Action<AppDbContext>) Mock<AppDbContext>.VerifyAdd(Action<AppDbContext>, Times) Mock<AppDbContext>.VerifyAdd(Action<AppDbContext>, Func<Times>) Mock<AppDbContext>.VerifyAdd(Action<AppDbContext>, string) Mock<AppDbContext>.VerifyAdd(Action<AppDbContext>, Times, string) Mock<AppDbContext>.VerifyAdd(Action<AppDbContext>, Func<Times>, string) Mock<AppDbContext>.VerifyRemove(Action<AppDbContext>) Mock<AppDbContext>.VerifyRemove(Action<AppDbContext>, Times) Mock<AppDbContext>.VerifyRemove(Action<AppDbContext>, Func<Times>) Mock<AppDbContext>.VerifyRemove(Action<AppDbContext>, string) Mock<AppDbContext>.VerifyRemove(Action<AppDbContext>, Times, string) Mock<AppDbContext>.VerifyRemove(Action<AppDbContext>, Func<Times>, string) Mock<AppDbContext>.VerifyNoOtherCalls() Mock<AppDbContext>.Raise(Action<AppDbContext>, EventArgs) Mock<AppDbContext>.Raise(Action<AppDbContext>, params object[]) Mock<AppDbContext>.RaiseAsync(Action<AppDbContext>, params object[]) Mock<AppDbContext>.Expect(Expression<Action<AppDbContext>>) Mock<AppDbContext>.Expect<TResult>(Expression<Func<AppDbContext, TResult>>) Mock<AppDbContext>.ExpectGet<TProperty>(Expression<Func<AppDbContext, TProperty>>) Mock<AppDbContext>.ExpectSet<TProperty>(Expression<Func<AppDbContext, TProperty>>) Mock<AppDbContext>.ExpectSet<TProperty>(Expression<Func<AppDbContext, TProperty>>, TProperty) Mock<AppDbContext>.Behavior Mock<AppDbContext>.CallBase Mock<AppDbContext>.DefaultValueProvider Mock<AppDbContext>.Object Mock<AppDbContext>.Name Mock<AppDbContext>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<AppDbContext> Mock() Returns Mock<AppDbContext>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.DbSetMock-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.DbSetMock-1.html",
    "title": "Class DbSetMock<T> | Authentica",
    "keywords": "Class DbSetMock<T> Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class DbSetMock<T> : Mock<DbSet<T>>, IFluentInterface, IMock<DbSet<T>>, IMockBase<Mock<DbSet<T>>> where T : class Type Parameters T Inheritance object Mock Mock<DbSet<T>> DbSetMock<T> Implements IFluentInterface IMock<DbSet<T>> IMockBase<Mock<DbSet<T>>> Inherited Members Mock<DbSet<T>>.ToString() Mock<DbSet<T>>.OnGetObject() Mock<DbSet<T>>.As<TInterface>() Mock<DbSet<T>>.Setup(Expression<Action<DbSet<T>>>) Mock<DbSet<T>>.Setup<TResult>(Expression<Func<DbSet<T>, TResult>>) Mock<DbSet<T>>.SetupGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>) Mock<DbSet<T>>.SetupSet<TProperty>(Action<DbSet<T>>) Mock<DbSet<T>>.SetupSet(Action<DbSet<T>>) Mock<DbSet<T>>.SetupAdd(Action<DbSet<T>>) Mock<DbSet<T>>.SetupRemove(Action<DbSet<T>>) Mock<DbSet<T>>.SetupProperty<TProperty>(Expression<Func<DbSet<T>, TProperty>>) Mock<DbSet<T>>.SetupProperty<TProperty>(Expression<Func<DbSet<T>, TProperty>>, TProperty) Mock<DbSet<T>>.SetupAllProperties() Mock<DbSet<T>>.SetupSequence<TResult>(Expression<Func<DbSet<T>, TResult>>) Mock<DbSet<T>>.SetupSequence(Expression<Action<DbSet<T>>>) Mock<DbSet<T>>.When(Func<bool>) Mock<DbSet<T>>.Verify(Expression<Action<DbSet<T>>>) Mock<DbSet<T>>.Verify(Expression<Action<DbSet<T>>>, Times) Mock<DbSet<T>>.Verify(Expression<Action<DbSet<T>>>, Func<Times>) Mock<DbSet<T>>.Verify(Expression<Action<DbSet<T>>>, string) Mock<DbSet<T>>.Verify(Expression<Action<DbSet<T>>>, Times, string) Mock<DbSet<T>>.Verify(Expression<Action<DbSet<T>>>, Func<Times>, string) Mock<DbSet<T>>.Verify<TResult>(Expression<Func<DbSet<T>, TResult>>) Mock<DbSet<T>>.Verify<TResult>(Expression<Func<DbSet<T>, TResult>>, Times) Mock<DbSet<T>>.Verify<TResult>(Expression<Func<DbSet<T>, TResult>>, Func<Times>) Mock<DbSet<T>>.Verify<TResult>(Expression<Func<DbSet<T>, TResult>>, string) Mock<DbSet<T>>.Verify<TResult>(Expression<Func<DbSet<T>, TResult>>, Times, string) Mock<DbSet<T>>.VerifyGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>) Mock<DbSet<T>>.VerifyGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>, Times) Mock<DbSet<T>>.VerifyGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>, Func<Times>) Mock<DbSet<T>>.VerifyGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>, string) Mock<DbSet<T>>.VerifyGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>, Times, string) Mock<DbSet<T>>.VerifyGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>, Func<Times>, string) Mock<DbSet<T>>.VerifySet(Action<DbSet<T>>) Mock<DbSet<T>>.VerifySet(Action<DbSet<T>>, Times) Mock<DbSet<T>>.VerifySet(Action<DbSet<T>>, Func<Times>) Mock<DbSet<T>>.VerifySet(Action<DbSet<T>>, string) Mock<DbSet<T>>.VerifySet(Action<DbSet<T>>, Times, string) Mock<DbSet<T>>.VerifySet(Action<DbSet<T>>, Func<Times>, string) Mock<DbSet<T>>.VerifyAdd(Action<DbSet<T>>) Mock<DbSet<T>>.VerifyAdd(Action<DbSet<T>>, Times) Mock<DbSet<T>>.VerifyAdd(Action<DbSet<T>>, Func<Times>) Mock<DbSet<T>>.VerifyAdd(Action<DbSet<T>>, string) Mock<DbSet<T>>.VerifyAdd(Action<DbSet<T>>, Times, string) Mock<DbSet<T>>.VerifyAdd(Action<DbSet<T>>, Func<Times>, string) Mock<DbSet<T>>.VerifyRemove(Action<DbSet<T>>) Mock<DbSet<T>>.VerifyRemove(Action<DbSet<T>>, Times) Mock<DbSet<T>>.VerifyRemove(Action<DbSet<T>>, Func<Times>) Mock<DbSet<T>>.VerifyRemove(Action<DbSet<T>>, string) Mock<DbSet<T>>.VerifyRemove(Action<DbSet<T>>, Times, string) Mock<DbSet<T>>.VerifyRemove(Action<DbSet<T>>, Func<Times>, string) Mock<DbSet<T>>.VerifyNoOtherCalls() Mock<DbSet<T>>.Raise(Action<DbSet<T>>, EventArgs) Mock<DbSet<T>>.Raise(Action<DbSet<T>>, params object[]) Mock<DbSet<T>>.RaiseAsync(Action<DbSet<T>>, params object[]) Mock<DbSet<T>>.Expect(Expression<Action<DbSet<T>>>) Mock<DbSet<T>>.Expect<TResult>(Expression<Func<DbSet<T>, TResult>>) Mock<DbSet<T>>.ExpectGet<TProperty>(Expression<Func<DbSet<T>, TProperty>>) Mock<DbSet<T>>.ExpectSet<TProperty>(Expression<Func<DbSet<T>, TProperty>>) Mock<DbSet<T>>.ExpectSet<TProperty>(Expression<Func<DbSet<T>, TProperty>>, TProperty) Mock<DbSet<T>>.Behavior Mock<DbSet<T>>.CallBase Mock<DbSet<T>>.DefaultValueProvider Mock<DbSet<T>>.Object Mock<DbSet<T>>.Name Mock<DbSet<T>>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<DbSet<T>> Mock() Returns Mock<DbSet<T>>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.EmailPublisherMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.EmailPublisherMock.html",
    "title": "Class EmailPublisherMock | Authentica",
    "keywords": "Class EmailPublisherMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class EmailPublisherMock : Mock<IEmailPublisher>, IFluentInterface, IMock<IEmailPublisher>, IMockBase<EmailPublisherMock> Inheritance object Mock Mock<IEmailPublisher> EmailPublisherMock Implements IFluentInterface IMock<IEmailPublisher> IMockBase<EmailPublisherMock> Inherited Members Mock<IEmailPublisher>.ToString() Mock<IEmailPublisher>.OnGetObject() Mock<IEmailPublisher>.As<TInterface>() Mock<IEmailPublisher>.Setup(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.Setup<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.SetupGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.SetupSet<TProperty>(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupSet(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupAdd(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupRemove(Action<IEmailPublisher>) Mock<IEmailPublisher>.SetupProperty<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.SetupProperty<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, TProperty) Mock<IEmailPublisher>.SetupAllProperties() Mock<IEmailPublisher>.SetupSequence<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.SetupSequence(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.When(Func<bool>) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Times) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Func<Times>) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, string) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Times, string) Mock<IEmailPublisher>.Verify(Expression<Action<IEmailPublisher>>, Func<Times>, string) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, Times) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, Func<Times>) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, string) Mock<IEmailPublisher>.Verify<TResult>(Expression<Func<IEmailPublisher, TResult>>, Times, string) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Times) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Func<Times>) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, string) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Times, string) Mock<IEmailPublisher>.VerifyGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, Func<Times>, string) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Times) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Func<Times>) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, string) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Times, string) Mock<IEmailPublisher>.VerifySet(Action<IEmailPublisher>, Func<Times>, string) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Times) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Func<Times>) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, string) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Times, string) Mock<IEmailPublisher>.VerifyAdd(Action<IEmailPublisher>, Func<Times>, string) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Times) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Func<Times>) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, string) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Times, string) Mock<IEmailPublisher>.VerifyRemove(Action<IEmailPublisher>, Func<Times>, string) Mock<IEmailPublisher>.VerifyNoOtherCalls() Mock<IEmailPublisher>.Raise(Action<IEmailPublisher>, EventArgs) Mock<IEmailPublisher>.Raise(Action<IEmailPublisher>, params object[]) Mock<IEmailPublisher>.RaiseAsync(Action<IEmailPublisher>, params object[]) Mock<IEmailPublisher>.Expect(Expression<Action<IEmailPublisher>>) Mock<IEmailPublisher>.Expect<TResult>(Expression<Func<IEmailPublisher, TResult>>) Mock<IEmailPublisher>.ExpectGet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.ExpectSet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>) Mock<IEmailPublisher>.ExpectSet<TProperty>(Expression<Func<IEmailPublisher, TProperty>>, TProperty) Mock<IEmailPublisher>.Behavior Mock<IEmailPublisher>.CallBase Mock<IEmailPublisher>.DefaultValueProvider Mock<IEmailPublisher>.Object Mock<IEmailPublisher>.Name Mock<IEmailPublisher>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public EmailPublisherMock Mock() Returns EmailPublisherMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.FeatureManagerMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.FeatureManagerMock.html",
    "title": "Class FeatureManagerMock | Authentica",
    "keywords": "Class FeatureManagerMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class FeatureManagerMock : Mock<IFeatureManager>, IFluentInterface, IMock<IFeatureManager>, IMockBase<FeatureManagerMock> Inheritance object Mock Mock<IFeatureManager> FeatureManagerMock Implements IFluentInterface IMock<IFeatureManager> IMockBase<FeatureManagerMock> Inherited Members Mock<IFeatureManager>.ToString() Mock<IFeatureManager>.OnGetObject() Mock<IFeatureManager>.As<TInterface>() Mock<IFeatureManager>.Setup(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.Setup<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.SetupGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.SetupSet<TProperty>(Action<IFeatureManager>) Mock<IFeatureManager>.SetupSet(Action<IFeatureManager>) Mock<IFeatureManager>.SetupAdd(Action<IFeatureManager>) Mock<IFeatureManager>.SetupRemove(Action<IFeatureManager>) Mock<IFeatureManager>.SetupProperty<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.SetupProperty<TProperty>(Expression<Func<IFeatureManager, TProperty>>, TProperty) Mock<IFeatureManager>.SetupAllProperties() Mock<IFeatureManager>.SetupSequence<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.SetupSequence(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.When(Func<bool>) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Times) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Func<Times>) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, string) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Times, string) Mock<IFeatureManager>.Verify(Expression<Action<IFeatureManager>>, Func<Times>, string) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, Times) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, Func<Times>) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, string) Mock<IFeatureManager>.Verify<TResult>(Expression<Func<IFeatureManager, TResult>>, Times, string) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Times) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Func<Times>) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, string) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Times, string) Mock<IFeatureManager>.VerifyGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, Func<Times>, string) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Times) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Func<Times>) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, string) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Times, string) Mock<IFeatureManager>.VerifySet(Action<IFeatureManager>, Func<Times>, string) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Times) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Func<Times>) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, string) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Times, string) Mock<IFeatureManager>.VerifyAdd(Action<IFeatureManager>, Func<Times>, string) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Times) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Func<Times>) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, string) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Times, string) Mock<IFeatureManager>.VerifyRemove(Action<IFeatureManager>, Func<Times>, string) Mock<IFeatureManager>.VerifyNoOtherCalls() Mock<IFeatureManager>.Raise(Action<IFeatureManager>, EventArgs) Mock<IFeatureManager>.Raise(Action<IFeatureManager>, params object[]) Mock<IFeatureManager>.RaiseAsync(Action<IFeatureManager>, params object[]) Mock<IFeatureManager>.Expect(Expression<Action<IFeatureManager>>) Mock<IFeatureManager>.Expect<TResult>(Expression<Func<IFeatureManager, TResult>>) Mock<IFeatureManager>.ExpectGet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.ExpectSet<TProperty>(Expression<Func<IFeatureManager, TProperty>>) Mock<IFeatureManager>.ExpectSet<TProperty>(Expression<Func<IFeatureManager, TProperty>>, TProperty) Mock<IFeatureManager>.Behavior Mock<IFeatureManager>.CallBase Mock<IFeatureManager>.DefaultValueProvider Mock<IFeatureManager>.Object Mock<IFeatureManager>.Name Mock<IFeatureManager>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public FeatureManagerMock Mock() Returns FeatureManagerMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.HttpContextMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.HttpContextMock.html",
    "title": "Class HttpContextMock | Authentica",
    "keywords": "Class HttpContextMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class HttpContextMock : Mock<HttpContext>, IFluentInterface, IMock<HttpContext>, IMockBase<HttpContextMock> Inheritance object Mock Mock<HttpContext> HttpContextMock Implements IFluentInterface IMock<HttpContext> IMockBase<HttpContextMock> Inherited Members Mock<HttpContext>.ToString() Mock<HttpContext>.OnGetObject() Mock<HttpContext>.As<TInterface>() Mock<HttpContext>.Setup(Expression<Action<HttpContext>>) Mock<HttpContext>.Setup<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.SetupGet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.SetupSet<TProperty>(Action<HttpContext>) Mock<HttpContext>.SetupSet(Action<HttpContext>) Mock<HttpContext>.SetupAdd(Action<HttpContext>) Mock<HttpContext>.SetupRemove(Action<HttpContext>) Mock<HttpContext>.SetupProperty<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.SetupProperty<TProperty>(Expression<Func<HttpContext, TProperty>>, TProperty) Mock<HttpContext>.SetupAllProperties() Mock<HttpContext>.SetupSequence<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.SetupSequence(Expression<Action<HttpContext>>) Mock<HttpContext>.When(Func<bool>) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Times) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Func<Times>) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, string) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Times, string) Mock<HttpContext>.Verify(Expression<Action<HttpContext>>, Func<Times>, string) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, Times) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, Func<Times>) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, string) Mock<HttpContext>.Verify<TResult>(Expression<Func<HttpContext, TResult>>, Times, string) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Times) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Func<Times>) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, string) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Times, string) Mock<HttpContext>.VerifyGet<TProperty>(Expression<Func<HttpContext, TProperty>>, Func<Times>, string) Mock<HttpContext>.VerifySet(Action<HttpContext>) Mock<HttpContext>.VerifySet(Action<HttpContext>, Times) Mock<HttpContext>.VerifySet(Action<HttpContext>, Func<Times>) Mock<HttpContext>.VerifySet(Action<HttpContext>, string) Mock<HttpContext>.VerifySet(Action<HttpContext>, Times, string) Mock<HttpContext>.VerifySet(Action<HttpContext>, Func<Times>, string) Mock<HttpContext>.VerifyAdd(Action<HttpContext>) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Times) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Func<Times>) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, string) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Times, string) Mock<HttpContext>.VerifyAdd(Action<HttpContext>, Func<Times>, string) Mock<HttpContext>.VerifyRemove(Action<HttpContext>) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Times) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Func<Times>) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, string) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Times, string) Mock<HttpContext>.VerifyRemove(Action<HttpContext>, Func<Times>, string) Mock<HttpContext>.VerifyNoOtherCalls() Mock<HttpContext>.Raise(Action<HttpContext>, EventArgs) Mock<HttpContext>.Raise(Action<HttpContext>, params object[]) Mock<HttpContext>.RaiseAsync(Action<HttpContext>, params object[]) Mock<HttpContext>.Expect(Expression<Action<HttpContext>>) Mock<HttpContext>.Expect<TResult>(Expression<Func<HttpContext, TResult>>) Mock<HttpContext>.ExpectGet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.ExpectSet<TProperty>(Expression<Func<HttpContext, TProperty>>) Mock<HttpContext>.ExpectSet<TProperty>(Expression<Func<HttpContext, TProperty>>, TProperty) Mock<HttpContext>.Behavior Mock<HttpContext>.CallBase Mock<HttpContext>.DefaultValueProvider Mock<HttpContext>.Object Mock<HttpContext>.Name Mock<HttpContext>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public HttpContextMock Mock() Returns HttpContextMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.IHttpContextAccessorMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.IHttpContextAccessorMock.html",
    "title": "Class IHttpContextAccessorMock | Authentica",
    "keywords": "Class IHttpContextAccessorMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class IHttpContextAccessorMock : Mock<IHttpContextAccessor>, IFluentInterface, IMock<IHttpContextAccessor>, IMockBase<IHttpContextAccessorMock> Inheritance object Mock Mock<IHttpContextAccessor> IHttpContextAccessorMock Implements IFluentInterface IMock<IHttpContextAccessor> IMockBase<IHttpContextAccessorMock> Inherited Members Mock<IHttpContextAccessor>.ToString() Mock<IHttpContextAccessor>.OnGetObject() Mock<IHttpContextAccessor>.As<TInterface>() Mock<IHttpContextAccessor>.Setup(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.Setup<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.SetupGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.SetupSet<TProperty>(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupSet(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupAdd(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupRemove(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.SetupProperty<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.SetupProperty<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, TProperty) Mock<IHttpContextAccessor>.SetupAllProperties() Mock<IHttpContextAccessor>.SetupSequence<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.SetupSequence(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.When(Func<bool>) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Times) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Func<Times>) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, string) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Times, string) Mock<IHttpContextAccessor>.Verify(Expression<Action<IHttpContextAccessor>>, Func<Times>, string) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, Times) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, Func<Times>) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, string) Mock<IHttpContextAccessor>.Verify<TResult>(Expression<Func<IHttpContextAccessor, TResult>>, Times, string) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Times) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Func<Times>) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, string) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Times, string) Mock<IHttpContextAccessor>.VerifyGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Times) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Func<Times>) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, string) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Times, string) Mock<IHttpContextAccessor>.VerifySet(Action<IHttpContextAccessor>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Times) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Func<Times>) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, string) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Times, string) Mock<IHttpContextAccessor>.VerifyAdd(Action<IHttpContextAccessor>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Times) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Func<Times>) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, string) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Times, string) Mock<IHttpContextAccessor>.VerifyRemove(Action<IHttpContextAccessor>, Func<Times>, string) Mock<IHttpContextAccessor>.VerifyNoOtherCalls() Mock<IHttpContextAccessor>.Raise(Action<IHttpContextAccessor>, EventArgs) Mock<IHttpContextAccessor>.Raise(Action<IHttpContextAccessor>, params object[]) Mock<IHttpContextAccessor>.RaiseAsync(Action<IHttpContextAccessor>, params object[]) Mock<IHttpContextAccessor>.Expect(Expression<Action<IHttpContextAccessor>>) Mock<IHttpContextAccessor>.Expect<TResult>(Expression<Func<IHttpContextAccessor, TResult>>) Mock<IHttpContextAccessor>.ExpectGet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.ExpectSet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>) Mock<IHttpContextAccessor>.ExpectSet<TProperty>(Expression<Func<IHttpContextAccessor, TProperty>>, TProperty) Mock<IHttpContextAccessor>.Behavior Mock<IHttpContextAccessor>.CallBase Mock<IHttpContextAccessor>.DefaultValueProvider Mock<IHttpContextAccessor>.Object Mock<IHttpContextAccessor>.Name Mock<IHttpContextAccessor>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public IHttpContextAccessorMock Mock() Returns IHttpContextAccessorMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.IMockBase-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.IMockBase-1.html",
    "title": "Interface IMockBase<T> | Authentica",
    "keywords": "Interface IMockBase<T> Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public interface IMockBase<T> where T : class Type Parameters T Methods Mock() T Mock() Returns T"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.JsonWebTokenProviderMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.JsonWebTokenProviderMock.html",
    "title": "Class JsonWebTokenProviderMock | Authentica",
    "keywords": "Class JsonWebTokenProviderMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class JsonWebTokenProviderMock : Mock<IJsonWebTokenProvider>, IFluentInterface, IMock<IJsonWebTokenProvider>, IMockBase<JsonWebTokenProviderMock> Inheritance object Mock Mock<IJsonWebTokenProvider> JsonWebTokenProviderMock Implements IFluentInterface IMock<IJsonWebTokenProvider> IMockBase<JsonWebTokenProviderMock> Inherited Members Mock<IJsonWebTokenProvider>.ToString() Mock<IJsonWebTokenProvider>.OnGetObject() Mock<IJsonWebTokenProvider>.As<TInterface>() Mock<IJsonWebTokenProvider>.Setup(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Setup<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.SetupGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.SetupSet<TProperty>(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupSet(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupAdd(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupRemove(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.SetupProperty<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.SetupProperty<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, TProperty) Mock<IJsonWebTokenProvider>.SetupAllProperties() Mock<IJsonWebTokenProvider>.SetupSequence<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.SetupSequence(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.When(Func<bool>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Times) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Func<Times>) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, string) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Times, string) Mock<IJsonWebTokenProvider>.Verify(Expression<Action<IJsonWebTokenProvider>>, Func<Times>, string) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Times) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Func<Times>) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, string) Mock<IJsonWebTokenProvider>.Verify<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>, Times, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Times) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Times, string) Mock<IJsonWebTokenProvider>.VerifyGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifySet(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifyAdd(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Times) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Func<Times>) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Times, string) Mock<IJsonWebTokenProvider>.VerifyRemove(Action<IJsonWebTokenProvider>, Func<Times>, string) Mock<IJsonWebTokenProvider>.VerifyNoOtherCalls() Mock<IJsonWebTokenProvider>.Raise(Action<IJsonWebTokenProvider>, EventArgs) Mock<IJsonWebTokenProvider>.Raise(Action<IJsonWebTokenProvider>, params object[]) Mock<IJsonWebTokenProvider>.RaiseAsync(Action<IJsonWebTokenProvider>, params object[]) Mock<IJsonWebTokenProvider>.Expect(Expression<Action<IJsonWebTokenProvider>>) Mock<IJsonWebTokenProvider>.Expect<TResult>(Expression<Func<IJsonWebTokenProvider, TResult>>) Mock<IJsonWebTokenProvider>.ExpectGet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.ExpectSet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>) Mock<IJsonWebTokenProvider>.ExpectSet<TProperty>(Expression<Func<IJsonWebTokenProvider, TProperty>>, TProperty) Mock<IJsonWebTokenProvider>.Behavior Mock<IJsonWebTokenProvider>.CallBase Mock<IJsonWebTokenProvider>.DefaultValueProvider Mock<IJsonWebTokenProvider>.Object Mock<IJsonWebTokenProvider>.Name Mock<IJsonWebTokenProvider>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public JsonWebTokenProviderMock Mock() Returns JsonWebTokenProviderMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.JwtSecurityTokenHandlerMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.JwtSecurityTokenHandlerMock.html",
    "title": "Class JwtSecurityTokenHandlerMock | Authentica",
    "keywords": "Class JwtSecurityTokenHandlerMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class JwtSecurityTokenHandlerMock : Mock<JwtSecurityTokenHandler>, IFluentInterface, IMock<JwtSecurityTokenHandler>, IMockBase<JwtSecurityTokenHandlerMock> Inheritance object Mock Mock<JwtSecurityTokenHandler> JwtSecurityTokenHandlerMock Implements IFluentInterface IMock<JwtSecurityTokenHandler> IMockBase<JwtSecurityTokenHandlerMock> Inherited Members Mock<JwtSecurityTokenHandler>.ToString() Mock<JwtSecurityTokenHandler>.OnGetObject() Mock<JwtSecurityTokenHandler>.As<TInterface>() Mock<JwtSecurityTokenHandler>.Setup(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.Setup<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.SetupGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.SetupSet<TProperty>(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupSet(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupAdd(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupRemove(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.SetupProperty<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.SetupProperty<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, TProperty) Mock<JwtSecurityTokenHandler>.SetupAllProperties() Mock<JwtSecurityTokenHandler>.SetupSequence<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.SetupSequence(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.When(Func<bool>) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Times) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Func<Times>) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, string) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Times, string) Mock<JwtSecurityTokenHandler>.Verify(Expression<Action<JwtSecurityTokenHandler>>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, Times) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, Func<Times>) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, string) Mock<JwtSecurityTokenHandler>.Verify<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Times) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, string) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Times) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, string) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Times, string) Mock<JwtSecurityTokenHandler>.VerifySet(Action<JwtSecurityTokenHandler>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Times) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, string) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyAdd(Action<JwtSecurityTokenHandler>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Times) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Func<Times>) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, string) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Times, string) Mock<JwtSecurityTokenHandler>.VerifyRemove(Action<JwtSecurityTokenHandler>, Func<Times>, string) Mock<JwtSecurityTokenHandler>.VerifyNoOtherCalls() Mock<JwtSecurityTokenHandler>.Raise(Action<JwtSecurityTokenHandler>, EventArgs) Mock<JwtSecurityTokenHandler>.Raise(Action<JwtSecurityTokenHandler>, params object[]) Mock<JwtSecurityTokenHandler>.RaiseAsync(Action<JwtSecurityTokenHandler>, params object[]) Mock<JwtSecurityTokenHandler>.Expect(Expression<Action<JwtSecurityTokenHandler>>) Mock<JwtSecurityTokenHandler>.Expect<TResult>(Expression<Func<JwtSecurityTokenHandler, TResult>>) Mock<JwtSecurityTokenHandler>.ExpectGet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.ExpectSet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>) Mock<JwtSecurityTokenHandler>.ExpectSet<TProperty>(Expression<Func<JwtSecurityTokenHandler, TProperty>>, TProperty) Mock<JwtSecurityTokenHandler>.Behavior Mock<JwtSecurityTokenHandler>.CallBase Mock<JwtSecurityTokenHandler>.DefaultValueProvider Mock<JwtSecurityTokenHandler>.Object Mock<JwtSecurityTokenHandler>.Name Mock<JwtSecurityTokenHandler>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public JwtSecurityTokenHandlerMock Mock() Returns JwtSecurityTokenHandlerMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.LoggerMock-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.LoggerMock-1.html",
    "title": "Class LoggerMock<T> | Authentica",
    "keywords": "Class LoggerMock<T> Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class LoggerMock<T> : Mock<ILogger<T>>, IFluentInterface, IMock<ILogger<T>>, IMockBase<LoggerMock<T>> where T : class Type Parameters T Inheritance object Mock Mock<ILogger<T>> LoggerMock<T> Implements IFluentInterface IMock<ILogger<T>> IMockBase<LoggerMock<T>> Inherited Members Mock<ILogger<T>>.ToString() Mock<ILogger<T>>.OnGetObject() Mock<ILogger<T>>.As<TInterface>() Mock<ILogger<T>>.Setup(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.Setup<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.SetupGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.SetupSet<TProperty>(Action<ILogger<T>>) Mock<ILogger<T>>.SetupSet(Action<ILogger<T>>) Mock<ILogger<T>>.SetupAdd(Action<ILogger<T>>) Mock<ILogger<T>>.SetupRemove(Action<ILogger<T>>) Mock<ILogger<T>>.SetupProperty<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.SetupProperty<TProperty>(Expression<Func<ILogger<T>, TProperty>>, TProperty) Mock<ILogger<T>>.SetupAllProperties() Mock<ILogger<T>>.SetupSequence<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.SetupSequence(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.When(Func<bool>) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Times) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Func<Times>) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, string) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Times, string) Mock<ILogger<T>>.Verify(Expression<Action<ILogger<T>>>, Func<Times>, string) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, Times) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, Func<Times>) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, string) Mock<ILogger<T>>.Verify<TResult>(Expression<Func<ILogger<T>, TResult>>, Times, string) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Times) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Func<Times>) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, string) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Times, string) Mock<ILogger<T>>.VerifyGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, Func<Times>, string) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Times) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Func<Times>) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, string) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Times, string) Mock<ILogger<T>>.VerifySet(Action<ILogger<T>>, Func<Times>, string) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Times) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Func<Times>) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, string) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Times, string) Mock<ILogger<T>>.VerifyAdd(Action<ILogger<T>>, Func<Times>, string) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Times) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Func<Times>) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, string) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Times, string) Mock<ILogger<T>>.VerifyRemove(Action<ILogger<T>>, Func<Times>, string) Mock<ILogger<T>>.VerifyNoOtherCalls() Mock<ILogger<T>>.Raise(Action<ILogger<T>>, EventArgs) Mock<ILogger<T>>.Raise(Action<ILogger<T>>, params object[]) Mock<ILogger<T>>.RaiseAsync(Action<ILogger<T>>, params object[]) Mock<ILogger<T>>.Expect(Expression<Action<ILogger<T>>>) Mock<ILogger<T>>.Expect<TResult>(Expression<Func<ILogger<T>, TResult>>) Mock<ILogger<T>>.ExpectGet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.ExpectSet<TProperty>(Expression<Func<ILogger<T>, TProperty>>) Mock<ILogger<T>>.ExpectSet<TProperty>(Expression<Func<ILogger<T>, TProperty>>, TProperty) Mock<ILogger<T>>.Behavior Mock<ILogger<T>>.CallBase Mock<ILogger<T>>.DefaultValueProvider Mock<ILogger<T>>.Object Mock<ILogger<T>>.Name Mock<ILogger<T>>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public LoggerMock<T> Mock() Returns LoggerMock<T>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.RoleManagerMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.RoleManagerMock.html",
    "title": "Class RoleManagerMock | Authentica",
    "keywords": "Class RoleManagerMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class RoleManagerMock : Mock<RoleManager<Role>>, IFluentInterface, IMock<RoleManager<Role>>, IMockBase<RoleManagerMock> Inheritance object Mock Mock<RoleManager<Role>> RoleManagerMock Implements IFluentInterface IMock<RoleManager<Role>> IMockBase<RoleManagerMock> Inherited Members Mock<RoleManager<Role>>.ToString() Mock<RoleManager<Role>>.OnGetObject() Mock<RoleManager<Role>>.As<TInterface>() Mock<RoleManager<Role>>.Setup(Expression<Action<RoleManager<Role>>>) Mock<RoleManager<Role>>.Setup<TResult>(Expression<Func<RoleManager<Role>, TResult>>) Mock<RoleManager<Role>>.SetupGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>) Mock<RoleManager<Role>>.SetupSet<TProperty>(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.SetupSet(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.SetupAdd(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.SetupRemove(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.SetupProperty<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>) Mock<RoleManager<Role>>.SetupProperty<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, TProperty) Mock<RoleManager<Role>>.SetupAllProperties() Mock<RoleManager<Role>>.SetupSequence<TResult>(Expression<Func<RoleManager<Role>, TResult>>) Mock<RoleManager<Role>>.SetupSequence(Expression<Action<RoleManager<Role>>>) Mock<RoleManager<Role>>.When(Func<bool>) Mock<RoleManager<Role>>.Verify(Expression<Action<RoleManager<Role>>>) Mock<RoleManager<Role>>.Verify(Expression<Action<RoleManager<Role>>>, Times) Mock<RoleManager<Role>>.Verify(Expression<Action<RoleManager<Role>>>, Func<Times>) Mock<RoleManager<Role>>.Verify(Expression<Action<RoleManager<Role>>>, string) Mock<RoleManager<Role>>.Verify(Expression<Action<RoleManager<Role>>>, Times, string) Mock<RoleManager<Role>>.Verify(Expression<Action<RoleManager<Role>>>, Func<Times>, string) Mock<RoleManager<Role>>.Verify<TResult>(Expression<Func<RoleManager<Role>, TResult>>) Mock<RoleManager<Role>>.Verify<TResult>(Expression<Func<RoleManager<Role>, TResult>>, Times) Mock<RoleManager<Role>>.Verify<TResult>(Expression<Func<RoleManager<Role>, TResult>>, Func<Times>) Mock<RoleManager<Role>>.Verify<TResult>(Expression<Func<RoleManager<Role>, TResult>>, string) Mock<RoleManager<Role>>.Verify<TResult>(Expression<Func<RoleManager<Role>, TResult>>, Times, string) Mock<RoleManager<Role>>.VerifyGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>) Mock<RoleManager<Role>>.VerifyGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, Times) Mock<RoleManager<Role>>.VerifyGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, Func<Times>) Mock<RoleManager<Role>>.VerifyGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, string) Mock<RoleManager<Role>>.VerifyGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, Times, string) Mock<RoleManager<Role>>.VerifyGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, Func<Times>, string) Mock<RoleManager<Role>>.VerifySet(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.VerifySet(Action<RoleManager<Role>>, Times) Mock<RoleManager<Role>>.VerifySet(Action<RoleManager<Role>>, Func<Times>) Mock<RoleManager<Role>>.VerifySet(Action<RoleManager<Role>>, string) Mock<RoleManager<Role>>.VerifySet(Action<RoleManager<Role>>, Times, string) Mock<RoleManager<Role>>.VerifySet(Action<RoleManager<Role>>, Func<Times>, string) Mock<RoleManager<Role>>.VerifyAdd(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.VerifyAdd(Action<RoleManager<Role>>, Times) Mock<RoleManager<Role>>.VerifyAdd(Action<RoleManager<Role>>, Func<Times>) Mock<RoleManager<Role>>.VerifyAdd(Action<RoleManager<Role>>, string) Mock<RoleManager<Role>>.VerifyAdd(Action<RoleManager<Role>>, Times, string) Mock<RoleManager<Role>>.VerifyAdd(Action<RoleManager<Role>>, Func<Times>, string) Mock<RoleManager<Role>>.VerifyRemove(Action<RoleManager<Role>>) Mock<RoleManager<Role>>.VerifyRemove(Action<RoleManager<Role>>, Times) Mock<RoleManager<Role>>.VerifyRemove(Action<RoleManager<Role>>, Func<Times>) Mock<RoleManager<Role>>.VerifyRemove(Action<RoleManager<Role>>, string) Mock<RoleManager<Role>>.VerifyRemove(Action<RoleManager<Role>>, Times, string) Mock<RoleManager<Role>>.VerifyRemove(Action<RoleManager<Role>>, Func<Times>, string) Mock<RoleManager<Role>>.VerifyNoOtherCalls() Mock<RoleManager<Role>>.Raise(Action<RoleManager<Role>>, EventArgs) Mock<RoleManager<Role>>.Raise(Action<RoleManager<Role>>, params object[]) Mock<RoleManager<Role>>.RaiseAsync(Action<RoleManager<Role>>, params object[]) Mock<RoleManager<Role>>.Expect(Expression<Action<RoleManager<Role>>>) Mock<RoleManager<Role>>.Expect<TResult>(Expression<Func<RoleManager<Role>, TResult>>) Mock<RoleManager<Role>>.ExpectGet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>) Mock<RoleManager<Role>>.ExpectSet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>) Mock<RoleManager<Role>>.ExpectSet<TProperty>(Expression<Func<RoleManager<Role>, TProperty>>, TProperty) Mock<RoleManager<Role>>.Behavior Mock<RoleManager<Role>>.CallBase Mock<RoleManager<Role>>.DefaultValueProvider Mock<RoleManager<Role>>.Object Mock<RoleManager<Role>>.Name Mock<RoleManager<Role>>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public RoleManagerMock Mock() Returns RoleManagerMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.ServiceProviderMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.ServiceProviderMock.html",
    "title": "Class ServiceProviderMock | Authentica",
    "keywords": "Class ServiceProviderMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class ServiceProviderMock : Mock<IServiceProvider>, IFluentInterface, IMock<IServiceProvider>, IMockBase<ServiceProviderMock> Inheritance object Mock Mock<IServiceProvider> ServiceProviderMock Implements IFluentInterface IMock<IServiceProvider> IMockBase<ServiceProviderMock> Inherited Members Mock<IServiceProvider>.ToString() Mock<IServiceProvider>.OnGetObject() Mock<IServiceProvider>.As<TInterface>() Mock<IServiceProvider>.Setup(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.Setup<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.SetupGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.SetupSet<TProperty>(Action<IServiceProvider>) Mock<IServiceProvider>.SetupSet(Action<IServiceProvider>) Mock<IServiceProvider>.SetupAdd(Action<IServiceProvider>) Mock<IServiceProvider>.SetupRemove(Action<IServiceProvider>) Mock<IServiceProvider>.SetupProperty<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.SetupProperty<TProperty>(Expression<Func<IServiceProvider, TProperty>>, TProperty) Mock<IServiceProvider>.SetupAllProperties() Mock<IServiceProvider>.SetupSequence<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.SetupSequence(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.When(Func<bool>) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Times) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Func<Times>) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, string) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Times, string) Mock<IServiceProvider>.Verify(Expression<Action<IServiceProvider>>, Func<Times>, string) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, Times) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, Func<Times>) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, string) Mock<IServiceProvider>.Verify<TResult>(Expression<Func<IServiceProvider, TResult>>, Times, string) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Times) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Func<Times>) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, string) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Times, string) Mock<IServiceProvider>.VerifyGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, Func<Times>, string) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Times) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Func<Times>) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, string) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Times, string) Mock<IServiceProvider>.VerifySet(Action<IServiceProvider>, Func<Times>, string) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Times) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Func<Times>) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, string) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Times, string) Mock<IServiceProvider>.VerifyAdd(Action<IServiceProvider>, Func<Times>, string) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Times) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Func<Times>) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, string) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Times, string) Mock<IServiceProvider>.VerifyRemove(Action<IServiceProvider>, Func<Times>, string) Mock<IServiceProvider>.VerifyNoOtherCalls() Mock<IServiceProvider>.Raise(Action<IServiceProvider>, EventArgs) Mock<IServiceProvider>.Raise(Action<IServiceProvider>, params object[]) Mock<IServiceProvider>.RaiseAsync(Action<IServiceProvider>, params object[]) Mock<IServiceProvider>.Expect(Expression<Action<IServiceProvider>>) Mock<IServiceProvider>.Expect<TResult>(Expression<Func<IServiceProvider, TResult>>) Mock<IServiceProvider>.ExpectGet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.ExpectSet<TProperty>(Expression<Func<IServiceProvider, TProperty>>) Mock<IServiceProvider>.ExpectSet<TProperty>(Expression<Func<IServiceProvider, TProperty>>, TProperty) Mock<IServiceProvider>.Behavior Mock<IServiceProvider>.CallBase Mock<IServiceProvider>.DefaultValueProvider Mock<IServiceProvider>.Object Mock<IServiceProvider>.Name Mock<IServiceProvider>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public ServiceProviderMock Mock() Returns ServiceProviderMock"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.SignInManagerMock-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.SignInManagerMock-1.html",
    "title": "Class SignInManagerMock<TUser> | Authentica",
    "keywords": "Class SignInManagerMock<TUser> Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class SignInManagerMock<TUser> : IMockBase<Mock<SignInManager<TUser>>> where TUser : IdentityUser<string> Type Parameters TUser Inheritance object SignInManagerMock<TUser> Implements IMockBase<Mock<SignInManager<TUser>>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Mock() public Mock<SignInManager<TUser>> Mock() Returns Mock<SignInManager<TUser>>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.TimerMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.TimerMock.html",
    "title": "Class TimerMock | Authentica",
    "keywords": "Class TimerMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class TimerMock : Mock<ITimer>, IFluentInterface, IMock<ITimer>, IMockBase<Mock<ITimer>> Inheritance object Mock Mock<ITimer> TimerMock Implements IFluentInterface IMock<ITimer> IMockBase<Mock<ITimer>> Inherited Members Mock<ITimer>.ToString() Mock<ITimer>.OnGetObject() Mock<ITimer>.As<TInterface>() Mock<ITimer>.Setup(Expression<Action<ITimer>>) Mock<ITimer>.Setup<TResult>(Expression<Func<ITimer, TResult>>) Mock<ITimer>.SetupGet<TProperty>(Expression<Func<ITimer, TProperty>>) Mock<ITimer>.SetupSet<TProperty>(Action<ITimer>) Mock<ITimer>.SetupSet(Action<ITimer>) Mock<ITimer>.SetupAdd(Action<ITimer>) Mock<ITimer>.SetupRemove(Action<ITimer>) Mock<ITimer>.SetupProperty<TProperty>(Expression<Func<ITimer, TProperty>>) Mock<ITimer>.SetupProperty<TProperty>(Expression<Func<ITimer, TProperty>>, TProperty) Mock<ITimer>.SetupAllProperties() Mock<ITimer>.SetupSequence<TResult>(Expression<Func<ITimer, TResult>>) Mock<ITimer>.SetupSequence(Expression<Action<ITimer>>) Mock<ITimer>.When(Func<bool>) Mock<ITimer>.Verify(Expression<Action<ITimer>>) Mock<ITimer>.Verify(Expression<Action<ITimer>>, Times) Mock<ITimer>.Verify(Expression<Action<ITimer>>, Func<Times>) Mock<ITimer>.Verify(Expression<Action<ITimer>>, string) Mock<ITimer>.Verify(Expression<Action<ITimer>>, Times, string) Mock<ITimer>.Verify(Expression<Action<ITimer>>, Func<Times>, string) Mock<ITimer>.Verify<TResult>(Expression<Func<ITimer, TResult>>) Mock<ITimer>.Verify<TResult>(Expression<Func<ITimer, TResult>>, Times) Mock<ITimer>.Verify<TResult>(Expression<Func<ITimer, TResult>>, Func<Times>) Mock<ITimer>.Verify<TResult>(Expression<Func<ITimer, TResult>>, string) Mock<ITimer>.Verify<TResult>(Expression<Func<ITimer, TResult>>, Times, string) Mock<ITimer>.VerifyGet<TProperty>(Expression<Func<ITimer, TProperty>>) Mock<ITimer>.VerifyGet<TProperty>(Expression<Func<ITimer, TProperty>>, Times) Mock<ITimer>.VerifyGet<TProperty>(Expression<Func<ITimer, TProperty>>, Func<Times>) Mock<ITimer>.VerifyGet<TProperty>(Expression<Func<ITimer, TProperty>>, string) Mock<ITimer>.VerifyGet<TProperty>(Expression<Func<ITimer, TProperty>>, Times, string) Mock<ITimer>.VerifyGet<TProperty>(Expression<Func<ITimer, TProperty>>, Func<Times>, string) Mock<ITimer>.VerifySet(Action<ITimer>) Mock<ITimer>.VerifySet(Action<ITimer>, Times) Mock<ITimer>.VerifySet(Action<ITimer>, Func<Times>) Mock<ITimer>.VerifySet(Action<ITimer>, string) Mock<ITimer>.VerifySet(Action<ITimer>, Times, string) Mock<ITimer>.VerifySet(Action<ITimer>, Func<Times>, string) Mock<ITimer>.VerifyAdd(Action<ITimer>) Mock<ITimer>.VerifyAdd(Action<ITimer>, Times) Mock<ITimer>.VerifyAdd(Action<ITimer>, Func<Times>) Mock<ITimer>.VerifyAdd(Action<ITimer>, string) Mock<ITimer>.VerifyAdd(Action<ITimer>, Times, string) Mock<ITimer>.VerifyAdd(Action<ITimer>, Func<Times>, string) Mock<ITimer>.VerifyRemove(Action<ITimer>) Mock<ITimer>.VerifyRemove(Action<ITimer>, Times) Mock<ITimer>.VerifyRemove(Action<ITimer>, Func<Times>) Mock<ITimer>.VerifyRemove(Action<ITimer>, string) Mock<ITimer>.VerifyRemove(Action<ITimer>, Times, string) Mock<ITimer>.VerifyRemove(Action<ITimer>, Func<Times>, string) Mock<ITimer>.VerifyNoOtherCalls() Mock<ITimer>.Raise(Action<ITimer>, EventArgs) Mock<ITimer>.Raise(Action<ITimer>, params object[]) Mock<ITimer>.RaiseAsync(Action<ITimer>, params object[]) Mock<ITimer>.Expect(Expression<Action<ITimer>>) Mock<ITimer>.Expect<TResult>(Expression<Func<ITimer, TResult>>) Mock<ITimer>.ExpectGet<TProperty>(Expression<Func<ITimer, TProperty>>) Mock<ITimer>.ExpectSet<TProperty>(Expression<Func<ITimer, TProperty>>) Mock<ITimer>.ExpectSet<TProperty>(Expression<Func<ITimer, TProperty>>, TProperty) Mock<ITimer>.Behavior Mock<ITimer>.CallBase Mock<ITimer>.DefaultValueProvider Mock<ITimer>.Object Mock<ITimer>.Name Mock<ITimer>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<ITimer> Mock() Returns Mock<ITimer>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.UserManagerMock-1.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.UserManagerMock-1.html",
    "title": "Class UserManagerMock<TUser> | Authentica",
    "keywords": "Class UserManagerMock<TUser> Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class UserManagerMock<TUser> : IMockBase<Mock<UserManager<TUser>>> where TUser : class Type Parameters TUser Inheritance object UserManagerMock<TUser> Implements IMockBase<Mock<UserManager<TUser>>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Mock() public Mock<UserManager<TUser>> Mock() Returns Mock<UserManager<TUser>>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.UserReadStoreMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.UserReadStoreMock.html",
    "title": "Class UserReadStoreMock | Authentica",
    "keywords": "Class UserReadStoreMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class UserReadStoreMock : Mock<IUserReadStore>, IFluentInterface, IMock<IUserReadStore>, IMockBase<Mock<IUserReadStore>> Inheritance object Mock Mock<IUserReadStore> UserReadStoreMock Implements IFluentInterface IMock<IUserReadStore> IMockBase<Mock<IUserReadStore>> Inherited Members Mock<IUserReadStore>.ToString() Mock<IUserReadStore>.OnGetObject() Mock<IUserReadStore>.As<TInterface>() Mock<IUserReadStore>.Setup(Expression<Action<IUserReadStore>>) Mock<IUserReadStore>.Setup<TResult>(Expression<Func<IUserReadStore, TResult>>) Mock<IUserReadStore>.SetupGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>) Mock<IUserReadStore>.SetupSet<TProperty>(Action<IUserReadStore>) Mock<IUserReadStore>.SetupSet(Action<IUserReadStore>) Mock<IUserReadStore>.SetupAdd(Action<IUserReadStore>) Mock<IUserReadStore>.SetupRemove(Action<IUserReadStore>) Mock<IUserReadStore>.SetupProperty<TProperty>(Expression<Func<IUserReadStore, TProperty>>) Mock<IUserReadStore>.SetupProperty<TProperty>(Expression<Func<IUserReadStore, TProperty>>, TProperty) Mock<IUserReadStore>.SetupAllProperties() Mock<IUserReadStore>.SetupSequence<TResult>(Expression<Func<IUserReadStore, TResult>>) Mock<IUserReadStore>.SetupSequence(Expression<Action<IUserReadStore>>) Mock<IUserReadStore>.When(Func<bool>) Mock<IUserReadStore>.Verify(Expression<Action<IUserReadStore>>) Mock<IUserReadStore>.Verify(Expression<Action<IUserReadStore>>, Times) Mock<IUserReadStore>.Verify(Expression<Action<IUserReadStore>>, Func<Times>) Mock<IUserReadStore>.Verify(Expression<Action<IUserReadStore>>, string) Mock<IUserReadStore>.Verify(Expression<Action<IUserReadStore>>, Times, string) Mock<IUserReadStore>.Verify(Expression<Action<IUserReadStore>>, Func<Times>, string) Mock<IUserReadStore>.Verify<TResult>(Expression<Func<IUserReadStore, TResult>>) Mock<IUserReadStore>.Verify<TResult>(Expression<Func<IUserReadStore, TResult>>, Times) Mock<IUserReadStore>.Verify<TResult>(Expression<Func<IUserReadStore, TResult>>, Func<Times>) Mock<IUserReadStore>.Verify<TResult>(Expression<Func<IUserReadStore, TResult>>, string) Mock<IUserReadStore>.Verify<TResult>(Expression<Func<IUserReadStore, TResult>>, Times, string) Mock<IUserReadStore>.VerifyGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>) Mock<IUserReadStore>.VerifyGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>, Times) Mock<IUserReadStore>.VerifyGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>, Func<Times>) Mock<IUserReadStore>.VerifyGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>, string) Mock<IUserReadStore>.VerifyGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>, Times, string) Mock<IUserReadStore>.VerifyGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>, Func<Times>, string) Mock<IUserReadStore>.VerifySet(Action<IUserReadStore>) Mock<IUserReadStore>.VerifySet(Action<IUserReadStore>, Times) Mock<IUserReadStore>.VerifySet(Action<IUserReadStore>, Func<Times>) Mock<IUserReadStore>.VerifySet(Action<IUserReadStore>, string) Mock<IUserReadStore>.VerifySet(Action<IUserReadStore>, Times, string) Mock<IUserReadStore>.VerifySet(Action<IUserReadStore>, Func<Times>, string) Mock<IUserReadStore>.VerifyAdd(Action<IUserReadStore>) Mock<IUserReadStore>.VerifyAdd(Action<IUserReadStore>, Times) Mock<IUserReadStore>.VerifyAdd(Action<IUserReadStore>, Func<Times>) Mock<IUserReadStore>.VerifyAdd(Action<IUserReadStore>, string) Mock<IUserReadStore>.VerifyAdd(Action<IUserReadStore>, Times, string) Mock<IUserReadStore>.VerifyAdd(Action<IUserReadStore>, Func<Times>, string) Mock<IUserReadStore>.VerifyRemove(Action<IUserReadStore>) Mock<IUserReadStore>.VerifyRemove(Action<IUserReadStore>, Times) Mock<IUserReadStore>.VerifyRemove(Action<IUserReadStore>, Func<Times>) Mock<IUserReadStore>.VerifyRemove(Action<IUserReadStore>, string) Mock<IUserReadStore>.VerifyRemove(Action<IUserReadStore>, Times, string) Mock<IUserReadStore>.VerifyRemove(Action<IUserReadStore>, Func<Times>, string) Mock<IUserReadStore>.VerifyNoOtherCalls() Mock<IUserReadStore>.Raise(Action<IUserReadStore>, EventArgs) Mock<IUserReadStore>.Raise(Action<IUserReadStore>, params object[]) Mock<IUserReadStore>.RaiseAsync(Action<IUserReadStore>, params object[]) Mock<IUserReadStore>.Expect(Expression<Action<IUserReadStore>>) Mock<IUserReadStore>.Expect<TResult>(Expression<Func<IUserReadStore, TResult>>) Mock<IUserReadStore>.ExpectGet<TProperty>(Expression<Func<IUserReadStore, TProperty>>) Mock<IUserReadStore>.ExpectSet<TProperty>(Expression<Func<IUserReadStore, TProperty>>) Mock<IUserReadStore>.ExpectSet<TProperty>(Expression<Func<IUserReadStore, TProperty>>, TProperty) Mock<IUserReadStore>.Behavior Mock<IUserReadStore>.CallBase Mock<IUserReadStore>.DefaultValueProvider Mock<IUserReadStore>.Object Mock<IUserReadStore>.Name Mock<IUserReadStore>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<IUserReadStore> Mock() Returns Mock<IUserReadStore>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.UserWriteStoreMock.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.UserWriteStoreMock.html",
    "title": "Class UserWriteStoreMock | Authentica",
    "keywords": "Class UserWriteStoreMock Namespace Authentica.Service.Identity.Tests.Mocks Assembly Authentica.Service.Identity.Tests.dll public class UserWriteStoreMock : Mock<IUserWriteStore>, IFluentInterface, IMock<IUserWriteStore>, IMockBase<Mock<IUserWriteStore>> Inheritance object Mock Mock<IUserWriteStore> UserWriteStoreMock Implements IFluentInterface IMock<IUserWriteStore> IMockBase<Mock<IUserWriteStore>> Inherited Members Mock<IUserWriteStore>.ToString() Mock<IUserWriteStore>.OnGetObject() Mock<IUserWriteStore>.As<TInterface>() Mock<IUserWriteStore>.Setup(Expression<Action<IUserWriteStore>>) Mock<IUserWriteStore>.Setup<TResult>(Expression<Func<IUserWriteStore, TResult>>) Mock<IUserWriteStore>.SetupGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>) Mock<IUserWriteStore>.SetupSet<TProperty>(Action<IUserWriteStore>) Mock<IUserWriteStore>.SetupSet(Action<IUserWriteStore>) Mock<IUserWriteStore>.SetupAdd(Action<IUserWriteStore>) Mock<IUserWriteStore>.SetupRemove(Action<IUserWriteStore>) Mock<IUserWriteStore>.SetupProperty<TProperty>(Expression<Func<IUserWriteStore, TProperty>>) Mock<IUserWriteStore>.SetupProperty<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, TProperty) Mock<IUserWriteStore>.SetupAllProperties() Mock<IUserWriteStore>.SetupSequence<TResult>(Expression<Func<IUserWriteStore, TResult>>) Mock<IUserWriteStore>.SetupSequence(Expression<Action<IUserWriteStore>>) Mock<IUserWriteStore>.When(Func<bool>) Mock<IUserWriteStore>.Verify(Expression<Action<IUserWriteStore>>) Mock<IUserWriteStore>.Verify(Expression<Action<IUserWriteStore>>, Times) Mock<IUserWriteStore>.Verify(Expression<Action<IUserWriteStore>>, Func<Times>) Mock<IUserWriteStore>.Verify(Expression<Action<IUserWriteStore>>, string) Mock<IUserWriteStore>.Verify(Expression<Action<IUserWriteStore>>, Times, string) Mock<IUserWriteStore>.Verify(Expression<Action<IUserWriteStore>>, Func<Times>, string) Mock<IUserWriteStore>.Verify<TResult>(Expression<Func<IUserWriteStore, TResult>>) Mock<IUserWriteStore>.Verify<TResult>(Expression<Func<IUserWriteStore, TResult>>, Times) Mock<IUserWriteStore>.Verify<TResult>(Expression<Func<IUserWriteStore, TResult>>, Func<Times>) Mock<IUserWriteStore>.Verify<TResult>(Expression<Func<IUserWriteStore, TResult>>, string) Mock<IUserWriteStore>.Verify<TResult>(Expression<Func<IUserWriteStore, TResult>>, Times, string) Mock<IUserWriteStore>.VerifyGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>) Mock<IUserWriteStore>.VerifyGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, Times) Mock<IUserWriteStore>.VerifyGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, Func<Times>) Mock<IUserWriteStore>.VerifyGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, string) Mock<IUserWriteStore>.VerifyGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, Times, string) Mock<IUserWriteStore>.VerifyGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, Func<Times>, string) Mock<IUserWriteStore>.VerifySet(Action<IUserWriteStore>) Mock<IUserWriteStore>.VerifySet(Action<IUserWriteStore>, Times) Mock<IUserWriteStore>.VerifySet(Action<IUserWriteStore>, Func<Times>) Mock<IUserWriteStore>.VerifySet(Action<IUserWriteStore>, string) Mock<IUserWriteStore>.VerifySet(Action<IUserWriteStore>, Times, string) Mock<IUserWriteStore>.VerifySet(Action<IUserWriteStore>, Func<Times>, string) Mock<IUserWriteStore>.VerifyAdd(Action<IUserWriteStore>) Mock<IUserWriteStore>.VerifyAdd(Action<IUserWriteStore>, Times) Mock<IUserWriteStore>.VerifyAdd(Action<IUserWriteStore>, Func<Times>) Mock<IUserWriteStore>.VerifyAdd(Action<IUserWriteStore>, string) Mock<IUserWriteStore>.VerifyAdd(Action<IUserWriteStore>, Times, string) Mock<IUserWriteStore>.VerifyAdd(Action<IUserWriteStore>, Func<Times>, string) Mock<IUserWriteStore>.VerifyRemove(Action<IUserWriteStore>) Mock<IUserWriteStore>.VerifyRemove(Action<IUserWriteStore>, Times) Mock<IUserWriteStore>.VerifyRemove(Action<IUserWriteStore>, Func<Times>) Mock<IUserWriteStore>.VerifyRemove(Action<IUserWriteStore>, string) Mock<IUserWriteStore>.VerifyRemove(Action<IUserWriteStore>, Times, string) Mock<IUserWriteStore>.VerifyRemove(Action<IUserWriteStore>, Func<Times>, string) Mock<IUserWriteStore>.VerifyNoOtherCalls() Mock<IUserWriteStore>.Raise(Action<IUserWriteStore>, EventArgs) Mock<IUserWriteStore>.Raise(Action<IUserWriteStore>, params object[]) Mock<IUserWriteStore>.RaiseAsync(Action<IUserWriteStore>, params object[]) Mock<IUserWriteStore>.Expect(Expression<Action<IUserWriteStore>>) Mock<IUserWriteStore>.Expect<TResult>(Expression<Func<IUserWriteStore, TResult>>) Mock<IUserWriteStore>.ExpectGet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>) Mock<IUserWriteStore>.ExpectSet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>) Mock<IUserWriteStore>.ExpectSet<TProperty>(Expression<Func<IUserWriteStore, TProperty>>, TProperty) Mock<IUserWriteStore>.Behavior Mock<IUserWriteStore>.CallBase Mock<IUserWriteStore>.DefaultValueProvider Mock<IUserWriteStore>.Object Mock<IUserWriteStore>.Name Mock<IUserWriteStore>.Switches Mock.Of<T>() Mock.Of<T>(MockBehavior) Mock.Of<T>(Expression<Func<T, bool>>) Mock.Of<T>(Expression<Func<T, bool>>, MockBehavior) Mock.Get<T>(T) Mock.Verify(params Mock[]) Mock.VerifyAll(params Mock[]) Mock.Verify() Mock.VerifyAll() Mock.SetReturnsDefault<TReturn>(TReturn) Mock.DefaultValue Mock.Invocations Mock.Setups object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Mock() public Mock<IUserWriteStore> Mock() Returns Mock<IUserWriteStore>"
  },
  "api/Authentica.Service.Identity.Tests.Mocks.html": {
    "href": "api/Authentica.Service.Identity.Tests.Mocks.html",
    "title": "Namespace Authentica.Service.Identity.Tests.Mocks | Authentica",
    "keywords": "Namespace Authentica.Service.Identity.Tests.Mocks Classes ApplicationReadStoreMock ApplicationWriteStoreMock BusMock ClaimsPrincipalMock DbContextMock DbSetMock<T> EmailPublisherMock FeatureManagerMock HttpContextMock IHttpContextAccessorMock JsonWebTokenProviderMock JwtSecurityTokenHandlerMock LoggerMock<T> RoleManagerMock ServiceProviderMock SignInManagerMock<TUser> TimerMock UserManagerMock<TUser> UserReadStoreMock UserWriteStoreMock Interfaces IMockBase<T>"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.ApplicationWriteStoreTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.ApplicationWriteStoreTests.html",
    "title": "Class ApplicationWriteStoreTests | Authentica",
    "keywords": "Class ApplicationWriteStoreTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class ApplicationWriteStoreTests Inheritance object ApplicationWriteStoreTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateClientApplicationAsync_Should_ReturnFailedResult_WhenExceptionThrown() [Test] public Task CreateClientApplicationAsync_Should_ReturnFailedResult_WhenExceptionThrown() Returns Task SetUp() [SetUp] public void SetUp() SoftDeleteApplicationAsync_Should_ReturnFailedResult_When_ApplicationIsNull() [Test] public Task SoftDeleteApplicationAsync_Should_ReturnFailedResult_When_ApplicationIsNull() Returns Task SoftDeleteApplicationAsync_Should_ReturnFailedResult_When_ExceptionIsThrown() [Test] public Task SoftDeleteApplicationAsync_Should_ReturnFailedResult_When_ExceptionIsThrown() Returns Task SoftDeleteApplicationAsync_Should_ReturnFailedResult_When_UserIsNull() [Test] public Task SoftDeleteApplicationAsync_Should_ReturnFailedResult_When_UserIsNull() Returns Task SoftDeleteApplicationAsync_Should_ReturnSuccess_When_ApplicationIsDeleted() [Test] public Task SoftDeleteApplicationAsync_Should_ReturnSuccess_When_ApplicationIsDeleted() Returns Task UpdateApplicationAsync_Should_ReturnFailedResult_When_ApplicationIsNull() [Test] public Task UpdateApplicationAsync_Should_ReturnFailedResult_When_ApplicationIsNull() Returns Task UpdateApplicationAsync_Should_ReturnFailedResult_When_ExceptionIsThrown() [Test] public Task UpdateApplicationAsync_Should_ReturnFailedResult_When_ExceptionIsThrown() Returns Task UpdateApplicationAsync_Should_ReturnFailedResult_When_UserIsNull() [Test] public Task UpdateApplicationAsync_Should_ReturnFailedResult_When_UserIsNull() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.EmailPublisherTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.EmailPublisherTests.html",
    "title": "Class EmailPublisherTests | Authentica",
    "keywords": "Class EmailPublisherTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class EmailPublisherTests Inheritance object EmailPublisherTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods PublishIsSuccessfulWithCorrectMessage() [Test] public Task PublishIsSuccessfulWithCorrectMessage() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.JsonWebTokenProviderTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.JsonWebTokenProviderTests.html",
    "title": "Class JsonWebTokenProviderTests | Authentica",
    "keywords": "Class JsonWebTokenProviderTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class JsonWebTokenProviderTests Inheritance object JsonWebTokenProviderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryCreateTokenAsync_ShouldCreateToken_WhenValidParametersAreProvided() [Test] public Task TryCreateTokenAsync_ShouldCreateToken_WhenValidParametersAreProvided() Returns Task TryCreateTokenAsync_ShouldFail_WhenExceptionIsThrown() [Test] public Task TryCreateTokenAsync_ShouldFail_WhenExceptionIsThrown() Returns Task TryValidateTokenAsync_ShouldFail_WhenExceptionIsThrown() [Test] public Task TryValidateTokenAsync_ShouldFail_WhenExceptionIsThrown() Returns Task TryValidateTokenAsync_ShouldFail_WhenInvalidTokenIsProvided() [Test] public Task TryValidateTokenAsync_ShouldFail_WhenInvalidTokenIsProvided() Returns Task TryValidateTokenAsync_ShouldValidateToken_WhenValidTokenIsProvided() [Test] public Task TryValidateTokenAsync_ShouldValidateToken_WhenValidTokenIsProvided() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.MultiFactorTotpProviderTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.MultiFactorTotpProviderTests.html",
    "title": "Class MultiFactorTotpProviderTests | Authentica",
    "keywords": "Class MultiFactorTotpProviderTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll [TestFixture] [Category(\"MultiFactorTotpProvider\")] public class MultiFactorTotpProviderTests Inheritance object MultiFactorTotpProviderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FormatKey_Returns_Formatted_Key() [Test] public void FormatKey_Returns_Formatted_Key() GenerateKeyAsync_Returns_New_Authenticator_Key() [Test] public Task GenerateKeyAsync_Returns_New_Authenticator_Key() Returns Task GenerateQrCodeUriAsync_Returns_Correct_QrCodeUri() [Test] public Task GenerateQrCodeUriAsync_Returns_Correct_QrCodeUri() Returns Task GenerateQrCodeUriAsync_Throws_When_AuthenticatorKey_Is_Null() [Test] public void GenerateQrCodeUriAsync_Throws_When_AuthenticatorKey_Is_Null() SetUp() [SetUp] public void SetUp() ValidateAsync_Returns_False_When_Token_Is_Invalid() [Test] public Task ValidateAsync_Returns_False_When_Token_Is_Invalid() Returns Task ValidateAsync_Returns_True_When_Token_Is_Valid() [Test] public Task ValidateAsync_Returns_True_When_Token_Is_Valid() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.ScopeProviderTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.ScopeProviderTests.html",
    "title": "Class ScopeProviderTests | Authentica",
    "keywords": "Class ScopeProviderTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class ScopeProviderTests Inheritance object ScopeProviderTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ParseScopes_ShouldRemoveEmptyEntries_WhenScopeStringContainsExtraSpaces() [Test] public void ParseScopes_ShouldRemoveEmptyEntries_WhenScopeStringContainsExtraSpaces() ParseScopes_ShouldReturnEmptyList_WhenScopeStringIsEmpty() [Test] public void ParseScopes_ShouldReturnEmptyList_WhenScopeStringIsEmpty() ParseScopes_ShouldReturnEmptyList_WhenScopeStringIsWhitespace() [Test] public void ParseScopes_ShouldReturnEmptyList_WhenScopeStringIsWhitespace() ParseScopes_ShouldReturnMultipleScopes_WhenScopeStringContainsMultipleScopesSeparatedBySpaces() [Test] public void ParseScopes_ShouldReturnMultipleScopes_WhenScopeStringContainsMultipleScopesSeparatedBySpaces() ParseScopes_ShouldReturnSingleScope_WhenScopeStringContainsOneScope() [Test] public void ParseScopes_ShouldReturnSingleScope_WhenScopeStringContainsOneScope() ParseScopes_ShouldTrimScopes_WhenScopeStringContainsWhitespaceAroundScopes() [Test] public void ParseScopes_ShouldTrimScopes_WhenScopeStringContainsWhitespaceAroundScopes() Setup() [SetUp] public void Setup()"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.SessionWriteStoreTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.SessionWriteStoreTests.html",
    "title": "Class SessionWriteStoreTests | Authentica",
    "keywords": "Class SessionWriteStoreTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class SessionWriteStoreTests Inheritance object SessionWriteStoreTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateAsync_Should_AddSessionToDbSet_And_SaveChanges() [Test] public Task CreateAsync_Should_AddSessionToDbSet_And_SaveChanges() Returns Task CreateAsync_Should_ThrowException_When_AddAsyncFails() [Test] public void CreateAsync_Should_ThrowException_When_AddAsyncFails() SetUp() [SetUp] public void SetUp()"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.UserReadStoreTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.UserReadStoreTests.html",
    "title": "Class UserReadStoreTests | Authentica",
    "keywords": "Class UserReadStoreTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class UserReadStoreTests Inheritance object UserReadStoreTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAllUsersAsync_ReturnsListOfUsers() [Test] public Task GetAllUsersAsync_ReturnsListOfUsers() Returns Task GetUserByEmailAsync_String_WhenUserDoesNotExist_ReturnsFailedResult() [Test] public Task GetUserByEmailAsync_String_WhenUserDoesNotExist_ReturnsFailedResult() Returns Task GetUserByEmailAsync_String_WhenUserExists_ReturnsSuccessResult() [Test] public Task GetUserByEmailAsync_String_WhenUserExists_ReturnsSuccessResult() Returns Task GetUserByEmailAsync_WhenUserDoesNotExist_ReturnsFailedResult() [Test] public Task GetUserByEmailAsync_WhenUserDoesNotExist_ReturnsFailedResult() Returns Task GetUserByEmailAsync_WhenUserExists_ReturnsSuccessResult() [Test] public Task GetUserByEmailAsync_WhenUserExists_ReturnsSuccessResult() Returns Task GetUserByIdAsync_WhenUserDoesNotExist_ReturnsFailedResult() [Test] public Task GetUserByIdAsync_WhenUserDoesNotExist_ReturnsFailedResult() Returns Task GetUserByIdAsync_WhenUserExists_ReturnsSuccessResult() [Test] public Task GetUserByIdAsync_WhenUserExists_ReturnsSuccessResult() Returns Task GetUserRolesAsync_WhenUserExists_ReturnsUserRoles() [Test] public Task GetUserRolesAsync_WhenUserExists_ReturnsUserRoles() Returns Task SetUp() [SetUp] public void SetUp()"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.UserWriteStoreTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.UserWriteStoreTests.html",
    "title": "Class UserWriteStoreTests | Authentica",
    "keywords": "Class UserWriteStoreTests Namespace Authentica.Service.Identity.Tests.UnitTests Assembly Authentica.Service.Identity.Tests.dll public class UserWriteStoreTests Inheritance object UserWriteStoreTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConfirmEmailAsync_WhenTokenIsInvalid_ReturnsFailureResult() [Test] public Task ConfirmEmailAsync_WhenTokenIsInvalid_ReturnsFailureResult() Returns Task ConfirmEmailAsync_WhenTokenIsNullOrWhiteSpace_ThrowsArgumentException() [Test] public void ConfirmEmailAsync_WhenTokenIsNullOrWhiteSpace_ThrowsArgumentException() ConfirmEmailAsync_WhenTokenIsValid_ReturnsSuccessResult() [Test] public Task ConfirmEmailAsync_WhenTokenIsValid_ReturnsSuccessResult() Returns Task CreateUserAsync_WhenCreationFails_ReturnsFailureResult() [Test] public Task CreateUserAsync_WhenCreationFails_ReturnsFailureResult() Returns Task CreateUserAsync_WhenSuccessful_ReturnsSuccessResult() [Test] public Task CreateUserAsync_WhenSuccessful_ReturnsSuccessResult() Returns Task RedeemMultiFactorRecoveryCodeAsync_WhenExceptionIsThrown_ReturnsFailureResult() [Test] public Task RedeemMultiFactorRecoveryCodeAsync_WhenExceptionIsThrown_ReturnsFailureResult() Returns Task RedeemMultiFactorRecoveryCodeAsync_WhenRedemptionFails_ReturnsFailureResult() [Test] public Task RedeemMultiFactorRecoveryCodeAsync_WhenRedemptionFails_ReturnsFailureResult() Returns Task RedeemMultiFactorRecoveryCodeAsync_WhenRedemptionSucceeds_ReturnsSuccessResult() [Test] public Task RedeemMultiFactorRecoveryCodeAsync_WhenRedemptionSucceeds_ReturnsSuccessResult() Returns Task ResetPasswordAsync_WhenTokenIsInvalid_ReturnsFailureResult() [Test] public Task ResetPasswordAsync_WhenTokenIsInvalid_ReturnsFailureResult() Returns Task ResetPasswordAsync_WhenTokenIsNullOrWhiteSpace_ThrowsArgumentException() [Test] public void ResetPasswordAsync_WhenTokenIsNullOrWhiteSpace_ThrowsArgumentException() ResetPasswordAsync_WhenTokenIsValid_ReturnsSuccessResult() [Test] public Task ResetPasswordAsync_WhenTokenIsValid_ReturnsSuccessResult() Returns Task Setup() [SetUp] public void Setup() SoftDeleteUserAsync_VerifiesUserManagerUpdateParameters() [Test] public Task SoftDeleteUserAsync_VerifiesUserManagerUpdateParameters() Returns Task SoftDeleteUserAsync_WhenSuccessful_ReturnsSuccessResult() [Test] public Task SoftDeleteUserAsync_WhenSuccessful_ReturnsSuccessResult() Returns Task SoftDeleteUserAsync_WhenUpdateFails_ReturnsFailureResult() [Test] public Task SoftDeleteUserAsync_WhenUpdateFails_ReturnsFailureResult() Returns Task SoftDeleteUserAsync_WhenUserNotFound_ThrowsException() [Test] public void SoftDeleteUserAsync_WhenUserNotFound_ThrowsException() UpdateEmailAsync_WhenExceptionIsThrown_ReturnsFailureResultWithException() [Test] public Task UpdateEmailAsync_WhenExceptionIsThrown_ReturnsFailureResultWithException() Returns Task UpdateEmailAsync_WhenTokenIsInvalid_ReturnsFailureResult() [Test] public Task UpdateEmailAsync_WhenTokenIsInvalid_ReturnsFailureResult() Returns Task UpdateEmailAsync_WhenTokenIsValid_UpdatesEmailAndReturnsSuccessResult() [Test] public Task UpdateEmailAsync_WhenTokenIsValid_UpdatesEmailAndReturnsSuccessResult() Returns Task UpdatePhoneNumberAsync_WhenExceptionIsThrown_ReturnsFailureResultWithException() [Test] public Task UpdatePhoneNumberAsync_WhenExceptionIsThrown_ReturnsFailureResultWithException() Returns Task UpdatePhoneNumberAsync_WhenTokenIsInvalid_ReturnsFailureResult() [Test] public Task UpdatePhoneNumberAsync_WhenTokenIsInvalid_ReturnsFailureResult() Returns Task UpdatePhoneNumberAsync_WhenTokenIsValid_UpdatesPhoneNumberAndReturnsSuccessResult() [Test] public Task UpdatePhoneNumberAsync_WhenTokenIsValid_UpdatesPhoneNumberAndReturnsSuccessResult() Returns Task"
  },
  "api/Authentica.Service.Identity.Tests.UnitTests.html": {
    "href": "api/Authentica.Service.Identity.Tests.UnitTests.html",
    "title": "Namespace Authentica.Service.Identity.Tests.UnitTests | Authentica",
    "keywords": "Namespace Authentica.Service.Identity.Tests.UnitTests Classes ApplicationWriteStoreTests EmailPublisherTests JsonWebTokenProviderTests MultiFactorTotpProviderTests ScopeProviderTests SessionWriteStoreTests UserReadStoreTests UserWriteStoreTests"
  },
  "api/Authentica.Service.Identity.html": {
    "href": "api/Authentica.Service.Identity.html",
    "title": "Namespace Authentica.Service.Identity | Authentica",
    "keywords": "Namespace Authentica.Service.Identity Classes Program The entry point for the Web Application."
  },
  "api/Authentica.TestClient.Controllers.TestController.html": {
    "href": "api/Authentica.TestClient.Controllers.TestController.html",
    "title": "Class TestController | Authentica",
    "keywords": "Class TestController Namespace Authentica.TestClient.Controllers Assembly Authentica.TestClient.dll [ApiController] [Route(\"test\")] public class TestController : ControllerBase Inheritance object ControllerBase TestController Inherited Members ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Get() [HttpGet] [Authorize(AuthenticationSchemes = \"Bearer\")] [ProducesResponseType(200)] public ActionResult Get() Returns ActionResult"
  },
  "api/Authentica.TestClient.Controllers.html": {
    "href": "api/Authentica.TestClient.Controllers.html",
    "title": "Namespace Authentica.TestClient.Controllers | Authentica",
    "keywords": "Namespace Authentica.TestClient.Controllers Classes TestController"
  },
  "api/Authentica.TestClient.Program.html": {
    "href": "api/Authentica.TestClient.Program.html",
    "title": "Class Program | Authentica",
    "keywords": "Class Program Namespace Authentica.TestClient Assembly Authentica.TestClient.dll public class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static void Main(string[] args) Parameters args string[]"
  },
  "api/Authentica.TestClient.ServiceCollectionExtensions.html": {
    "href": "api/Authentica.TestClient.ServiceCollectionExtensions.html",
    "title": "Class ServiceCollectionExtensions | Authentica",
    "keywords": "Class ServiceCollectionExtensions Namespace Authentica.TestClient Assembly Authentica.TestClient.dll public static class ServiceCollectionExtensions Inheritance object ServiceCollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddBearerAuthentication(IServiceCollection) public static IServiceCollection AddBearerAuthentication(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/Authentica.TestClient.html": {
    "href": "api/Authentica.TestClient.html",
    "title": "Namespace Authentica.TestClient | Authentica",
    "keywords": "Namespace Authentica.TestClient Classes Program ServiceCollectionExtensions"
  },
  "api/Authentica.WorkerService.Email.ISmtpClient.html": {
    "href": "api/Authentica.WorkerService.Email.ISmtpClient.html",
    "title": "Interface ISmtpClient | Authentica",
    "keywords": "Interface ISmtpClient Namespace Authentica.WorkerService.Email Assembly Authentica.WorkerService.Email.dll public interface ISmtpClient : IDisposable Inherited Members IDisposable.Dispose() Methods SendMailAsync(MailMessage) Task SendMailAsync(MailMessage message) Parameters message MailMessage Returns Task"
  },
  "api/Authentica.WorkerService.Email.Program.html": {
    "href": "api/Authentica.WorkerService.Email.Program.html",
    "title": "Class Program | Authentica",
    "keywords": "Class Program Namespace Authentica.WorkerService.Email Assembly Authentica.WorkerService.Email.dll public sealed class Program Inheritance object Program Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Main(string[]) public static Task Main(string[] args) Parameters args string[] Returns Task"
  },
  "api/Authentica.WorkerService.Email.ServiceNameDefaults.html": {
    "href": "api/Authentica.WorkerService.Email.ServiceNameDefaults.html",
    "title": "Class ServiceNameDefaults | Authentica",
    "keywords": "Class ServiceNameDefaults Namespace Authentica.WorkerService.Email Assembly Authentica.WorkerService.Email.dll public static class ServiceNameDefaults Inheritance object ServiceNameDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ServiceName public const string ServiceName = \"Authentica.WorkerService.Email\" Field Value string"
  },
  "api/Authentica.WorkerService.Email.SmtpClientWrapper.html": {
    "href": "api/Authentica.WorkerService.Email.SmtpClientWrapper.html",
    "title": "Class SmtpClientWrapper | Authentica",
    "keywords": "Class SmtpClientWrapper Namespace Authentica.WorkerService.Email Assembly Authentica.WorkerService.Email.dll Wrapper class for the SmtpClient to send emails. public sealed class SmtpClientWrapper : ISmtpClient, IDisposable Inheritance object SmtpClientWrapper Implements ISmtpClient IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SmtpClientWrapper(SmtpClient, IConfiguration) Initializes a new instance of the SmtpClientWrapper class. public SmtpClientWrapper(SmtpClient smtpClient, IConfiguration configuration) Parameters smtpClient SmtpClient The SmtpClient instance to be used for sending emails. configuration IConfiguration Properties Configuration Configuration interface for accessing email settings. public IConfiguration Configuration { get; } Property Value IConfiguration Methods Dispose() Disposes the SmtpClient instance. public void Dispose() ~SmtpClientWrapper() protected ~SmtpClientWrapper() SendMailAsync(MailMessage) Sends an email asynchronously. public Task SendMailAsync(MailMessage message) Parameters message MailMessage The email message to be sent. Returns Task A task representing the asynchronous email sending operation."
  },
  "api/Authentica.WorkerService.Email.Tests.WorkerTests.html": {
    "href": "api/Authentica.WorkerService.Email.Tests.WorkerTests.html",
    "title": "Class WorkerTests | Authentica",
    "keywords": "Class WorkerTests Namespace Authentica.WorkerService.Email.Tests Assembly Authentica.WorkerService.Email.Tests.dll [TestFixture] public class WorkerTests Inheritance object WorkerTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Consume_ConfirmEmail_SendsEmail() [Test] public Task Consume_ConfirmEmail_SendsEmail() Returns Task Consume_MultiFactorToken_SendsEmail() [Test] public Task Consume_MultiFactorToken_SendsEmail() Returns Task Consume_ResetPassword_SendsEmail() [Test] public Task Consume_ResetPassword_SendsEmail() Returns Task Consume_UpdateEmail_SendsEmail() [Test] public Task Consume_UpdateEmail_SendsEmail() Returns Task Consume_UpdatePhoneNumber_SendsEmail() [Test] public Task Consume_UpdatePhoneNumber_SendsEmail() Returns Task Setup() [SetUp] public void Setup()"
  },
  "api/Authentica.WorkerService.Email.Tests.html": {
    "href": "api/Authentica.WorkerService.Email.Tests.html",
    "title": "Namespace Authentica.WorkerService.Email.Tests | Authentica",
    "keywords": "Namespace Authentica.WorkerService.Email.Tests Classes WorkerTests"
  },
  "api/Authentica.WorkerService.Email.Worker.html": {
    "href": "api/Authentica.WorkerService.Email.Worker.html",
    "title": "Class Worker | Authentica",
    "keywords": "Class Worker Namespace Authentica.WorkerService.Email Assembly Authentica.WorkerService.Email.dll Consume the message from the message queue, and sends an email. public class Worker : IConsumer<EmailMessage>, IConsumer Inheritance object Worker Implements IConsumer<EmailMessage> IConsumer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks Initializes a new instance of Worker Constructors Worker(ILogger<Worker>, IServiceProvider) Consume the message from the message queue, and sends an email. public Worker(ILogger<Worker> logger, IServiceProvider serviceProvider) Parameters logger ILogger<Worker> The application logger. serviceProvider IServiceProvider Remarks Initializes a new instance of Worker Properties Logger The application logger. public ILogger<Worker> Logger { get; } Property Value ILogger<Worker> ServiceProvider The service provider. public IServiceProvider ServiceProvider { get; } Property Value IServiceProvider Methods Consume(ConsumeContext<EmailMessage>) Consumes a message from the message queue. public Task Consume(ConsumeContext<EmailMessage> context) Parameters context ConsumeContext<EmailMessage> The MassTransit.ConsumeContext<T> that allows for message consumption. Returns Task An asyncronous Task Remarks This method is automatically executed, as MassTransit registers consumers and publishers (producers) as a BackgroundService which implements IHostedService"
  },
  "api/Authentica.WorkerService.Email.html": {
    "href": "api/Authentica.WorkerService.Email.html",
    "title": "Namespace Authentica.WorkerService.Email | Authentica",
    "keywords": "Namespace Authentica.WorkerService.Email Classes Program ServiceNameDefaults SmtpClientWrapper Wrapper class for the SmtpClient to send emails. Worker Consume the message from the message queue, and sends an email. Interfaces ISmtpClient"
  },
  "api/Domain.Aggregates.Identity.Activity-1.html": {
    "href": "api/Domain.Aggregates.Identity.Activity-1.html",
    "title": "Class Activity<TKey> | Authentica",
    "keywords": "Class Activity<TKey> Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a generic event with a key of type TKey. public class Activity<TKey> where TKey : IEquatable<TKey> Type Parameters TKey The type of the key. Inheritance object Activity<TKey> Derived Activity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActivityType Gets or sets the type of the activity. public string ActivityType { get; set; } Property Value string CreatedOn Gets or sets the date and time when the activity was created. public virtual DateTime CreatedOn { get; set; } Property Value DateTime Data Gets or sets the request associated with the activity. public string? Data { get; set; } Property Value string Id Gets or sets the unique identifier for the activity. public virtual TKey Id { get; set; } Property Value TKey SequenceId Gets or sets the session ID associated with the activity. public string SequenceId { get; set; } Property Value string"
  },
  "api/Domain.Aggregates.Identity.Activity.html": {
    "href": "api/Domain.Aggregates.Identity.Activity.html",
    "title": "Class Activity | Authentica",
    "keywords": "Class Activity Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents an event with a string key. public sealed class Activity : Activity<string> Inheritance object Activity<string> Activity Inherited Members Activity<string>.SequenceId Activity<string>.ActivityType Activity<string>.CreatedOn Activity<string>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the unique identifier for the event. public override string Id { get; set; } Property Value string"
  },
  "api/Domain.Aggregates.Identity.ClientApplication-1.html": {
    "href": "api/Domain.Aggregates.Identity.ClientApplication-1.html",
    "title": "Class ClientApplication<TKey> | Authentica",
    "keywords": "Class ClientApplication<TKey> Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Base class for client applications representing OAuth 2.0 clients. public abstract class ClientApplication<TKey> where TKey : IEquatable<TKey> Type Parameters TKey The type of the unique identifier key. Inheritance object ClientApplication<TKey> Derived ClientApplication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CallbackUri Gets or sets the callback uri for the client application. public virtual string CallbackUri { get; set; } Property Value string ClientId Gets or sets the globally unique identifier for the application. public virtual TKey ClientId { get; set; } Property Value TKey ClientSecret Gets or sets the client secret used for authentication. public virtual string? ClientSecret { get; set; } Property Value string ConcurrencyStamp A random value that should change whenever an application is persisted. public virtual string? ConcurrencyStamp { get; set; } Property Value string Id Gets or sets the unique identifier key for the application. public virtual TKey Id { get; set; } Property Value TKey Name Gets or sets the name of the client application. public virtual string Name { get; set; } Property Value string"
  },
  "api/Domain.Aggregates.Identity.ClientApplication.html": {
    "href": "api/Domain.Aggregates.Identity.ClientApplication.html",
    "title": "Class ClientApplication | Authentica",
    "keywords": "Class ClientApplication Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a client application in the system. public sealed class ClientApplication : ClientApplication<string>, IEntityDeletionStatus<string> Inheritance object ClientApplication<string> ClientApplication Implements IEntityDeletionStatus<string> Inherited Members ClientApplication<string>.ClientSecret ClientApplication<string>.Name ClientApplication<string>.CallbackUri ClientApplication<string>.ConcurrencyStamp object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ClientId Gets or sets the globally unique identifier for the client application. public override string ClientId { get; set; } Property Value string EntityCreationStatus Gets or sets the creation status of the entity. public EntityCreationStatus<string> EntityCreationStatus { get; set; } Property Value EntityCreationStatus<string> Remarks This property contains information about the creation of the entity. It includes whether the creation was successful and any relevant messages. EntityDeletionStatus Gets or sets the deletion status of the entity. public EntityDeletionStatus<string> EntityDeletionStatus { get; set; } Property Value EntityDeletionStatus<string> Remarks This property tracks whether the entity has been soft-deleted, along with metadata about the deletion event (like the timestamp and user responsible). EntityModificationStatus Gets or sets the modification status of the entity. public EntityModificationStatus<string> EntityModificationStatus { get; set; } Property Value EntityModificationStatus<string> Remarks This property stores information about when the entity was created and last modified, and who performed the actions. Id Gets or sets the unique identifier for the client application. public override string Id { get; set; } Property Value string UserClientApplications Gets or sets the collection of user-client application links associated with this client application. public ICollection<UserClientApplication> UserClientApplications { get; set; } Property Value ICollection<UserClientApplication>"
  },
  "api/Domain.Aggregates.Identity.Role.html": {
    "href": "api/Domain.Aggregates.Identity.Role.html",
    "title": "Class Role | Authentica",
    "keywords": "Class Role Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a role in the identity system with additional auditing and soft deletion properties. public sealed class Role : IdentityRole<string> Inheritance object IdentityRole<string> Role Inherited Members IdentityRole<string>.ToString() IdentityRole<string>.Name IdentityRole<string>.NormalizedName IdentityRole<string>.ConcurrencyStamp object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties EntityCreationStatus Gets or sets the creation status of the entity. public EntityCreationStatus<string> EntityCreationStatus { get; set; } Property Value EntityCreationStatus<string> Remarks This property contains information about the creation of the entity. It includes whether the creation was successful and any relevant messages. EntityDeletionStatus Gets or sets the deletion status of the entity. public EntityDeletionStatus<string> EntityDeletionStatus { get; set; } Property Value EntityDeletionStatus<string> Remarks This property tracks whether the entity has been soft-deleted, along with metadata about the deletion event (like the timestamp and user responsible). EntityModificationStatus Gets or sets the modification status of the entity. public EntityModificationStatus<string> EntityModificationStatus { get; set; } Property Value EntityModificationStatus<string> Remarks This property stores information about when the entity was created and last modified, and who performed the actions. Id Gets or sets the unique identifier for the role. public override string Id { get; set; } Property Value string RoleClaims Gets or sets the collection of claims associated with this role. public ICollection<RoleClaim> RoleClaims { get; set; } Property Value ICollection<RoleClaim> UserRoles Gets or sets the collection of user roles associated with this role. public ICollection<UserRole> UserRoles { get; set; } Property Value ICollection<UserRole>"
  },
  "api/Domain.Aggregates.Identity.RoleClaim.html": {
    "href": "api/Domain.Aggregates.Identity.RoleClaim.html",
    "title": "Class RoleClaim | Authentica",
    "keywords": "Class RoleClaim Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a claim associated with a role in the identity system. public sealed class RoleClaim : IdentityRoleClaim<string> Inheritance object IdentityRoleClaim<string> RoleClaim Inherited Members IdentityRoleClaim<string>.ToClaim() IdentityRoleClaim<string>.InitializeFromClaim(Claim) IdentityRoleClaim<string>.RoleId IdentityRoleClaim<string>.ClaimType IdentityRoleClaim<string>.ClaimValue object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ConcurrencyStamp A random value that should change whenever a role is persisted to the store. public string? ConcurrencyStamp { get; set; } Property Value string Id Gets or sets the unique identifier for the role claim. public string Id { get; set; } Property Value string Role Gets or sets the role associated with this claim. public Role Role { get; set; } Property Value Role"
  },
  "api/Domain.Aggregates.Identity.Session.html": {
    "href": "api/Domain.Aggregates.Identity.Session.html",
    "title": "Class Session | Authentica",
    "keywords": "Class Session Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a user session within the system. public sealed class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties EndDateTime Gets or sets the end time of the session. public DateTime? EndDateTime { get; set; } Property Value DateTime? Remarks This is null if the session is still active. When set, it indicates that the session has ended, and can be used to calculate the total session duration. EntityCreationStatus Gets or sets the creation status of the entity. public EntityCreationStatus<string> EntityCreationStatus { get; set; } Property Value EntityCreationStatus<string> Remarks This property contains information about the creation of the entity. It includes whether the creation was successful and any relevant messages. EntityDeletionStatus Gets or sets the deletion status of the entity. public EntityDeletionStatus<string> EntityDeletionStatus { get; set; } Property Value EntityDeletionStatus<string> Remarks This property tracks whether the entity has been soft-deleted, along with metadata about the deletion event (like the timestamp and user responsible). Id Gets or sets the unique identifier for the session entity. public string Id { get; set; } Property Value string Remarks This is automatically generated as a new GUID string when the session is created. It serves as the primary key for the session entity in the database. IpAddress Gets or sets the IP address from which the originated. public string? IpAddress { get; set; } Property Value string Remarks This can be used for security auditing or geographical tracking purposes. It's nullable to account for scenarios where the IP address might not be available or applicable. SessionId Gets or sets the session identifier. public string SessionId { get; set; } Property Value string Remarks This is used to uniquely identify a user's session within the system. It is different from the Id property, which is the entity's unique identifier. This could be used for session management and tracking purposes. StartDateTime Gets or sets the start time of the session. public DateTime StartDateTime { get; set; } Property Value DateTime Remarks This is automatically set to the current UTC time when the session is created. It can be used to calculate session duration or for auditing purposes. Status Gets or sets the current status of the session. public string Status { get; set; } Property Value string Remarks This could represent states such as \"Active\", \"Expired\", \"Terminated\", etc. It can be used to quickly determine the current state of the session without examining other properties. UserAgent Gets or sets the user agent string of the client that initiated the session. public string UserAgent { get; set; } Property Value string Remarks This typically contains information about the user's browser and operating system. It can be used for analytics, debugging, or tailoring the user experience. UserId Gets or sets the user ID associated with this session. public string UserId { get; set; } Property Value string Remarks This links the session to a specific user in the system. It can be used to retrieve user-specific information or apply user-specific settings during the session."
  },
  "api/Domain.Aggregates.Identity.User.html": {
    "href": "api/Domain.Aggregates.Identity.User.html",
    "title": "Class User | Authentica",
    "keywords": "Class User Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a user in the identity system with additional auditing and soft deletion properties. public sealed class User : IdentityUser<string>, IEntityDeletionStatus<string> Inheritance object IdentityUser<string> User Implements IEntityDeletionStatus<string> Inherited Members IdentityUser<string>.ToString() IdentityUser<string>.UserName IdentityUser<string>.NormalizedUserName IdentityUser<string>.Email IdentityUser<string>.NormalizedEmail IdentityUser<string>.EmailConfirmed IdentityUser<string>.PasswordHash IdentityUser<string>.SecurityStamp IdentityUser<string>.ConcurrencyStamp IdentityUser<string>.PhoneNumber IdentityUser<string>.PhoneNumberConfirmed IdentityUser<string>.TwoFactorEnabled IdentityUser<string>.LockoutEnd IdentityUser<string>.LockoutEnabled IdentityUser<string>.AccessFailedCount object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Properties Address Gets or sets the address of the user. public Address Address { get; set; } Property Value Address EntityCreationStatus Gets or sets the creation status of the entity. public EntityCreationStatus<string> EntityCreationStatus { get; set; } Property Value EntityCreationStatus<string> Remarks This property contains information about the creation of the entity. It includes whether the creation was successful and any relevant messages. EntityDeletionStatus Gets or sets the deletion status of the entity. public EntityDeletionStatus<string> EntityDeletionStatus { get; set; } Property Value EntityDeletionStatus<string> Remarks This property tracks whether the entity has been soft-deleted, along with metadata about the deletion event (like the timestamp and user responsible). EntityModificationStatus Gets or sets the modification status of the entity. public EntityModificationStatus<string> EntityModificationStatus { get; set; } Property Value EntityModificationStatus<string> Remarks This property stores information about when the entity was created and last modified, and who performed the actions. Id Gets or sets the unique identifier for the user. public override string Id { get; set; } Property Value string MultiFactorAuthenticatorEnabled Gets or sets if the user has enabled application based TOTPs. public bool MultiFactorAuthenticatorEnabled { get; set; } Property Value bool UserClaims Gets or sets the collection of user claims associated with the user. public ICollection<UserClaim> UserClaims { get; set; } Property Value ICollection<UserClaim> UserClientApplications Gets or sets the collection of user-client application links associated with the user. public ICollection<UserClientApplication> UserClientApplications { get; set; } Property Value ICollection<UserClientApplication> UserRoles Gets or sets the collection of user roles associated with the user. public ICollection<UserRole> UserRoles { get; set; } Property Value ICollection<UserRole>"
  },
  "api/Domain.Aggregates.Identity.UserClaim.html": {
    "href": "api/Domain.Aggregates.Identity.UserClaim.html",
    "title": "Class UserClaim | Authentica",
    "keywords": "Class UserClaim Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a claim associated with a user in the identity system. public sealed class UserClaim : IdentityUserClaim<string> Inheritance object IdentityUserClaim<string> UserClaim Inherited Members IdentityUserClaim<string>.ToClaim() IdentityUserClaim<string>.InitializeFromClaim(Claim) IdentityUserClaim<string>.ClaimType IdentityUserClaim<string>.ClaimValue object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ConcurrencyStamp A random value that should change whenever a application is persisted. public string? ConcurrencyStamp { get; set; } Property Value string EntityCreationStatus Gets or sets the creation status of the entity. public EntityCreationStatus<string> EntityCreationStatus { get; set; } Property Value EntityCreationStatus<string> Remarks This property contains information about the creation of the entity. It includes whether the creation was successful and any relevant messages. EntityDeletionStatus Gets or sets the deletion status of the entity. public EntityDeletionStatus<string> EntityDeletionStatus { get; set; } Property Value EntityDeletionStatus<string> Remarks This property tracks whether the entity has been soft-deleted, along with metadata about the deletion event (like the timestamp and user responsible). EntityModificationStatus Gets or sets the modification status of the entity. public EntityModificationStatus<string> EntityModificationStatus { get; set; } Property Value EntityModificationStatus<string> Remarks This property stores information about when the entity was created and last modified, and who performed the actions. Id Gets or sets the unique identifier for the user claim. public string Id { get; set; } Property Value string User Gets or sets the user navigation property. public User User { get; set; } Property Value User UserId Gets or sets the foreign key for a user. public override string UserId { get; set; } Property Value string"
  },
  "api/Domain.Aggregates.Identity.UserClientApplication-1.html": {
    "href": "api/Domain.Aggregates.Identity.UserClientApplication-1.html",
    "title": "Class UserClientApplication<TKey> | Authentica",
    "keywords": "Class UserClientApplication<TKey> Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a user-client application link with a specific key type. public class UserClientApplication<TKey> where TKey : IEquatable<TKey> Type Parameters TKey The type of the key. Inheritance object UserClientApplication<TKey> Derived UserClientApplication Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Application Gets or sets the client application associated with this link. public virtual ClientApplication Application { get; set; } Property Value ClientApplication ApplicationId Gets or sets the identifier of the client application associated with this link. public virtual TKey ApplicationId { get; set; } Property Value TKey Id Gets or sets the unique identifier for the user-client application link. public virtual TKey Id { get; set; } Property Value TKey User Gets or sets the user associated with this link. public User User { get; set; } Property Value User UserId Gets or sets the identifier of the user associated with this link. public virtual TKey UserId { get; set; } Property Value TKey"
  },
  "api/Domain.Aggregates.Identity.UserClientApplication.html": {
    "href": "api/Domain.Aggregates.Identity.UserClientApplication.html",
    "title": "Class UserClientApplication | Authentica",
    "keywords": "Class UserClientApplication Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents a default implementation for the user-client application link with a string key. public sealed class UserClientApplication : UserClientApplication<string> Inheritance object UserClientApplication<string> UserClientApplication Inherited Members UserClientApplication<string>.UserId UserClientApplication<string>.User UserClientApplication<string>.ApplicationId UserClientApplication<string>.Application object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Id Gets or sets the unique identifier for the user-client application link. public override string Id { get; set; } Property Value string"
  },
  "api/Domain.Aggregates.Identity.UserRole.html": {
    "href": "api/Domain.Aggregates.Identity.UserRole.html",
    "title": "Class UserRole | Authentica",
    "keywords": "Class UserRole Namespace Domain.Aggregates.Identity Assembly Authentica.Service.Identity.dll Represents the link between a user and a role in the identity system. public sealed class UserRole : IdentityUserRole<string> Inheritance object IdentityUserRole<string> UserRole Inherited Members IdentityUserRole<string>.UserId IdentityUserRole<string>.RoleId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Role Gets or sets the role associated with this user-role relationship. public Role Role { get; set; } Property Value Role User Gets or sets the user associated with this user-role relationship. public User User { get; set; } Property Value User"
  },
  "api/Domain.Aggregates.Identity.html": {
    "href": "api/Domain.Aggregates.Identity.html",
    "title": "Namespace Domain.Aggregates.Identity | Authentica",
    "keywords": "Namespace Domain.Aggregates.Identity Classes Activity Represents an event with a string key. Activity<TKey> Represents a generic event with a key of type TKey. ClientApplication Represents a client application in the system. ClientApplication<TKey> Base class for client applications representing OAuth 2.0 clients. Role Represents a role in the identity system with additional auditing and soft deletion properties. RoleClaim Represents a claim associated with a role in the identity system. Session Represents a user session within the system. User Represents a user in the identity system with additional auditing and soft deletion properties. UserClaim Represents a claim associated with a user in the identity system. UserClientApplication Represents a default implementation for the user-client application link with a string key. UserClientApplication<TKey> Represents a user-client application link with a specific key type. UserRole Represents the link between a user and a role in the identity system."
  },
  "api/Domain.Constants.CorsDefaults.html": {
    "href": "api/Domain.Constants.CorsDefaults.html",
    "title": "Class CorsDefaults | Authentica",
    "keywords": "Class CorsDefaults Namespace Domain.Constants Assembly Authentica.Service.Identity.dll Constants related to CORS (Cross-Origin Resource Sharing) policies. public static class CorsDefaults Inheritance object CorsDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PolicyName The name of the CORS policy used in the application. public const string PolicyName = \"CorsPolicy\" Field Value string"
  },
  "api/Domain.Constants.ServiceNameDefaults.html": {
    "href": "api/Domain.Constants.ServiceNameDefaults.html",
    "title": "Class ServiceNameDefaults | Authentica",
    "keywords": "Class ServiceNameDefaults Namespace Domain.Constants Assembly Authentica.Service.Identity.dll Contains default values for service names used in the application. public static class ServiceNameDefaults Inheritance object ServiceNameDefaults Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ServiceName The default name of the service. public const string ServiceName = \"Authentica.Service.Identity\" Field Value string"
  },
  "api/Domain.Constants.SessionConstants.html": {
    "href": "api/Domain.Constants.SessionConstants.html",
    "title": "Class SessionConstants | Authentica",
    "keywords": "Class SessionConstants Namespace Domain.Constants Assembly Authentica.Service.Identity.dll Provides constant values related to session management. public static class SessionConstants Inheritance object SessionConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SequenceId The key used to store and retrieve the sequence identifier from the session. public const string SequenceId = \"SequenceId\" Field Value string"
  },
  "api/Domain.Constants.SessionStatus.html": {
    "href": "api/Domain.Constants.SessionStatus.html",
    "title": "Class SessionStatus | Authentica",
    "keywords": "Class SessionStatus Namespace Domain.Constants Assembly Authentica.Service.Identity.dll Provides constant values representing the status of a session. public static class SessionStatus Inheritance object SessionStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Active Indicates that the session is currently active. public const string Active = \"Active\" Field Value string Terminated Indicates that the session has been terminated. public const string Terminated = \"Terminated\" Field Value string"
  },
  "api/Domain.Constants.TokenConstants.html": {
    "href": "api/Domain.Constants.TokenConstants.html",
    "title": "Class TokenConstants | Authentica",
    "keywords": "Class TokenConstants Namespace Domain.Constants Assembly Authentica.Service.Identity.dll Represents the authorize response types public static class TokenConstants Inheritance object TokenConstants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AuthorizationCode Represents the value for the authorization code token type. public const string AuthorizationCode = \"code\" Field Value string ClientCredentials Represents the value for client credentials token type. public const string ClientCredentials = \"client_credentials\" Field Value string DeviceCode Represents the value for device code token type. public const string DeviceCode = \"device_code\" Field Value string Refresh Represents the value for the refresh token type. public const string Refresh = \"refresh_token\" Field Value string"
  },
  "api/Domain.Constants.html": {
    "href": "api/Domain.Constants.html",
    "title": "Namespace Domain.Constants | Authentica",
    "keywords": "Namespace Domain.Constants Classes CorsDefaults Constants related to CORS (Cross-Origin Resource Sharing) policies. ServiceNameDefaults Contains default values for service names used in the application. SessionConstants Provides constant values related to session management. SessionStatus Provides constant values representing the status of a session. TokenConstants Represents the authorize response types"
  },
  "api/Domain.Contracts.IEntityDeletionStatus-1.html": {
    "href": "api/Domain.Contracts.IEntityDeletionStatus-1.html",
    "title": "Interface IEntityDeletionStatus<TKey> | Authentica",
    "keywords": "Interface IEntityDeletionStatus<TKey> Namespace Domain.Contracts Assembly Authentica.Service.Identity.dll Defines a contract for a soft-deletable entity. public interface IEntityDeletionStatus<TKey> where TKey : IEquatable<TKey> Type Parameters TKey Remarks This contract enables a generic method in our shared store to purge entries in the database, as we need a type constraint to access the properties when representing this as a generic method. Properties EntityDeletionStatus The deletion status of an entity. EntityDeletionStatus<TKey> EntityDeletionStatus { get; set; } Property Value EntityDeletionStatus<TKey>"
  },
  "api/Domain.Contracts.html": {
    "href": "api/Domain.Contracts.html",
    "title": "Namespace Domain.Contracts | Authentica",
    "keywords": "Namespace Domain.Contracts Interfaces IEntityDeletionStatus<TKey> Defines a contract for a soft-deletable entity."
  },
  "api/Domain.Errors.CustomProblemDetails.html": {
    "href": "api/Domain.Errors.CustomProblemDetails.html",
    "title": "Class CustomProblemDetails | Authentica",
    "keywords": "Class CustomProblemDetails Namespace Domain.Errors Assembly Authentica.Service.Identity.dll A custom implementation of ProblemDetails that includes additional information for error handling. public sealed class CustomProblemDetails : ProblemDetails Inheritance object ProblemDetails CustomProblemDetails Inherited Members ProblemDetails.Type ProblemDetails.Title ProblemDetails.Status ProblemDetails.Detail ProblemDetails.Instance ProblemDetails.Extensions object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties ExceptionType Gets or sets the type of the exception that occurred. [JsonPropertyName(\"exceptionType\")] public string? ExceptionType { get; set; } Property Value string MachineName Gets or sets the name of the machine where the error occurred. [JsonPropertyName(\"machineName\")] public string MachineName { get; set; } Property Value string Method Gets or sets the HTTP method used. [JsonPropertyName(\"method\")] public string Method { get; set; } Property Value string RequestId Gets or sets the request identifier for tracking purposes. [JsonPropertyName(\"requestId\")] public string RequestId { get; set; } Property Value string ServiceName Gets or sets the name of the service where the error occurred. [JsonPropertyName(\"serviceName\")] public string ServiceName { get; set; } Property Value string StackTrace Gets or sets the stack trace of the exception for debugging purposes. [JsonPropertyName(\"stackTrace\")] public string StackTrace { get; set; } Property Value string Timestamp Gets or sets the timestamp when the error occurred. [JsonPropertyName(\"timestamp\")] public DateTime Timestamp { get; set; } Property Value DateTime UserAgent Gets or sets the user agent. [JsonPropertyName(\"userAgent\")] public string UserAgent { get; set; } Property Value string UserId Gets or sets the user identifier if the error is associated with a specific user. [JsonPropertyName(\"userId\")] public string? UserId { get; set; } Property Value string"
  },
  "api/Domain.Errors.html": {
    "href": "api/Domain.Errors.html",
    "title": "Namespace Domain.Errors | Authentica",
    "keywords": "Namespace Domain.Errors Classes CustomProblemDetails A custom implementation of ProblemDetails that includes additional information for error handling."
  },
  "api/Domain.ValueObjects.Address.html": {
    "href": "api/Domain.ValueObjects.Address.html",
    "title": "Class Address | Authentica",
    "keywords": "Class Address Namespace Domain.ValueObjects Assembly Authentica.Service.Identity.dll Represents an address value object. public sealed class Address Inheritance object Address Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Address() Initializes a new instance of the Address class. public Address() Address(string?, string?, string?, string?, string?) Initializes a new instance of the Address class. public Address(string? street, string? city, string? state, string? postCode, string? country) Parameters street string The street address. city string The city. state string The state or province. postCode string The postal code. country string The country. Address(string?, string?, string?, string?, string?, string?, string?) Initializes a new instance of the Address class with building name and door number. public Address(string? street, string? city, string? state, string? postalCode, string? country, string? name, string? number) Parameters street string The street address. city string The city. state string The state or province. postalCode string The postal code. country string The country. name string The name of the building. number string The door number. Properties City Gets the city. public string? City { get; set; } Property Value string Country Gets the country. public string? Country { get; set; } Property Value string Name Gets or sets the name of the building, if there is one. public string? Name { get; set; } Property Value string Number Gets or sets the door number, if there is one. public string? Number { get; set; } Property Value string Postcode Gets the post code. public string? Postcode { get; set; } Property Value string State Gets the state or province. public string? State { get; set; } Property Value string Street Gets the street address. public string? Street { get; set; } Property Value string"
  },
  "api/Domain.ValueObjects.EntityCreationStatus-1.html": {
    "href": "api/Domain.ValueObjects.EntityCreationStatus-1.html",
    "title": "Class EntityCreationStatus<TKey> | Authentica",
    "keywords": "Class EntityCreationStatus<TKey> Namespace Domain.ValueObjects Assembly Authentica.Service.Identity.dll Represents the creation status of an entity. public sealed class EntityCreationStatus<TKey> where TKey : IEquatable<TKey> Type Parameters TKey The type of the user identifier. Inheritance object EntityCreationStatus<TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EntityCreationStatus(DateTime, TKey) Initializes a new instance of the EntityCreationStatus class. public EntityCreationStatus(DateTime createdOnUtc, TKey createdBy) Parameters createdOnUtc DateTime The date and time when the entity was created in UTC. createdBy TKey The identifier of the user who created the entity. Properties CreatedBy Gets the identifier of the user who created the entity. public TKey CreatedBy { get; set; } Property Value TKey CreatedOnUtc Gets the date and time when the entity was created in UTC. public DateTime CreatedOnUtc { get; set; } Property Value DateTime"
  },
  "api/Domain.ValueObjects.EntityDeletionStatus-1.html": {
    "href": "api/Domain.ValueObjects.EntityDeletionStatus-1.html",
    "title": "Class EntityDeletionStatus<TKey> | Authentica",
    "keywords": "Class EntityDeletionStatus<TKey> Namespace Domain.ValueObjects Assembly Authentica.Service.Identity.dll Represents soft deletion information for an entity. public sealed class EntityDeletionStatus<TKey> where TKey : IEquatable<TKey> Type Parameters TKey Inheritance object EntityDeletionStatus<TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EntityDeletionStatus(bool, DateTime?, TKey?) Initializes a new instance of the EntityDeletionStatus<TKey> public EntityDeletionStatus(bool isDeleted, DateTime? deletedOnUtc, TKey? deletedBy) Parameters isDeleted bool Indicates whether the entity is deleted. deletedOnUtc DateTime? The date and time when the entity was deleted in UTC. Null if not deleted. deletedBy TKey The identifier of the user who deleted the entity. Null if not deleted. Properties DeletedBy The identifier of the user who deleted the entity. public TKey? DeletedBy { get; set; } Property Value TKey DeletedOnUtc The date and time when the entity was deleted in UTC. public DateTime? DeletedOnUtc { get; set; } Property Value DateTime? IsDeleted Indicates whether the entity is deleted. public bool IsDeleted { get; set; } Property Value bool"
  },
  "api/Domain.ValueObjects.EntityModificationStatus-1.html": {
    "href": "api/Domain.ValueObjects.EntityModificationStatus-1.html",
    "title": "Class EntityModificationStatus<TKey> | Authentica",
    "keywords": "Class EntityModificationStatus<TKey> Namespace Domain.ValueObjects Assembly Authentica.Service.Identity.dll Represents the modification status of an entity. public sealed class EntityModificationStatus<TKey> where TKey : IEquatable<TKey> Type Parameters TKey Inheritance object EntityModificationStatus<TKey> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors EntityModificationStatus(DateTime?, TKey?) Initializes a new instance of EntityModificationStatus<TKey> public EntityModificationStatus(DateTime? modifiedOnUtc, TKey? modifiedBy) Parameters modifiedOnUtc DateTime? The date and time when the entity was last modified in UTC. Null if never modified. modifiedBy TKey The identifier of the user who last modified the entity. Null if never modified. Properties ModifiedBy The identifier of the user who last modified the entity. public TKey? ModifiedBy { get; set; } Property Value TKey ModifiedOnUtc The date and time when the entity was last modified in UTC. public DateTime? ModifiedOnUtc { get; set; } Property Value DateTime?"
  },
  "api/Domain.ValueObjects.html": {
    "href": "api/Domain.ValueObjects.html",
    "title": "Namespace Domain.ValueObjects | Authentica",
    "keywords": "Namespace Domain.ValueObjects Classes Address Represents an address value object. EntityCreationStatus<TKey> Represents the creation status of an entity. EntityDeletionStatus<TKey> Represents soft deletion information for an entity. EntityModificationStatus<TKey> Represents the modification status of an entity."
  },
  "api/Persistence.Configurations.ActivityConfiguration.html": {
    "href": "api/Persistence.Configurations.ActivityConfiguration.html",
    "title": "Class ActivityConfiguration | Authentica",
    "keywords": "Class ActivityConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configures the properties and relationships of the Activity entity. public class ActivityConfiguration : IEntityTypeConfiguration<Activity> Inheritance object ActivityConfiguration Implements IEntityTypeConfiguration<Activity> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Activity>) Configures the entity of type Activity. public void Configure(EntityTypeBuilder<Activity> builder) Parameters builder EntityTypeBuilder<Activity> The builder to be used to configure the entity."
  },
  "api/Persistence.Configurations.ClientApplicationConfiguration.html": {
    "href": "api/Persistence.Configurations.ClientApplicationConfiguration.html",
    "title": "Class ClientApplicationConfiguration | Authentica",
    "keywords": "Class ClientApplicationConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of ClientApplication. public class ClientApplicationConfiguration : IEntityTypeConfiguration<ClientApplication> Inheritance object ClientApplicationConfiguration Implements IEntityTypeConfiguration<ClientApplication> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<ClientApplication>) Configures the entity framework mapping for ClientApplication. public void Configure(EntityTypeBuilder<ClientApplication> builder) Parameters builder EntityTypeBuilder<ClientApplication> The entity type builder used to configure the entity."
  },
  "api/Persistence.Configurations.RoleClaimConfiguration.html": {
    "href": "api/Persistence.Configurations.RoleClaimConfiguration.html",
    "title": "Class RoleClaimConfiguration | Authentica",
    "keywords": "Class RoleClaimConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of RoleClaim. public class RoleClaimConfiguration : IEntityTypeConfiguration<RoleClaim> Inheritance object RoleClaimConfiguration Implements IEntityTypeConfiguration<RoleClaim> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<RoleClaim>) Configures the entity of type RoleClaim. public void Configure(EntityTypeBuilder<RoleClaim> builder) Parameters builder EntityTypeBuilder<RoleClaim> The builder to be used to configure the entity type."
  },
  "api/Persistence.Configurations.RoleConfiguration.html": {
    "href": "api/Persistence.Configurations.RoleConfiguration.html",
    "title": "Class RoleConfiguration | Authentica",
    "keywords": "Class RoleConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of Role. public sealed class RoleConfiguration : IEntityTypeConfiguration<Role> Inheritance object RoleConfiguration Implements IEntityTypeConfiguration<Role> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Role>) Configures the entity of type Role. public void Configure(EntityTypeBuilder<Role> builder) Parameters builder EntityTypeBuilder<Role> The builder to be used to configure the entity type."
  },
  "api/Persistence.Configurations.SessionConfiguration.html": {
    "href": "api/Persistence.Configurations.SessionConfiguration.html",
    "title": "Class SessionConfiguration | Authentica",
    "keywords": "Class SessionConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configures the properties and relationships of the Session entity. public class SessionConfiguration : IEntityTypeConfiguration<Session> Inheritance object SessionConfiguration Implements IEntityTypeConfiguration<Session> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<Session>) Configures the entity of type Session. public void Configure(EntityTypeBuilder<Session> builder) Parameters builder EntityTypeBuilder<Session> The builder to be used to configure the entity."
  },
  "api/Persistence.Configurations.UserClaimConfiguration.html": {
    "href": "api/Persistence.Configurations.UserClaimConfiguration.html",
    "title": "Class UserClaimConfiguration | Authentica",
    "keywords": "Class UserClaimConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of UserClaim. public class UserClaimConfiguration : IEntityTypeConfiguration<UserClaim> Inheritance object UserClaimConfiguration Implements IEntityTypeConfiguration<UserClaim> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<UserClaim>) Configures the entity framework mapping for UserClaim. public void Configure(EntityTypeBuilder<UserClaim> builder) Parameters builder EntityTypeBuilder<UserClaim> The entity type builder used to configure the entity."
  },
  "api/Persistence.Configurations.UserClientApplicationConfiguration.html": {
    "href": "api/Persistence.Configurations.UserClientApplicationConfiguration.html",
    "title": "Class UserClientApplicationConfiguration | Authentica",
    "keywords": "Class UserClientApplicationConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of UserClientApplication public class UserClientApplicationConfiguration : IEntityTypeConfiguration<UserClientApplication> Inheritance object UserClientApplicationConfiguration Implements IEntityTypeConfiguration<UserClientApplication> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<UserClientApplication>) Configures the entity framework mapping for UserClientApplication. public void Configure(EntityTypeBuilder<UserClientApplication> builder) Parameters builder EntityTypeBuilder<UserClientApplication> The entity type builder used to configure the entity."
  },
  "api/Persistence.Configurations.UserConfiguration.html": {
    "href": "api/Persistence.Configurations.UserConfiguration.html",
    "title": "Class UserConfiguration | Authentica",
    "keywords": "Class UserConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of User. public class UserConfiguration : IEntityTypeConfiguration<User> Inheritance object UserConfiguration Implements IEntityTypeConfiguration<User> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<User>) Configures the entity framework mapping for User. public void Configure(EntityTypeBuilder<User> builder) Parameters builder EntityTypeBuilder<User> The entity type builder used to configure the entity."
  },
  "api/Persistence.Configurations.UserLoginConfiguration.html": {
    "href": "api/Persistence.Configurations.UserLoginConfiguration.html",
    "title": "Class UserLoginConfiguration | Authentica",
    "keywords": "Class UserLoginConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of IdentityUserLogin<TKey>. public class UserLoginConfiguration : IEntityTypeConfiguration<IdentityUserLogin<string>> Inheritance object UserLoginConfiguration Implements IEntityTypeConfiguration<IdentityUserLogin<string>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<IdentityUserLogin<string>>) Configures the entity of type Microsoft.AspNetCore.Identity.IdentityUserLogin{System.String}. public void Configure(EntityTypeBuilder<IdentityUserLogin<string>> builder) Parameters builder EntityTypeBuilder<IdentityUserLogin<string>> The builder to be used to configure the entity type."
  },
  "api/Persistence.Configurations.UserRoleConfiguration.html": {
    "href": "api/Persistence.Configurations.UserRoleConfiguration.html",
    "title": "Class UserRoleConfiguration | Authentica",
    "keywords": "Class UserRoleConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of UserRole. public sealed class UserRoleConfiguration : IEntityTypeConfiguration<UserRole> Inheritance object UserRoleConfiguration Implements IEntityTypeConfiguration<UserRole> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<UserRole>) Configures the entity of type UserRole. public void Configure(EntityTypeBuilder<UserRole> builder) Parameters builder EntityTypeBuilder<UserRole> The builder to be used to configure the entity type."
  },
  "api/Persistence.Configurations.UserTokenConfiguration.html": {
    "href": "api/Persistence.Configurations.UserTokenConfiguration.html",
    "title": "Class UserTokenConfiguration | Authentica",
    "keywords": "Class UserTokenConfiguration Namespace Persistence.Configurations Assembly Authentica.Service.Identity.dll Configuration class for the entity framework mapping of IdentityUserToken<TKey>. public class UserTokenConfiguration : IEntityTypeConfiguration<IdentityUserToken<string>> Inheritance object UserTokenConfiguration Implements IEntityTypeConfiguration<IdentityUserToken<string>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Configure(EntityTypeBuilder<IdentityUserToken<string>>) Configures the entity of type Microsoft.AspNetCore.Identity.IdentityUserToken{System.String}. public void Configure(EntityTypeBuilder<IdentityUserToken<string>> builder) Parameters builder EntityTypeBuilder<IdentityUserToken<string>> The builder to be used to configure the entity type."
  },
  "api/Persistence.Configurations.html": {
    "href": "api/Persistence.Configurations.html",
    "title": "Namespace Persistence.Configurations | Authentica",
    "keywords": "Namespace Persistence.Configurations Classes ActivityConfiguration Configures the properties and relationships of the Activity entity. ClientApplicationConfiguration Configuration class for the entity framework mapping of ClientApplication. RoleClaimConfiguration Configuration class for the entity framework mapping of RoleClaim. RoleConfiguration Configuration class for the entity framework mapping of Role. SessionConfiguration Configures the properties and relationships of the Session entity. UserClaimConfiguration Configuration class for the entity framework mapping of UserClaim. UserClientApplicationConfiguration Configuration class for the entity framework mapping of UserClientApplication UserConfiguration Configuration class for the entity framework mapping of User. UserLoginConfiguration Configuration class for the entity framework mapping of IdentityUserLogin<TKey>. UserRoleConfiguration Configuration class for the entity framework mapping of UserRole. UserTokenConfiguration Configuration class for the entity framework mapping of IdentityUserToken<TKey>."
  },
  "api/Persistence.Contexts.AppDbContext.html": {
    "href": "api/Persistence.Contexts.AppDbContext.html",
    "title": "Class AppDbContext | Authentica",
    "keywords": "Class AppDbContext Namespace Persistence.Contexts Assembly Authentica.Service.Identity.dll Main database context for the application. public class AppDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.ToString() DbContext.Equals(object) DbContext.GetHashCode() DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors AppDbContext() Initializes a new instance of the AppDbContext class. public AppDbContext() AppDbContext(DbContextOptions<AppDbContext>, IConfiguration) Initializes a new instance of the AppDbContext class. public AppDbContext(DbContextOptions<AppDbContext> opt, IConfiguration configuration) Parameters opt DbContextOptions<AppDbContext> DbContext options. configuration IConfiguration Configuration instance. Properties Activities Activities collection. public DbSet<Activity> Activities { get; } Property Value DbSet<Activity> ClientApplications ClientApplications collection. public DbSet<ClientApplication> ClientApplications { get; } Property Value DbSet<ClientApplication> Configuration Configuration instance for the DbContext. public IConfiguration Configuration { get; } Property Value IConfiguration RoleClaims RoleClaims collection. public DbSet<RoleClaim> RoleClaims { get; } Property Value DbSet<RoleClaim> Roles Roles collection. public DbSet<Role> Roles { get; } Property Value DbSet<Role> Sessions Sessions collection. public DbSet<Session> Sessions { get; } Property Value DbSet<Session> UserClaims UserClaims collection. public DbSet<UserClaim> UserClaims { get; } Property Value DbSet<UserClaim> UserClientApplications UserClientApplications collection. public DbSet<UserClientApplication> UserClientApplications { get; } Property Value DbSet<UserClientApplication> UserLogins UserLogins collection. public DbSet<IdentityUserLogin<string>> UserLogins { get; } Property Value DbSet<IdentityUserLogin<string>> UserRoles UserRoles collection. public DbSet<UserRole> UserRoles { get; } Property Value DbSet<UserRole> UserTokens UserTokens collection. public DbSet<IdentityUserToken<string>> UserTokens { get; } Property Value DbSet<IdentityUserToken<string>> Users Users collection. public DbSet<User> Users { get; } Property Value DbSet<User> Methods OnConfiguring(DbContextOptionsBuilder) Configures the DbContext options such as database connection string and retry policy. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder The options builder used to configure DbContext options. OnModelCreating(ModelBuilder) Applies entity configurations. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder Model builder instance."
  },
  "api/Persistence.Contexts.html": {
    "href": "api/Persistence.Contexts.html",
    "title": "Namespace Persistence.Contexts | Authentica",
    "keywords": "Namespace Persistence.Contexts Classes AppDbContext Main database context for the application."
  },
  "api/Persistence.Seed.Seed.Test.html": {
    "href": "api/Persistence.Seed.Seed.Test.html",
    "title": "Class Seed.Test | Authentica",
    "keywords": "Class Seed.Test Namespace Persistence.Seed Assembly Authentica.Service.Identity.dll Seeds all test user data. public static class Seed.Test Inheritance object Seed.Test Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AdminEmail Default admin email value for test data. public const string AdminEmail = \"admin@default.com\" Field Value string AuthorizeUserEmail User for test data. public const string AuthorizeUserEmail = \"authorizeTest@default.com\" Field Value string DeleteUserEmail Deleted user for test data. public const string DeleteUserEmail = \"deletedUser@default.com\" Field Value string MultiFactorUserEmail User for mfa test data. public const string MultiFactorUserEmail = \"multiFactorTest@default.com\" Field Value string OldDeletedUserEmail User for account purge test data. public const string OldDeletedUserEmail = \"olddeleted@default.com\" Field Value string RecentlyDeletedUserEmail User for account purge test data. public const string RecentlyDeletedUserEmail = \"recentlydeleted@default.com\" Field Value string Methods SeedAuthorizeUser(WebApplication) Seeds a user into the database if it doesn't already exist for testing the authorize endpoint. public static Task SeedAuthorizeUser(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedBackgroundServiceUsers(WebApplication) Seeds two test users into the database if it doesn't already exist for testing public static Task SeedBackgroundServiceUsers(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedDeletedUser(WebApplication) Seeds an deleted user into the database if it doesn't already exist. public static Task SeedDeletedUser(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedMultiFactorUser(WebApplication) Seeds a user into the database if it doesn't already exist for testing the authorize endpoint. public static Task SeedMultiFactorUser(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedOldDeletedClientApplicationAsync(WebApplication) Seeds the initial client application into the database if it doesn't already exist. public static Task SeedOldDeletedClientApplicationAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedRecentDeletedClientApplicationAsync(WebApplication) Seeds the initial client application into the database if it doesn't already exist. public static Task SeedRecentDeletedClientApplicationAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedTestAdminUserAsync(WebApplication) Seeds an admin user into the database if it doesn't already exist. public static Task SeedTestAdminUserAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedTestClientApplicationAsync(WebApplication) Seeds the test client application into the database if it doesn't already exist. public static Task SeedTestClientApplicationAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedTestRolesAsync(WebApplication) Seeds roles into the database if they don't already exist. public static Task SeedTestRolesAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation."
  },
  "api/Persistence.Seed.Seed.html": {
    "href": "api/Persistence.Seed.Seed.html",
    "title": "Class Seed | Authentica",
    "keywords": "Class Seed Namespace Persistence.Seed Assembly Authentica.Service.Identity.dll Provides methods for seeding initial data into the application database. public static class Seed Inheritance object Seed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AddressValue Default value for an address. public const string AddressValue = \"DEFAULT\" Field Value string CreatedBy Default value for created by. public const string CreatedBy = \"SYSTEM\" Field Value string Methods SeedAdminUserAsync(WebApplication) Seeds an admin user into the database if it doesn't already exist. public static Task SeedAdminUserAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedClientApplicationAsync(WebApplication) Seeds the client application into the database if it doesn't already exist. public static Task SeedClientApplicationAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation. SeedRolesAsync(WebApplication) Seeds roles into the database if they don't already exist. public static Task SeedRolesAsync(WebApplication app) Parameters app WebApplication The web application instance. Returns Task A task representing the asynchronous operation."
  },
  "api/Persistence.Seed.html": {
    "href": "api/Persistence.Seed.html",
    "title": "Namespace Persistence.Seed | Authentica",
    "keywords": "Namespace Persistence.Seed Classes Seed Provides methods for seeding initial data into the application database. Seed.Test Seeds all test user data."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the homepage | Authentica",
    "keywords": "This is the homepage Refer to API for the documentation."
  }
}